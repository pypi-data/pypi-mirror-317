Index: social_validator/telegram/__init__.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from typing import Literal, Tuple\r\n\r\nfrom social_validator.exceptions import ValidationError\r\n\r\n# Restrictions for user, channel and bot identifiers\r\nID_MIN_LENGTH = 5\r\nID_MAX_LENGTH = 32\r\n\r\n# Restrictions for description (about) field\r\nDESCRIPTION_USER_MAX_LENGTH = 70\r\nDESCRIPTION_GROUP_MAX_LENGTH = 255\r\nDESCRIPTION_CHANNEL_MAX_LENGTH = DESCRIPTION_GROUP_MAX_LENGTH\r\nDESCRIPTION_BOT_MAX_LENGTH = 120\r\n\r\n# Restrictions for chat names\r\nCHAT_NAME_MIN_LENGTH = 1\r\nCHAT_NAME_MAX_LENGTH = 128\r\n\r\n# Restrictions for user and bot names\r\nFIRST_NAME_MIN_LENGTH = 1\r\nFIRST_NAME_MAX_LENGTH = 64\r\nLAST_NAME_MAX_LENGTH = 64\r\n\r\n# Restrictions for messages\r\nMESSAGE_MIN_LENGTH = 1\r\nMESSAGE_MAX_LENGTH = 4096\r\n# message with media files included\r\nMEDIA_MESSAGE_MAX_LENGTH = 1024\r\n\r\n# Restrictions for commands\r\nCOMMAND_MIN_LENGTH = 1\r\nCOMMAND_MAX_LENGTH = 32\r\nCOMMAND_DESCRIPTION_MAX_LENGTH = 256\r\n\r\nChatType = Literal[\"user\", \"group\", \"channel\", \"bot\"]\r\n\r\n\r\ndef _is_valid_name(s: str) -> bool:\r\n    \"\"\"\r\n    Checks the string for matching the pattern: A-Za-z, 0-9, _\r\n    \"\"\"\r\n    # use a small hack to avoid performing additional checks\r\n    s = s.replace(\"_\", \"A\")\r\n    return s.isascii() and s.isalnum()\r\n\r\n\r\ndef _is_valid_char_on_sides(s: str) -> bool:\r\n    \"\"\"\r\n    Check of the correctness of the first and last characters.\r\n    The first and last character must not be an underscore.\r\n    The first character also can't be a digit.\r\n    \"\"\"\r\n    if not s:\r\n        # empty string\r\n        return False\r\n\r\n    first_char = s[0]\r\n    last_char = s[len(s) - 1]\r\n    return not first_char.isdigit() and first_char != \"_\" and last_char != \"_\"\r\n\r\n\r\ndef _get_description_length_limit(t: ChatType) -> int:\r\n    \"\"\"\r\n    Gets the maximum allowed length for the description based on the channel\r\n    type.\r\n    If an invalid type is specified, a ValueError will be thrown.\r\n    \"\"\"\r\n    if t == \"user\":\r\n        return DESCRIPTION_USER_MAX_LENGTH\r\n    elif t == \"group\":\r\n        return DESCRIPTION_GROUP_MAX_LENGTH\r\n    elif t == \"channel\":\r\n        return DESCRIPTION_CHANNEL_MAX_LENGTH\r\n    elif t == \"bot\":\r\n        return DESCRIPTION_BOT_MAX_LENGTH\r\n    else:\r\n        raise ValueError(f\"Unexpected chat type: {t}\")\r\n\r\n\r\ndef is_valid_id(_id: str) -> bool:\r\n    return (\r\n        _is_valid_char_on_sides(_id)\r\n        and \"__\" not in _id\r\n        and (ID_MIN_LENGTH <= len(_id) <= ID_MAX_LENGTH)\r\n        and _is_valid_name(_id)\r\n    )\r\n\r\n\r\ndef is_bot_id(_id: str) -> bool:\r\n    return _id.endswith(\"bot\")\r\n\r\n\r\ndef is_valid_description(text: str, *, chat_type: ChatType = \"user\") -> bool:\r\n    return len(text) <= _get_description_length_limit(chat_type)\r\n\r\n\r\ndef is_valid_chat_name(name: str) -> bool:\r\n    return CHAT_NAME_MIN_LENGTH <= len(name) <= CHAT_NAME_MAX_LENGTH\r\n\r\n\r\ndef is_valid_first_name(name: str) -> bool:\r\n    return FIRST_NAME_MIN_LENGTH <= len(name) <= FIRST_NAME_MAX_LENGTH\r\n\r\n\r\ndef is_valid_last_name(name: str) -> bool:\r\n    return len(name) <= LAST_NAME_MAX_LENGTH\r\n\r\n\r\ndef is_valid_full_name(first_name: str, last_name: str = \"\") -> bool:\r\n    return is_valid_first_name(first_name) and is_valid_last_name(last_name)\r\n\r\n\r\ndef is_valid_message(text: str, *, include_media: bool = False) -> bool:\r\n    return (\r\n        MESSAGE_MIN_LENGTH\r\n        <= len(text)\r\n        <= (MESSAGE_MAX_LENGTH if not include_media else MEDIA_MESSAGE_MAX_LENGTH)\r\n    )\r\n\r\n\r\ndef is_valid_command(cmd: str) -> bool:\r\n    return (COMMAND_MIN_LENGTH <= len(cmd) <= COMMAND_MAX_LENGTH) and (\r\n        _is_valid_name(cmd)\r\n    )\r\n\r\n\r\ndef validate_id(_id: str) -> str:\r\n    \"\"\"\r\n    Validates the text identifier of the user/channel/bot.\r\n    This a public identifier by which you can find the desired chat\r\n    (available by ``t.me/%id%``).\r\n\r\n    Only ID characters are allowed: A-Za-z, 0-9 and underscores.\r\n    ID only start with a letter, must not contain double underscores, and must\r\n    contain from 5 to 32 characters.\r\n\r\n    :param _id: User, channel or bot identifier\r\n    :return: Input value, converted to lower-case\r\n    :raises ValidationError: if the passed value contains non-ascii characters,\r\n        spaces or other special chars not provided by Telegram\r\n    \"\"\"\r\n    if not is_valid_id(_id):\r\n        raise ValidationError(\r\n            \"ID must be length from 5 to 32 chars, starts with a letter and consists of: A-Za-z, 0-9 and underscores\",\r\n            input_value=_id,\r\n        )\r\n\r\n    return _id.lower()\r\n\r\n\r\ndef validate_bot_id(_id: str) -> str:\r\n    \"\"\"\r\n    Validates the text identifier and checks the suffix \"bot\". Only ID\r\n    characters are allowed.\r\n\r\n    :param _id: Bot identifier\r\n    :return: Input value, converted to lower-case\r\n    :raises ValidationError: if the passed value does not have a ``bot`` suffix,\r\n        contains non-ascii characters, spaces or other special chars not\r\n        provided by Telegram\r\n    \"\"\"\r\n    _id = validate_id(_id)\r\n\r\n    if not is_bot_id(_id):\r\n        raise ValidationError(\"Bot ID must have the suffix 'bot'\", input_value=_id)\r\n\r\n    return _id\r\n\r\n\r\ndef validate_description(text: str, *, chat_type: ChatType = \"user\") -> str:\r\n    \"\"\"\r\n    Validates the description (about) field for the selected chat type.\r\n    All characters are allowed.\r\n\r\n    Each type has a different maximum length:\r\n        * user - 70\r\n        * group - 255\r\n        * channel - 255\r\n        * bot - 120\r\n\r\n    :param text: biography (about) text\r\n    :param chat_type: type of chat in which the text is located\r\n    :return: Input text\r\n    :raises ValueError: if the specified chat type is invalid\r\n    :raises ValidationError: if the passed text exceeds the maximum allowed\r\n        length\r\n    \"\"\"\r\n    if not is_valid_description(text, chat_type=chat_type):\r\n        length_limit = _get_description_length_limit(chat_type)\r\n        raise ValidationError(\r\n            f\"Description text must contain no more than {length_limit} characters for '{chat_type}' chat type\",\r\n            input_value=text,\r\n        )\r\n\r\n    return text\r\n\r\n\r\ndef validate_chat_name(name: str) -> str:\r\n    \"\"\"\r\n    Validates the name of channel or group for the minimum (1) and maximum (128)\r\n    length of characters. All characters are allowed.\r\n\r\n    :param name: Channel or group name\r\n    :return: Input name\r\n    :raises ValidationError: if there are not enough characters in passed name,\r\n        or their number exceeds the maximum allowed length\r\n    \"\"\"\r\n    if not is_valid_chat_name(name):\r\n        raise ValidationError(\r\n            f\"Chat name must contain from {CHAT_NAME_MIN_LENGTH} to {CHAT_NAME_MAX_LENGTH} characters\",\r\n            input_value=name,\r\n        )\r\n\r\n    return name\r\n\r\n\r\ndef validate_full_name(*, first_name: str, last_name: str = \"\") -> Tuple[str, str]:\r\n    \"\"\"\r\n    Validates the first and last name separately for the length limit.\r\n    All characters are allowed. Passed names must not exceed 64 characters.\r\n    The first name can't be empty, the last name, on the contrary, can.\r\n\r\n    :param first_name: User's first name\r\n    :param last_name: User's last name\r\n    :return: Tuple of input parameters (first_name, last_name)\r\n    :raises ValidationError: if there are not enough characters in passed name,\r\n        or their number exceeds the maximum allowed length\r\n    \"\"\"\r\n    if not is_valid_first_name(first_name):\r\n        raise ValidationError(\r\n            f\"First name must contain from {FIRST_NAME_MIN_LENGTH} to {FIRST_NAME_MAX_LENGTH} characters\",\r\n            input_value=first_name,\r\n        )\r\n    if not is_valid_last_name(last_name):\r\n        raise ValidationError(\r\n            f\"Last name must not exceed {LAST_NAME_MAX_LENGTH} characters\",\r\n            input_value=last_name,\r\n        )\r\n\r\n    return first_name, last_name\r\n\r\n\r\ndef validate_message(text: str, *, include_media: bool = False) -> str:\r\n    \"\"\"\r\n    Validates the text message from user/channel/bot. All characters are\r\n    allowed. The length must always be at least one character. The maximum\r\n    length is calculated from the include_media condition if it is true, then\r\n    the maximum length will be 1024, otherwise 4096.\r\n\r\n    :param text: Message text\r\n    :param include_media: Does the message additionally include media files\r\n    :return: Input text\r\n    :raises ValidationError: if the text is empty or the length limit is\r\n        exceeded\r\n    \"\"\"\r\n    if not is_valid_message(text, include_media=include_media):\r\n        raise ValidationError(\r\n            f\"Message must contain from {MESSAGE_MIN_LENGTH} to \"\r\n            f\"{MESSAGE_MAX_LENGTH if not include_media else MEDIA_MESSAGE_MAX_LENGTH} \"\r\n            f\"characters with include_media={include_media}\",\r\n            input_value=text,\r\n        )\r\n\r\n    return text\r\n\r\n\r\ndef validate_command(cmd: str) -> str:\r\n    \"\"\"\r\n    Validates the bot text command for the minimum (1) and maximum (32) length.\r\n    Only ID characters are allowed: A-Za-z, 0-9 and underscores.\r\n\r\n    Please note: Each command is stored in lower-case, but for a more concise\r\n    implementation, uppercase characters are also available for you. They will\r\n    be converted to the lower-case\r\n\r\n    :param cmd: Bot text command\r\n    :return: Input command, converted to lower-case\r\n    :raises ValidationError: if the command is empty, or the length limit is\r\n        exceeded, or contains characters that are not allowed by Telegram.\r\n    \"\"\"\r\n    if not is_valid_command(cmd):\r\n        raise ValidationError(\r\n            f\"Command must contain from {COMMAND_MIN_LENGTH} to {COMMAND_MAX_LENGTH} \"\r\n            f\"characters and consist of: A-Za-z, 0-9 and underscores\",\r\n            input_value=cmd,\r\n        )\r\n\r\n    return cmd.lower()\r\n
===================================================================
diff --git a/social_validator/telegram/__init__.py b/social_validator/telegram/__init__.py
--- a/social_validator/telegram/__init__.py	
+++ b/social_validator/telegram/__init__.py	
@@ -1,6 +1,7 @@
 from typing import Literal, Tuple
 
 from social_validator.exceptions import ValidationError
+from social_validator.shared import is_valid_id
 
 # Restrictions for user, channel and bot identifiers
 ID_MIN_LENGTH = 5
@@ -79,10 +80,17 @@
 
 def is_valid_id(_id: str) -> bool:
     return (
+<<<<<<< HEAD:social_validator/telegram/__init__.py
         _is_valid_char_on_sides(_id)
         and "__" not in _id
         and (ID_MIN_LENGTH <= len(_id) <= ID_MAX_LENGTH)
         and _is_valid_name(_id)
+=======
+            _is_valid_char_on_sides(_id)
+            and "__" not in _id
+            and (ID_MIN_LENGTH <= len(_id) <= ID_MAX_LENGTH)
+            and is_valid_id(_id)
+>>>>>>> parent of 792cd0f (fix: avoid function shadowing):social_validator/telegram.py
     )
 
 
@@ -120,7 +128,11 @@
 
 def is_valid_command(cmd: str) -> bool:
     return (COMMAND_MIN_LENGTH <= len(cmd) <= COMMAND_MAX_LENGTH) and (
+<<<<<<< HEAD:social_validator/telegram/__init__.py
         _is_valid_name(cmd)
+=======
+        is_valid_id(cmd)
+>>>>>>> parent of 792cd0f (fix: avoid function shadowing):social_validator/telegram.py
     )
 
 
