"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
from mixpeek import utils
from mixpeek._hooks import SDKHooks
from mixpeek.assets import Assets
from mixpeek.collections import Collections
from mixpeek.featureextractors import FeatureExtractors
from mixpeek.features import Features
from mixpeek.health import Health
from mixpeek.ingest import Ingest
from mixpeek.interactions import Interactions
from mixpeek.namespaces import Namespaces
from mixpeek.organizations import Organizations
from mixpeek.searchinteractions import SearchInteractions
from mixpeek.tasks import Tasks
from mixpeek.types import OptionalNullable, UNSET
from typing import Dict, Optional


class Mixpeek(BaseSDK):
    r"""Mixpeek API: This is the Mixpeek API, providing access to various endpoints for data processing and retrieval."""

    organizations: Organizations
    namespaces: Namespaces
    features: Features
    search_interactions: SearchInteractions
    interactions: Interactions
    feature_extractors: FeatureExtractors
    ingest: Ingest
    assets: Assets
    collections: Collections
    tasks: Tasks
    health: Health

    def __init__(
        self,
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()

    def _init_sdks(self):
        self.organizations = Organizations(self.sdk_configuration)
        self.namespaces = Namespaces(self.sdk_configuration)
        self.features = Features(self.sdk_configuration)
        self.search_interactions = SearchInteractions(self.sdk_configuration)
        self.interactions = Interactions(self.sdk_configuration)
        self.feature_extractors = FeatureExtractors(self.sdk_configuration)
        self.ingest = Ingest(self.sdk_configuration)
        self.assets = Assets(self.sdk_configuration)
        self.collections = Collections(self.sdk_configuration)
        self.tasks = Tasks(self.sdk_configuration)
        self.health = Health(self.sdk_configuration)

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.sdk_configuration.client is not None:
            self.sdk_configuration.client.close()

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.sdk_configuration.async_client is not None:
            await self.sdk_configuration.async_client.aclose()
