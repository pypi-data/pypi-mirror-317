"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .interactiontype import InteractionType
from .searchrequestfeatures_input import (
    SearchRequestFeaturesInput,
    SearchRequestFeaturesInputTypedDict,
)
from mixpeek.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class MetadataTypedDict(TypedDict):
    pass


class Metadata(BaseModel):
    pass


class SearchInteractionTypedDict(TypedDict):
    feature_id: str
    r"""ID of the item that was interacted with"""
    interaction_type: InteractionType
    search_request: NotRequired[Nullable[SearchRequestFeaturesInputTypedDict]]
    r"""The search request that led to this interaction"""
    position: NotRequired[Nullable[int]]
    r"""Position in search results where interaction occurred"""
    metadata: NotRequired[Nullable[MetadataTypedDict]]
    r"""Additional context about the interaction"""
    session_id: NotRequired[Nullable[str]]
    r"""Search session identifier"""


class SearchInteraction(BaseModel):
    feature_id: str
    r"""ID of the item that was interacted with"""

    interaction_type: InteractionType

    search_request: OptionalNullable[SearchRequestFeaturesInput] = UNSET
    r"""The search request that led to this interaction"""

    position: OptionalNullable[int] = UNSET
    r"""Position in search results where interaction occurred"""

    metadata: OptionalNullable[Metadata] = UNSET
    r"""Additional context about the interaction"""

    session_id: OptionalNullable[str] = UNSET
    r"""Search session identifier"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["search_request", "position", "metadata", "session_id"]
        nullable_fields = ["search_request", "position", "metadata", "session_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
