"""empty message

Revision ID: a3563fe36f94
Revises: 90f041e667a5
Create Date: 2024-11-07 14:18:34.691975

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision: str = 'a3563fe36f94'
down_revision: Union[str, None] = '90f041e667a5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_experiments_set_index = PGFunction(
        schema="public",
        signature="experiments_set_index()",
        definition='RETURNS trigger AS $$\n        BEGIN\n            NEW.index := COALESCE(\n                (SELECT MAX(index) FROM experiments_experiments), -1\n            ) + 1;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql'
    )
    op.create_entity(public_experiments_set_index)

    public_trials_set_index = PGFunction(
        schema="public",
        signature="trials_set_index()",
        definition='RETURNS trigger AS $$\n        BEGIN\n            NEW.index := COALESCE(\n                (SELECT MAX(index) FROM experiments_trials WHERE experiment_id = NEW.experiment_id), -1\n            ) + 1;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql'
    )
    op.create_entity(public_trials_set_index)

    public_experiments_experiments_experiments_set_index_trigger = PGTrigger(
        schema="public",
        signature="experiments_set_index_trigger",
        on_entity="public.experiments_experiments",
        is_constraint=False,
        definition='BEFORE INSERT ON public.experiments_experiments\n    FOR EACH ROW EXECUTE FUNCTION public.experiments_set_index()'
    )
    op.create_entity(public_experiments_experiments_experiments_set_index_trigger)

    public_experiments_trials_trials_set_index_trigger = PGTrigger(
        schema="public",
        signature="trials_set_index_trigger",
        on_entity="public.experiments_trials",
        is_constraint=False,
        definition='BEFORE INSERT ON public.experiments_trials\n    FOR EACH ROW EXECUTE FUNCTION public.trials_set_index()'
    )
    op.create_entity(public_experiments_trials_trials_set_index_trigger)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    public_experiments_trials_trials_set_index_trigger = PGTrigger(
        schema="public",
        signature="trials_set_index_trigger",
        on_entity="public.experiments_trials",
        is_constraint=False,
        definition='BEFORE INSERT ON public.experiments_trials\n    FOR EACH ROW EXECUTE FUNCTION public.trials_set_index()'
    )
    op.drop_entity(public_experiments_trials_trials_set_index_trigger)

    public_experiments_experiments_experiments_set_index_trigger = PGTrigger(
        schema="public",
        signature="experiments_set_index_trigger",
        on_entity="public.experiments_experiments",
        is_constraint=False,
        definition='BEFORE INSERT ON public.experiments_experiments\n    FOR EACH ROW EXECUTE FUNCTION public.experiments_set_index()'
    )
    op.drop_entity(public_experiments_experiments_experiments_set_index_trigger)

    public_trials_set_index = PGFunction(
        schema="public",
        signature="trials_set_index()",
        definition='RETURNS trigger AS $$\n        BEGIN\n            NEW.index := COALESCE(\n                (SELECT MAX(index) FROM experiments_trials WHERE experiment_id = NEW.experiment_id), -1\n            ) + 1;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql'
    )
    op.drop_entity(public_trials_set_index)

    public_experiments_set_index = PGFunction(
        schema="public",
        signature="experiments_set_index()",
        definition='RETURNS trigger AS $$\n        BEGIN\n            NEW.index := COALESCE(\n                (SELECT MAX(index) FROM experiments_experiments), -1\n            ) + 1;\n            RETURN NEW;\n        END;\n        $$ LANGUAGE plpgsql'
    )
    op.drop_entity(public_experiments_set_index)

    # ### end Alembic commands ###
