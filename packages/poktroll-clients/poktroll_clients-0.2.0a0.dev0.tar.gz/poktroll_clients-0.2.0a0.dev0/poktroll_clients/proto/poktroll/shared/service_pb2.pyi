"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
NOTE that the `shared` package is not a Cosmos module,
but rather a manually created package to resolve circular type dependencies.
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _RPCType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _RPCTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RPCType.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UNKNOWN_RPC: _RPCType.ValueType  # 0
    """Undefined RPC type"""
    GRPC: _RPCType.ValueType  # 1
    """gRPC"""
    WEBSOCKET: _RPCType.ValueType  # 2
    """WebSocket"""
    JSON_RPC: _RPCType.ValueType  # 3
    """JSON-RPC"""
    REST: _RPCType.ValueType  # 4
    """REST"""

class RPCType(_RPCType, metaclass=_RPCTypeEnumTypeWrapper):
    """Enum to define RPC types"""

UNKNOWN_RPC: RPCType.ValueType  # 0
"""Undefined RPC type"""
GRPC: RPCType.ValueType  # 1
"""gRPC"""
WEBSOCKET: RPCType.ValueType  # 2
"""WebSocket"""
JSON_RPC: RPCType.ValueType  # 3
"""JSON-RPC"""
REST: RPCType.ValueType  # 4
"""REST"""
global___RPCType = RPCType

class _ConfigOptions:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ConfigOptionsEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ConfigOptions.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UNKNOWN_CONFIG: _ConfigOptions.ValueType  # 0
    """Undefined config option"""
    TIMEOUT: _ConfigOptions.ValueType  # 1
    """Timeout setting"""

class ConfigOptions(_ConfigOptions, metaclass=_ConfigOptionsEnumTypeWrapper):
    """Enum to define configuration options
    TODO_RESEARCH: Should these be configs, SLAs or something else? There will be more discussion once we get closer to implementing on-chain QoS.
    """

UNKNOWN_CONFIG: ConfigOptions.ValueType  # 0
"""Undefined config option"""
TIMEOUT: ConfigOptions.ValueType  # 1
"""Timeout setting"""
global___ConfigOptions = ConfigOptions

@typing.final
class Service(google.protobuf.message.Message):
    """Service message to encapsulate unique and semantic identifiers for a service on the network"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    COMPUTE_UNITS_PER_RELAY_FIELD_NUMBER: builtins.int
    OWNER_ADDRESS_FIELD_NUMBER: builtins.int
    id: builtins.str
    """For example, what if we want to request a session for a certain service but with some additional configs that identify it?
    Unique identifier for the service
    """
    name: builtins.str
    """TODO_BETA(@bryanchriswhite): Either remove this or rename it to alias.
    (Optional) Semantic human readable name for the service
    """
    compute_units_per_relay: builtins.int
    """The cost of a single relay for this service in terms of compute units.
    Must be used alongside the global 'compute_units_to_tokens_multipler' to calculate the cost of a relay for this service.
    cost_per_relay_for_specific_service = compute_units_per_relay_for_specific_service * compute_units_to_tokens_multipler_global_value
    Compute units required per relay for this service
    """
    owner_address: builtins.str
    """The owner address that created the service.
    It is the address that receives rewards based on the Service's on-chain usage
    It is the only address that can update the service configuration (e.g. compute_units_per_relay),
    or make other updates to it.
    The Bech32 address of the service owner / creator
    """
    def __init__(
        self,
        *,
        id: builtins.str = ...,
        name: builtins.str = ...,
        compute_units_per_relay: builtins.int = ...,
        owner_address: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["compute_units_per_relay", b"compute_units_per_relay", "id", b"id", "name", b"name", "owner_address", b"owner_address"]) -> None: ...

global___Service = Service

@typing.final
class ApplicationServiceConfig(google.protobuf.message.Message):
    """ApplicationServiceConfig holds the service configuration the application stakes for"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SERVICE_ID_FIELD_NUMBER: builtins.int
    service_id: builtins.str
    """The Service ID for which the application is configured"""
    def __init__(
        self,
        *,
        service_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["service_id", b"service_id"]) -> None: ...

global___ApplicationServiceConfig = ApplicationServiceConfig

@typing.final
class SupplierServiceConfig(google.protobuf.message.Message):
    """SupplierServiceConfig holds the service configuration the supplier stakes for"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SERVICE_ID_FIELD_NUMBER: builtins.int
    ENDPOINTS_FIELD_NUMBER: builtins.int
    REV_SHARE_FIELD_NUMBER: builtins.int
    service_id: builtins.str
    """The Service ID for which the supplier is configured"""
    @property
    def endpoints(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SupplierEndpoint]:
        """List of endpoints for the service"""

    @property
    def rev_share(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ServiceRevenueShare]:
        """List of revenue share configurations for the service"""

    def __init__(
        self,
        *,
        service_id: builtins.str = ...,
        endpoints: collections.abc.Iterable[global___SupplierEndpoint] | None = ...,
        rev_share: collections.abc.Iterable[global___ServiceRevenueShare] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["endpoints", b"endpoints", "rev_share", b"rev_share", "service_id", b"service_id"]) -> None: ...

global___SupplierServiceConfig = SupplierServiceConfig

@typing.final
class SupplierEndpoint(google.protobuf.message.Message):
    """SupplierEndpoint message to hold service configuration details"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    URL_FIELD_NUMBER: builtins.int
    RPC_TYPE_FIELD_NUMBER: builtins.int
    CONFIGS_FIELD_NUMBER: builtins.int
    url: builtins.str
    """URL of the endpoint"""
    rpc_type: global___RPCType.ValueType
    """Type of RPC exposed on the url above"""
    @property
    def configs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ConfigOption]:
        """Additional configuration options for the endpoint"""

    def __init__(
        self,
        *,
        url: builtins.str = ...,
        rpc_type: global___RPCType.ValueType = ...,
        configs: collections.abc.Iterable[global___ConfigOption] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["configs", b"configs", "rpc_type", b"rpc_type", "url", b"url"]) -> None: ...

global___SupplierEndpoint = SupplierEndpoint

@typing.final
class ServiceRevenueShare(google.protobuf.message.Message):
    """ServiceRevenueShare message to hold revenue share configuration details"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ADDRESS_FIELD_NUMBER: builtins.int
    REV_SHARE_PERCENTAGE_FIELD_NUMBER: builtins.int
    address: builtins.str
    """The Bech32 address of the revenue share recipient"""
    rev_share_percentage: builtins.float
    """The percentage of revenue share the recipient will receive"""
    def __init__(
        self,
        *,
        address: builtins.str = ...,
        rev_share_percentage: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["address", b"address", "rev_share_percentage", b"rev_share_percentage"]) -> None: ...

global___ServiceRevenueShare = ServiceRevenueShare

@typing.final
class ConfigOption(google.protobuf.message.Message):
    """Key-value wrapper for config options, as proto maps can't be keyed by enums"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    key: global___ConfigOptions.ValueType
    """Config option key"""
    value: builtins.str
    """Config option value"""
    def __init__(
        self,
        *,
        key: global___ConfigOptions.ValueType = ...,
        value: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

global___ConfigOption = ConfigOption
