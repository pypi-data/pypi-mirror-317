"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import cosmos.base.v1beta1.coin_pb2
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import poktroll.proof.types_pb2
import poktroll.tokenomics.types_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ClaimExpirationReason:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ClaimExpirationReasonEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ClaimExpirationReason.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    EXPIRATION_REASON_UNSPECIFIED: _ClaimExpirationReason.ValueType  # 0
    """Default value, means may be valid"""
    PROOF_MISSING: _ClaimExpirationReason.ValueType  # 1
    PROOF_INVALID: _ClaimExpirationReason.ValueType  # 2

class ClaimExpirationReason(_ClaimExpirationReason, metaclass=_ClaimExpirationReasonEnumTypeWrapper): ...

EXPIRATION_REASON_UNSPECIFIED: ClaimExpirationReason.ValueType  # 0
"""Default value, means may be valid"""
PROOF_MISSING: ClaimExpirationReason.ValueType  # 1
PROOF_INVALID: ClaimExpirationReason.ValueType  # 2
global___ClaimExpirationReason = ClaimExpirationReason

@typing.final
class EventClaimExpired(google.protobuf.message.Message):
    """EventClaimExpired is an event emitted during settlement whenever a claim requiring
    an on-chain proof doesn't have one. The claim cannot be settled, leading to that work
    never being rewarded.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLAIM_FIELD_NUMBER: builtins.int
    EXPIRATION_REASON_FIELD_NUMBER: builtins.int
    NUM_RELAYS_FIELD_NUMBER: builtins.int
    NUM_CLAIMED_COMPUTE_UNITS_FIELD_NUMBER: builtins.int
    NUM_ESTIMATED_COMPUTE_UNITS_FIELD_NUMBER: builtins.int
    CLAIMED_UPOKT_FIELD_NUMBER: builtins.int
    expiration_reason: global___ClaimExpirationReason.ValueType
    """The reason why the claim expired, leading to a Supplier being penalized (i.e. burn)."""
    num_relays: builtins.int
    """Number of relays claimed to be in the session tree."""
    num_claimed_compute_units: builtins.int
    """Number of compute units claimed as a function of the number of relays
    and the compute units per relay for the particular service.
    """
    num_estimated_compute_units: builtins.int
    """Number of estimated compute units claimed as a function of the number of claimed
    compute units and the relay difficulty multiplier for the particular service.
    """
    @property
    def claim(self) -> poktroll.proof.types_pb2.Claim: ...
    @property
    def claimed_upokt(self) -> cosmos.base.v1beta1.coin_pb2.Coin:
        """The uPOKT coin claimed to be rewarded for the work done as a function of
        the number of estimated compute units and the compute uints to token multiplier.
        """

    def __init__(
        self,
        *,
        claim: poktroll.proof.types_pb2.Claim | None = ...,
        expiration_reason: global___ClaimExpirationReason.ValueType = ...,
        num_relays: builtins.int = ...,
        num_claimed_compute_units: builtins.int = ...,
        num_estimated_compute_units: builtins.int = ...,
        claimed_upokt: cosmos.base.v1beta1.coin_pb2.Coin | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["claim", b"claim", "claimed_upokt", b"claimed_upokt"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["claim", b"claim", "claimed_upokt", b"claimed_upokt", "expiration_reason", b"expiration_reason", "num_claimed_compute_units", b"num_claimed_compute_units", "num_estimated_compute_units", b"num_estimated_compute_units", "num_relays", b"num_relays"]) -> None: ...

global___EventClaimExpired = EventClaimExpired

@typing.final
class EventClaimSettled(google.protobuf.message.Message):
    """EventClaimSettled is an event emitted whenever a claim is settled.
    The proof_required determines whether the claim requires a proof that has been submitted or not
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLAIM_FIELD_NUMBER: builtins.int
    PROOF_REQUIREMENT_FIELD_NUMBER: builtins.int
    NUM_RELAYS_FIELD_NUMBER: builtins.int
    NUM_CLAIMED_COMPUTE_UNITS_FIELD_NUMBER: builtins.int
    NUM_ESTIMATED_COMPUTE_UNITS_FIELD_NUMBER: builtins.int
    CLAIMED_UPOKT_FIELD_NUMBER: builtins.int
    SETTLEMENT_RESULT_FIELD_NUMBER: builtins.int
    proof_requirement: poktroll.proof.types_pb2.ProofRequirementReason.ValueType
    """The reason why the claim was settled, leading to a Supplier being rewarded (i.e. mint)."""
    num_relays: builtins.int
    """Number of relays claimed to be in the session tree."""
    num_claimed_compute_units: builtins.int
    """Number of compute units claimed as a function of the number of relays
    and the compute units per relay for the particular service.
    """
    num_estimated_compute_units: builtins.int
    """Number of estimated compute units claimed as a function of the number of claimed
    compute units and the relay difficulty multiplier for the particular service.
    """
    @property
    def claim(self) -> poktroll.proof.types_pb2.Claim: ...
    @property
    def claimed_upokt(self) -> cosmos.base.v1beta1.coin_pb2.Coin:
        """The uPOKT coin claimed to be rewarded for the work done as a function of
        the number of estimated compute units and the compute uints to token multiplier.
        """

    @property
    def settlement_result(self) -> poktroll.tokenomics.types_pb2.ClaimSettlementResult:
        """SettlementResult holds mint, burn, and transfer operations on a per-claim basis."""

    def __init__(
        self,
        *,
        claim: poktroll.proof.types_pb2.Claim | None = ...,
        proof_requirement: poktroll.proof.types_pb2.ProofRequirementReason.ValueType = ...,
        num_relays: builtins.int = ...,
        num_claimed_compute_units: builtins.int = ...,
        num_estimated_compute_units: builtins.int = ...,
        claimed_upokt: cosmos.base.v1beta1.coin_pb2.Coin | None = ...,
        settlement_result: poktroll.tokenomics.types_pb2.ClaimSettlementResult | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["claim", b"claim", "claimed_upokt", b"claimed_upokt", "settlement_result", b"settlement_result"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["claim", b"claim", "claimed_upokt", b"claimed_upokt", "num_claimed_compute_units", b"num_claimed_compute_units", "num_estimated_compute_units", b"num_estimated_compute_units", "num_relays", b"num_relays", "proof_requirement", b"proof_requirement", "settlement_result", b"settlement_result"]) -> None: ...

global___EventClaimSettled = EventClaimSettled

@typing.final
class EventApplicationOverserviced(google.protobuf.message.Message):
    """EventApplicationOverserviced is emitted when an application has less stake than
    what a supplier is claiming (i.e. amount available for burning is insufficient).
    This means the following will ALWAYS be strictly true: effective_burn < expected_burn.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    APPLICATION_ADDR_FIELD_NUMBER: builtins.int
    SUPPLIER_OPERATOR_ADDR_FIELD_NUMBER: builtins.int
    EXPECTED_BURN_FIELD_NUMBER: builtins.int
    EFFECTIVE_BURN_FIELD_NUMBER: builtins.int
    application_addr: builtins.str
    supplier_operator_addr: builtins.str
    @property
    def expected_burn(self) -> cosmos.base.v1beta1.coin_pb2.Coin:
        """Expected burn is the amount the supplier is claiming for work done
        to service the application during the session.
        This is usually the amount in the Claim submitted.
        """

    @property
    def effective_burn(self) -> cosmos.base.v1beta1.coin_pb2.Coin:
        """Effective burn is the amount that is actually being paid to the supplier
        for the work done. It is less than the expected burn (claim amount) and
        is a function of the relay mining algorithm.
        E.g. The application's stake divided by the number of suppliers in a session.
        """

    def __init__(
        self,
        *,
        application_addr: builtins.str = ...,
        supplier_operator_addr: builtins.str = ...,
        expected_burn: cosmos.base.v1beta1.coin_pb2.Coin | None = ...,
        effective_burn: cosmos.base.v1beta1.coin_pb2.Coin | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["effective_burn", b"effective_burn", "expected_burn", b"expected_burn"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["application_addr", b"application_addr", "effective_burn", b"effective_burn", "expected_burn", b"expected_burn", "supplier_operator_addr", b"supplier_operator_addr"]) -> None: ...

global___EventApplicationOverserviced = EventApplicationOverserviced

@typing.final
class EventSupplierSlashed(google.protobuf.message.Message):
    """EventSupplierSlashed is emitted when a supplier is slashed for not providing,
    or provided invalid required proofs for claims.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLAIM_FIELD_NUMBER: builtins.int
    PROOF_MISSING_PENALTY_FIELD_NUMBER: builtins.int
    @property
    def claim(self) -> poktroll.proof.types_pb2.Claim: ...
    @property
    def proof_missing_penalty(self) -> cosmos.base.v1beta1.coin_pb2.Coin:
        """Amount slashed from the supplier's stake due to the expired claims.
        This is a function of the number of expired claims and proof missing penalty.
        """

    def __init__(
        self,
        *,
        claim: poktroll.proof.types_pb2.Claim | None = ...,
        proof_missing_penalty: cosmos.base.v1beta1.coin_pb2.Coin | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["claim", b"claim", "proof_missing_penalty", b"proof_missing_penalty"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["claim", b"claim", "proof_missing_penalty", b"proof_missing_penalty"]) -> None: ...

global___EventSupplierSlashed = EventSupplierSlashed

@typing.final
class EventApplicationReimbursementRequest(google.protobuf.message.Message):
    """EventApplicationReimbursementRequest is emitted when an application requests
    a reimbursement.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    APPLICATION_ADDR_FIELD_NUMBER: builtins.int
    SUPPLIER_OPERATOR_ADDR_FIELD_NUMBER: builtins.int
    SUPPLIER_OWNER_ADDR_FIELD_NUMBER: builtins.int
    SERVICE_ID_FIELD_NUMBER: builtins.int
    SESSION_ID_FIELD_NUMBER: builtins.int
    AMOUNT_FIELD_NUMBER: builtins.int
    application_addr: builtins.str
    supplier_operator_addr: builtins.str
    supplier_owner_addr: builtins.str
    service_id: builtins.str
    session_id: builtins.str
    @property
    def amount(self) -> cosmos.base.v1beta1.coin_pb2.Coin: ...
    def __init__(
        self,
        *,
        application_addr: builtins.str = ...,
        supplier_operator_addr: builtins.str = ...,
        supplier_owner_addr: builtins.str = ...,
        service_id: builtins.str = ...,
        session_id: builtins.str = ...,
        amount: cosmos.base.v1beta1.coin_pb2.Coin | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["amount", b"amount"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["amount", b"amount", "application_addr", b"application_addr", "service_id", b"service_id", "session_id", b"session_id", "supplier_operator_addr", b"supplier_operator_addr", "supplier_owner_addr", b"supplier_owner_addr"]) -> None: ...

global___EventApplicationReimbursementRequest = EventApplicationReimbursementRequest
