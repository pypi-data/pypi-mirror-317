"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Params(google.protobuf.message.Message):
    """Params defines the parameters for the tokenomics module."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MINT_ALLOCATION_PERCENTAGES_FIELD_NUMBER: builtins.int
    DAO_REWARD_ADDRESS_FIELD_NUMBER: builtins.int
    dao_reward_address: builtins.str
    """dao_reward_address is the address to which mint_allocation_dao percentage of the
    minted tokens are at the end of claim settlement.
    Bech32 cosmos address
    """
    @property
    def mint_allocation_percentages(self) -> global___MintAllocationPercentages:
        """mint_allocation_percentages represents the distribution of newly minted tokens,
        at the end of claim settlement, as a result of the Global Mint TLM.
        """

    def __init__(
        self,
        *,
        mint_allocation_percentages: global___MintAllocationPercentages | None = ...,
        dao_reward_address: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["mint_allocation_percentages", b"mint_allocation_percentages"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["dao_reward_address", b"dao_reward_address", "mint_allocation_percentages", b"mint_allocation_percentages"]) -> None: ...

global___Params = Params

@typing.final
class MintAllocationPercentages(google.protobuf.message.Message):
    """MintAllocationPercentages represents the distribution of newly minted tokens,
    at the end of claim settlement, as a result of the Global Mint TLM.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DAO_FIELD_NUMBER: builtins.int
    PROPOSER_FIELD_NUMBER: builtins.int
    SUPPLIER_FIELD_NUMBER: builtins.int
    SOURCE_OWNER_FIELD_NUMBER: builtins.int
    APPLICATION_FIELD_NUMBER: builtins.int
    dao: builtins.float
    """dao is the percentage of the minted tokens which are sent
    to the DAO reward address during claim settlement.
    """
    proposer: builtins.float
    """proposer is the percentage of the minted tokens which are sent
    to the block proposer account address during claim settlement.
    """
    supplier: builtins.float
    """supplier is the percentage of the minted tokens which are sent
    to the block supplier account address during claim settlement.
    """
    source_owner: builtins.float
    """source_owner is the percentage of the minted tokens which are sent
    to the service source owner account address during claim settlement.
    """
    application: builtins.float
    """allocation_application is the percentage of the minted tokens which are sent
    to the application account address during claim settlement.
    """
    def __init__(
        self,
        *,
        dao: builtins.float = ...,
        proposer: builtins.float = ...,
        supplier: builtins.float = ...,
        source_owner: builtins.float = ...,
        application: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["application", b"application", "dao", b"dao", "proposer", b"proposer", "source_owner", b"source_owner", "supplier", b"supplier"]) -> None: ...

global___MintAllocationPercentages = MintAllocationPercentages
