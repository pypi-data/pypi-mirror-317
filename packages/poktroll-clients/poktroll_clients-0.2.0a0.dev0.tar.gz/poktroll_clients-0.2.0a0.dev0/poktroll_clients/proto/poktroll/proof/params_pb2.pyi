"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import cosmos.base.v1beta1.coin_pb2
import google.protobuf.descriptor
import google.protobuf.message
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class Params(google.protobuf.message.Message):
    """Params defines the parameters for the module."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PROOF_REQUEST_PROBABILITY_FIELD_NUMBER: builtins.int
    PROOF_REQUIREMENT_THRESHOLD_FIELD_NUMBER: builtins.int
    PROOF_MISSING_PENALTY_FIELD_NUMBER: builtins.int
    PROOF_SUBMISSION_FEE_FIELD_NUMBER: builtins.int
    proof_request_probability: builtins.float
    """proof_request_probability is the probability of a session requiring a proof
    if it's cost (i.e. compute unit consumption) is below the ProofRequirementThreshold.
    """
    @property
    def proof_requirement_threshold(self) -> cosmos.base.v1beta1.coin_pb2.Coin:
        """proof_requirement_threshold is the session cost (i.e. compute unit consumption)
        threshold which asserts that a session MUST have a corresponding proof when its cost
        is equal to or above the threshold. This is in contrast to the this requirement
        being determined probabilistically via ProofRequestProbability.

        TODO_MAINNET: Consider renaming this to `proof_requirement_threshold_upokt`.
        """

    @property
    def proof_missing_penalty(self) -> cosmos.base.v1beta1.coin_pb2.Coin:
        """proof_missing_penalty is the number of tokens (uPOKT) which should be slashed from a supplier
        when a proof is required (either via proof_requirement_threshold or proof_missing_penalty)
        but is not provided.
        TODO_MAINNET: Consider renaming this to `proof_missing_penalty_upokt`.
        """

    @property
    def proof_submission_fee(self) -> cosmos.base.v1beta1.coin_pb2.Coin:
        """proof_submission_fee is the number of tokens (uPOKT) which should be paid by
        the supplier operator when submitting a proof.
        This is needed to account for the cost of storing proofs on-chain and prevent
        spamming (i.e. sybil bloat attacks) the network with non-required proofs.
        TODO_MAINNET: Consider renaming this to `proof_submission_fee_upokt`.
        """

    def __init__(
        self,
        *,
        proof_request_probability: builtins.float = ...,
        proof_requirement_threshold: cosmos.base.v1beta1.coin_pb2.Coin | None = ...,
        proof_missing_penalty: cosmos.base.v1beta1.coin_pb2.Coin | None = ...,
        proof_submission_fee: cosmos.base.v1beta1.coin_pb2.Coin | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["proof_missing_penalty", b"proof_missing_penalty", "proof_requirement_threshold", b"proof_requirement_threshold", "proof_submission_fee", b"proof_submission_fee"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["proof_missing_penalty", b"proof_missing_penalty", "proof_request_probability", b"proof_request_probability", "proof_requirement_threshold", b"proof_requirement_threshold", "proof_submission_fee", b"proof_submission_fee"]) -> None: ...

global___Params = Params
