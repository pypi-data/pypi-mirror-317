{"version":3,"file":"vWIhaet5.js","mappings":";;;AAmDA;;AAGA;;;ACyCA;AACA;;AAIA;;AA4CA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;AAIA;;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAEA;;;;;AArBA;;;;;AAwCA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-state-icon.ts","webpack://knx-frontend/./src/views/entities_view.ts"],"sourcesContent":["import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport { DEFAULT_DOMAIN_ICON, FIXED_DOMAIN_ICONS } from \"../common/const\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { entityIcon } from \"../data/icons\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public stateValue?: string;\n\n  @property() public icon?: string;\n\n  protected render() {\n    const overrideIcon =\n      this.icon ||\n      (this.stateObj && this.hass?.entities[this.stateObj.entity_id]?.icon) ||\n      this.stateObj?.attributes.icon;\n    if (overrideIcon) {\n      return html`<ha-icon .icon=${overrideIcon}></ha-icon>`;\n    }\n    if (!this.stateObj) {\n      return nothing;\n    }\n    if (!this.hass) {\n      return this._renderFallback();\n    }\n    const icon = entityIcon(this.hass, this.stateObj, this.stateValue).then(\n      (icn) => {\n        if (icn) {\n          return html`<ha-icon .icon=${icn}></ha-icon>`;\n        }\n        return this._renderFallback();\n      }\n    );\n    return html`${until(icon)}`;\n  }\n\n  private _renderFallback() {\n    const domain = computeStateDomain(this.stateObj!);\n\n    return html`\n      <ha-svg-icon\n        .path=${FIXED_DOMAIN_ICONS[domain] || DEFAULT_DOMAIN_ICON}\n      ></ha-svg-icon>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import { mdiDelete, mdiInformationSlabCircleOutline, mdiPlus, mdiPencilOutline } from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, html, css } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\n\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport memoize from \"memoize-one\";\n\nimport \"@ha/layouts/hass-loading-screen\";\nimport \"@ha/layouts/hass-tabs-subpage-data-table\";\nimport \"@ha/components/ha-fab\";\nimport \"@ha/components/ha-icon-button\";\nimport \"@ha/components/ha-state-icon\";\nimport \"@ha/components/ha-svg-icon\";\nimport { navigate } from \"@ha/common/navigate\";\nimport { mainWindow } from \"@ha/common/dom/get_main_window\";\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\nimport type { DataTableColumnContainer } from \"@ha/components/data-table/ha-data-table\";\nimport type { AreaRegistryEntry } from \"@ha/data/area_registry\";\nimport type { ExtEntityRegistryEntry } from \"@ha/data/entity_registry\";\nimport { showAlertDialog, showConfirmationDialog } from \"@ha/dialogs/generic/show-dialog-box\";\nimport type { PageNavigation } from \"@ha/layouts/hass-tabs-subpage\";\nimport type { HomeAssistant, Route } from \"@ha/types\";\n\nimport { getEntityEntries, deleteEntity } from \"../services/websocket.service\";\nimport type { KNX } from \"../types/knx\";\nimport { KNXLogger } from \"../tools/knx-logger\";\n\nconst logger = new KNXLogger(\"knx-entities-view\");\n\nexport interface EntityRow extends ExtEntityRegistryEntry {\n  entityState?: HassEntity;\n  area?: AreaRegistryEntry;\n}\n\n@customElement(\"knx-entities-view\")\nexport class KNXEntitiesView extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public knx!: KNX;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Object }) public route?: Route;\n\n  @property({ type: Array, reflect: false }) public tabs!: PageNavigation[];\n\n  @state() private knx_entities: EntityRow[] = [];\n\n  @state() private filterDevice: string | null = null;\n\n  protected firstUpdated() {\n    this._fetchEntities();\n  }\n\n  protected willUpdate() {\n    const urlParams = new URLSearchParams(mainWindow.location.search);\n    this.filterDevice = urlParams.get(\"device_id\");\n  }\n\n  private async _fetchEntities() {\n    getEntityEntries(this.hass)\n      .then((entries) => {\n        logger.debug(`Fetched ${entries.length} entity entries.`);\n        this.knx_entities = entries.map((entry) => {\n          const entityState = this.hass.states[entry.entity_id];\n          const device = entry.device_id ? this.hass.devices[entry.device_id] : undefined;\n          const areaId = entry.area_id ?? device?.area_id;\n          const area = areaId ? this.hass.areas[areaId] : undefined;\n          return {\n            ...entry,\n            entityState,\n            area,\n          };\n        });\n      })\n      .catch((err) => {\n        logger.error(\"getEntityEntries\", err);\n        navigate(\"/knx/error\", { replace: true, data: err });\n      });\n  }\n\n  private _columns = memoize((_language): DataTableColumnContainer<EntityRow> => {\n    const iconWidth = \"56px\";\n    const actionWidth = \"176px\"; // 48px*3 + 16px*2 padding\n\n    return {\n      icon: {\n        title: \"\",\n        minWidth: iconWidth,\n        maxWidth: iconWidth,\n        type: \"icon\",\n        template: (entry) => html`\n          <ha-state-icon\n            slot=\"item-icon\"\n            .hass=${this.hass}\n            .stateObj=${entry.entityState}\n          ></ha-state-icon>\n        `,\n      },\n      friendly_name: {\n        showNarrow: true,\n        filterable: true,\n        sortable: true,\n        title: \"Friendly Name\",\n        flex: 2,\n        template: (entry) => entry.entityState?.attributes.friendly_name ?? \"\",\n      },\n      entity_id: {\n        filterable: true,\n        sortable: true,\n        title: \"Entity ID\",\n        flex: 1,\n        // template: (entry) => entry.entity_id,\n      },\n      device: {\n        filterable: true,\n        sortable: true,\n        title: \"Device\",\n        flex: 1,\n        template: (entry) =>\n          entry.device_id ? (this.hass.devices[entry.device_id].name ?? \"\") : \"\",\n      },\n      device_id: {\n        hidden: true, // for filtering only\n        title: \"Device ID\",\n        filterable: true,\n        template: (entry) => entry.device_id ?? \"\",\n      },\n      area: {\n        title: \"Area\",\n        sortable: true,\n        filterable: true,\n        flex: 1,\n        template: (entry) => entry.area?.name ?? \"\",\n      },\n      actions: {\n        showNarrow: true,\n        title: \"\",\n        minWidth: actionWidth,\n        maxWidth: actionWidth,\n        type: \"icon-button\",\n        template: (entry) => html`\n          <ha-icon-button\n            .label=${\"More info\"}\n            .path=${mdiInformationSlabCircleOutline}\n            .entityEntry=${entry}\n            @click=${this._entityMoreInfo}\n          ></ha-icon-button>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.common.edit\")}\n            .path=${mdiPencilOutline}\n            .entityEntry=${entry}\n            @click=${this._entityEdit}\n          ></ha-icon-button>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.common.delete\")}\n            .path=${mdiDelete}\n            .entityEntry=${entry}\n            @click=${this._entityDelete}\n          ></ha-icon-button>\n        `,\n      },\n    };\n  });\n\n  private _entityEdit = (ev: Event) => {\n    ev.stopPropagation();\n    const entry = ev.target.entityEntry as EntityRow;\n    navigate(\"/knx/entities/edit/\" + entry.entity_id);\n  };\n\n  private _entityMoreInfo = (ev: Event) => {\n    ev.stopPropagation();\n    const entry = ev.target.entityEntry as EntityRow;\n    fireEvent(mainWindow.document.querySelector(\"home-assistant\")!, \"hass-more-info\", {\n      entityId: entry.entity_id,\n    });\n  };\n\n  private _entityDelete = (ev: Event) => {\n    ev.stopPropagation();\n    const entry = ev.target.entityEntry as EntityRow;\n    showConfirmationDialog(this, {\n      text: `${this.hass.localize(\"ui.common.delete\")} ${entry.entity_id}?`,\n    }).then((confirmed) => {\n      if (confirmed) {\n        deleteEntity(this.hass, entry.entity_id)\n          .then(() => {\n            logger.debug(\"entity deleted\", entry.entity_id);\n            this._fetchEntities();\n          })\n          .catch((err: any) => {\n            showAlertDialog(this, {\n              title: \"Deletion failed\",\n              text: err,\n            });\n          });\n      }\n    });\n  };\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.knx_entities) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route!}\n        .tabs=${this.tabs}\n        .localizeFunc=${this.knx.localize}\n        .columns=${this._columns(this.hass.language)}\n        .data=${this.knx_entities}\n        .hasFab=${true}\n        .searchLabel=${this.hass.localize(\"ui.components.data-table.search\")}\n        .clickable=${false}\n        .filter=${this.filterDevice}\n      >\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.common.add\")}\n          extended\n          @click=${this._entityCreate}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage-data-table>\n    `;\n  }\n\n  private _entityCreate() {\n    navigate(\"/knx/entities/create\");\n  }\n\n  static get styles() {\n    return css`\n      hass-loading-screen {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-entities-view\": KNXEntitiesView;\n  }\n}\n"],"names":[],"sourceRoot":""}