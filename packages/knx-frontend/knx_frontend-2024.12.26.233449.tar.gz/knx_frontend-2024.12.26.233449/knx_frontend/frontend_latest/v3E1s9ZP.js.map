{"version":3,"file":"v3E1s9ZP.js","mappings":";;AAoGA;;AAGA;AACA;AACA;AAEA;;AAEA;;;AAIA;AACA;AAGA;;AAGA;;AAsKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAGA;AC3NA;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;;;;;;;AA+DA;ACtJA;;AAEA;AACA;AACA;AACA;AACA;;AAlBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAeA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/entity/ha-statistic-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/entity/ha-statistics-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-statistic.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { html, LitElement, nothing } from \"lit\";\nimport type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport type { StatisticsMetaData } from \"../../data/recorder\";\nimport { getStatisticIds, getStatisticLabel } from \"../../data/recorder\";\nimport type { ValueChangedEvent, HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\nimport type { ScorableTextItem } from \"../../common/string/filter/sequence-matching\";\nimport { fuzzyFilterSort } from \"../../common/string/filter/sequence-matching\";\n\ninterface StatisticItem extends ScorableTextItem {\n  id: string;\n  name: string;\n  state?: HassEntity;\n}\n\n@customElement(\"ha-statistic-picker\")\nexport class HaStatisticPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  @property({ type: Array }) public statisticIds?: StatisticsMetaData[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  /**\n   * Show only statistics natively stored with these units of measurements.\n   * @type {Array}\n   * @attr include-statistics-unit-of-measurement\n   */\n  @property({\n    type: Array,\n    attribute: \"include-statistics-unit-of-measurement\",\n  })\n  public includeStatisticsUnitOfMeasurement?: string | string[];\n\n  /**\n   * Show only statistics with these unit classes.\n   * @attr include-unit-class\n   */\n  @property({ attribute: \"include-unit-class\" })\n  public includeUnitClass?: string | string[];\n\n  /**\n   * Show only statistics with these device classes.\n   * @attr include-device-class\n   */\n  @property({ attribute: \"include-device-class\" })\n  public includeDeviceClass?: string | string[];\n\n  /**\n   * Show only statistics on entities.\n   * @type {Boolean}\n   * @attr entities-only\n   */\n  @property({ type: Boolean, attribute: \"entities-only\" })\n  public entitiesOnly = false;\n\n  /**\n   * List of statistics to be excluded.\n   * @type {Array}\n   * @attr exclude-statistics\n   */\n  @property({ type: Array, attribute: \"exclude-statistics\" })\n  public excludeStatistics?: string[];\n\n  @property() public helpMissingEntityUrl = \"/more-info/statistics/\";\n\n  @state() private _opened?: boolean;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  private _init = false;\n\n  private _statistics: StatisticItem[] = [];\n\n  @state() private _filteredItems?: StatisticItem[] = undefined;\n\n  private _rowRenderer: ComboBoxLitRenderer<StatisticItem> = (item) =>\n    html`<mwc-list-item graphic=\"avatar\" twoline>\n      ${item.state\n        ? html`<state-badge\n            slot=\"graphic\"\n            .stateObj=${item.state}\n            .hass=${this.hass}\n          ></state-badge>`\n        : \"\"}\n      <span>${item.name}</span>\n      <span slot=\"secondary\"\n        >${item.id === \"\" || item.id === \"__missing\"\n          ? html`<a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(this.hass, this.helpMissingEntityUrl)}\n              >${this.hass.localize(\n                \"ui.components.statistic-picker.learn_more\"\n              )}</a\n            >`\n          : item.id}</span\n      >\n    </mwc-list-item>`;\n\n  private _getStatistics = memoizeOne(\n    (\n      statisticIds: StatisticsMetaData[],\n      includeStatisticsUnitOfMeasurement?: string | string[],\n      includeUnitClass?: string | string[],\n      includeDeviceClass?: string | string[],\n      entitiesOnly?: boolean,\n      excludeStatistics?: string[],\n      value?: string\n    ): StatisticItem[] => {\n      if (!statisticIds.length) {\n        return [\n          {\n            id: \"\",\n            name: this.hass.localize(\n              \"ui.components.statistic-picker.no_statistics\"\n            ),\n            strings: [],\n          },\n        ];\n      }\n\n      if (includeStatisticsUnitOfMeasurement) {\n        const includeUnits: (string | null)[] = ensureArray(\n          includeStatisticsUnitOfMeasurement\n        );\n        statisticIds = statisticIds.filter((meta) =>\n          includeUnits.includes(meta.statistics_unit_of_measurement)\n        );\n      }\n      if (includeUnitClass) {\n        const includeUnitClasses: (string | null)[] =\n          ensureArray(includeUnitClass);\n        statisticIds = statisticIds.filter((meta) =>\n          includeUnitClasses.includes(meta.unit_class)\n        );\n      }\n      if (includeDeviceClass) {\n        const includeDeviceClasses: (string | null)[] =\n          ensureArray(includeDeviceClass);\n        statisticIds = statisticIds.filter((meta) => {\n          const stateObj = this.hass.states[meta.statistic_id];\n          if (!stateObj) {\n            return true;\n          }\n          return includeDeviceClasses.includes(\n            stateObj.attributes.device_class || \"\"\n          );\n        });\n      }\n\n      const output: StatisticItem[] = [];\n      statisticIds.forEach((meta) => {\n        if (\n          excludeStatistics &&\n          meta.statistic_id !== value &&\n          excludeStatistics.includes(meta.statistic_id)\n        ) {\n          return;\n        }\n        const entityState = this.hass.states[meta.statistic_id];\n        if (!entityState) {\n          if (!entitiesOnly) {\n            const id = meta.statistic_id;\n            const name = getStatisticLabel(this.hass, meta.statistic_id, meta);\n            output.push({\n              id,\n              name,\n              strings: [id, name],\n            });\n          }\n          return;\n        }\n        const id = meta.statistic_id;\n        const name = getStatisticLabel(this.hass, meta.statistic_id, meta);\n        output.push({\n          id,\n          name,\n          state: entityState,\n          strings: [id, name],\n        });\n      });\n\n      if (!output.length) {\n        return [\n          {\n            id: \"\",\n            name: this.hass.localize(\"ui.components.statistic-picker.no_match\"),\n            strings: [],\n          },\n        ];\n      }\n\n      if (output.length > 1) {\n        output.sort((a, b) =>\n          stringCompare(a.name || \"\", b.name || \"\", this.hass.locale.language)\n        );\n      }\n\n      output.push({\n        id: \"__missing\",\n        name: this.hass.localize(\n          \"ui.components.statistic-picker.missing_entity\"\n        ),\n        strings: [],\n      });\n\n      return output;\n    }\n  );\n\n  public open() {\n    this.comboBox?.open();\n  }\n\n  public focus() {\n    this.comboBox?.focus();\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (\n      (!this.hasUpdated && !this.statisticIds) ||\n      changedProps.has(\"statisticTypes\")\n    ) {\n      this._getStatisticIds();\n    }\n    if (\n      (!this._init && this.statisticIds) ||\n      (changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      if (this.hasUpdated) {\n        this._statistics = this._getStatistics(\n          this.statisticIds!,\n          this.includeStatisticsUnitOfMeasurement,\n          this.includeUnitClass,\n          this.includeDeviceClass,\n          this.entitiesOnly,\n          this.excludeStatistics,\n          this.value\n        );\n      } else {\n        this.updateComplete.then(() => {\n          this._statistics = this._getStatistics(\n            this.statisticIds!,\n            this.includeStatisticsUnitOfMeasurement,\n            this.includeUnitClass,\n            this.includeDeviceClass,\n            this.entitiesOnly,\n            this.excludeStatistics,\n            this.value\n          );\n        });\n      }\n    }\n  }\n\n  protected render(): TemplateResult | typeof nothing {\n    if (this._statistics.length === 0) {\n      return nothing;\n    }\n\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.statistic-picker.statistic\")\n          : this.label}\n        .value=${this._value}\n        .renderer=${this._rowRenderer}\n        .disabled=${this.disabled}\n        .allowCustomValue=${this.allowCustomEntity}\n        .items=${this._statistics}\n        .filteredItems=${this._filteredItems ?? this._statistics}\n        item-value-path=\"id\"\n        item-id-path=\"id\"\n        item-label-path=\"name\"\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._statisticChanged}\n        @filter-changed=${this._filterChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private async _getStatisticIds() {\n    this.statisticIds = await getStatisticIds(this.hass, this.statisticTypes);\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _statisticChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    let newValue = ev.detail.value;\n    if (newValue === \"__missing\") {\n      newValue = \"\";\n    }\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _openedChanged(ev: ValueChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const filterString = ev.detail.value.toLowerCase();\n    this._filteredItems = filterString.length\n      ? fuzzyFilterSort<StatisticItem>(filterString, this._statistics)\n      : undefined;\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistic-picker\": HaStatisticPicker;\n  }\n}\n","import type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { ValueChangedEvent, HomeAssistant } from \"../../types\";\nimport \"./ha-statistic-picker\";\n\n@customElement(\"ha-statistics-picker\")\nclass HaStatisticsPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ type: Array }) public statisticIds?: string[];\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ attribute: \"picked-statistic-label\" })\n  public pickedStatisticLabel?: string;\n\n  @property({ attribute: \"pick-statistic-label\" })\n  public pickStatisticLabel?: string;\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  /**\n   * Show only statistics natively stored with these units of measurements.\n   * @attr include-statistics-unit-of-measurement\n   */\n  @property({\n    attribute: \"include-statistics-unit-of-measurement\",\n  })\n  public includeStatisticsUnitOfMeasurement?: string[] | string;\n\n  /**\n   * Show only statistics with these unit classes.\n   * @attr include-unit-class\n   */\n  @property({ attribute: \"include-unit-class\" })\n  public includeUnitClass?: string | string[];\n\n  /**\n   * Show only statistics with these device classes.\n   * @attr include-device-class\n   */\n  @property({ attribute: \"include-device-class\" })\n  public includeDeviceClass?: string | string[];\n\n  /**\n   * Ignore filtering of statistics type and units when only a single statistic is selected.\n   * @type {boolean}\n   * @attr ignore-restrictions-on-first-statistic\n   */\n  @property({\n    type: Boolean,\n    attribute: \"ignore-restrictions-on-first-statistic\",\n  })\n  public ignoreRestrictionsOnFirstStatistic = false;\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const ignoreRestriction =\n      this.ignoreRestrictionsOnFirstStatistic &&\n      this._currentStatistics.length <= 1;\n\n    const includeStatisticsUnitCurrent = ignoreRestriction\n      ? undefined\n      : this.includeStatisticsUnitOfMeasurement;\n    const includeUnitClassCurrent = ignoreRestriction\n      ? undefined\n      : this.includeUnitClass;\n    const includeDeviceClassCurrent = ignoreRestriction\n      ? undefined\n      : this.includeDeviceClass;\n    const includeStatisticTypesCurrent = ignoreRestriction\n      ? undefined\n      : this.statisticTypes;\n\n    return html`\n      ${repeat(\n        this._currentStatistics,\n        (statisticId) => statisticId,\n        (statisticId) => html`\n          <div>\n            <ha-statistic-picker\n              .curValue=${statisticId}\n              .hass=${this.hass}\n              .includeStatisticsUnitOfMeasurement=${includeStatisticsUnitCurrent}\n              .includeUnitClass=${includeUnitClassCurrent}\n              .includeDeviceClass=${includeDeviceClassCurrent}\n              .value=${statisticId}\n              .statisticTypes=${includeStatisticTypesCurrent}\n              .statisticIds=${this.statisticIds}\n              .label=${this.pickedStatisticLabel}\n              .excludeStatistics=${this.value}\n              .allowCustomEntity=${this.allowCustomEntity}\n              @value-changed=${this._statisticChanged}\n            ></ha-statistic-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-statistic-picker\n          .hass=${this.hass}\n          .includeStatisticsUnitOfMeasurement=${this\n            .includeStatisticsUnitOfMeasurement}\n          .includeUnitClass=${this.includeUnitClass}\n          .includeDeviceClass=${this.includeDeviceClass}\n          .statisticTypes=${this.statisticTypes}\n          .statisticIds=${this.statisticIds}\n          .label=${this.pickStatisticLabel}\n          .excludeStatistics=${this.value}\n          .allowCustomEntity=${this.allowCustomEntity}\n          @value-changed=${this._addStatistic}\n        ></ha-statistic-picker>\n      </div>\n    `;\n  }\n\n  private get _currentStatistics() {\n    return this.value || [];\n  }\n\n  private async _updateStatistics(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _statisticChanged(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const oldValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === oldValue) {\n      return;\n    }\n    const currentStatistics = this._currentStatistics;\n    if (!newValue || currentStatistics.includes(newValue)) {\n      this._updateStatistics(\n        currentStatistics.filter((ent) => ent !== oldValue)\n      );\n      return;\n    }\n    this._updateStatistics(\n      currentStatistics.map((ent) => (ent === oldValue ? newValue : ent))\n    );\n  }\n\n  private async _addStatistic(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentStatistics;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateStatistics([...currentEntities, toAdd]);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        width: 200px;\n        display: block;\n      }\n      ha-statistic-picker {\n        display: block;\n        width: 100%;\n        margin-top: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistics-picker\": HaStatisticsPicker;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { StatisticSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../entity/ha-statistics-picker\";\n\n@customElement(\"ha-selector-statistic\")\nexport class HaStatisticSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: StatisticSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    if (!this.selector.statistic.multiple) {\n      return html`<ha-statistic-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        allow-custom-entity\n      ></ha-statistic-picker>`;\n    }\n\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : \"\"}\n      <ha-statistics-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-statistics-picker>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-statistic\": HaStatisticSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}