{"version":3,"file":"yJJr4PFi.js","mappings":";;;AAkEA;AACA;;;;;AAQA;AACA;AAGA;AACA;AACA;;;AAGA;;;;;;;AAQA;;AAGA;;AAEA;AACA;AACA;;;;;;;;;AAtCA;;;;;;;;;;;;;;AAwHA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/dialogs/tts-try/dialog-tts-try.ts"],"sourcesContent":["import { mdiPlayCircleOutline } from \"@mdi/js\";\nimport type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { storage } from \"../../common/decorators/storage\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-button\";\nimport { createCloseHeading } from \"../../components/ha-dialog\";\nimport \"../../components/ha-textarea\";\nimport type { HaTextArea } from \"../../components/ha-textarea\";\nimport { convertTextToSpeech } from \"../../data/tts\";\nimport type { HomeAssistant } from \"../../types\";\nimport { showAlertDialog } from \"../generic/show-dialog-box\";\nimport type { TTSTryDialogParams } from \"./show-dialog-tts-try\";\nimport \"../../components/ha-circular-progress\";\n\n@customElement(\"dialog-tts-try\")\nexport class TTSTryDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loadingExample = false;\n\n  @state() private _params?: TTSTryDialogParams;\n\n  @state() private _valid = false;\n\n  @query(\"#message\") private _messageInput?: HaTextArea;\n\n  @storage({\n    key: \"ttsTryMessages\",\n    state: false,\n    subscribe: false,\n  })\n  private _messages?: Record<string, string>;\n\n  public showDialog(params: TTSTryDialogParams) {\n    this._params = params;\n    this._valid = Boolean(this._defaultMessage);\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private get _defaultMessage() {\n    const language = this._params!.language?.substring(0, 2);\n    const userLanguage = this.hass.locale.language.substring(0, 2);\n    // Load previous message in the right language\n    if (language && this._messages?.[language]) {\n      return this._messages[language];\n    }\n    // Only display example message if it's interface language\n    if (language === userLanguage) {\n      return this.hass.localize(\"ui.dialogs.tts-try.message_example\");\n    }\n    return \"\";\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.dialogs.tts-try.header\")\n        )}\n      >\n        <ha-textarea\n          autogrow\n          id=\"message\"\n          .label=${this.hass.localize(\"ui.dialogs.tts-try.message\")}\n          .placeholder=${this.hass.localize(\n            \"ui.dialogs.tts-try.message_placeholder\"\n          )}\n          .value=${this._defaultMessage}\n          @input=${this._inputChanged}\n          ?dialogInitialFocus=${!this._defaultMessage}\n        >\n        </ha-textarea>\n        ${this._loadingExample\n          ? html`\n              <ha-circular-progress\n                size=\"small\"\n                indeterminate\n                slot=\"primaryAction\"\n                class=\"loading\"\n              ></ha-circular-progress>\n            `\n          : html`\n              <ha-button\n                ?dialogInitialFocus=${Boolean(this._defaultMessage)}\n                slot=\"primaryAction\"\n                .label=${this.hass.localize(\"ui.dialogs.tts-try.play\")}\n                @click=${this._playExample}\n                .disabled=${!this._valid}\n              >\n                <ha-svg-icon\n                  slot=\"icon\"\n                  .path=${mdiPlayCircleOutline}\n                ></ha-svg-icon>\n              </ha-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private async _inputChanged() {\n    this._valid = Boolean(this._messageInput?.value);\n  }\n\n  private async _playExample() {\n    const message = this._messageInput?.value;\n    if (!message) {\n      return;\n    }\n\n    const platform = this._params!.engine;\n    const language = this._params!.language;\n    const voice = this._params!.voice;\n\n    if (language) {\n      this._messages = {\n        ...this._messages,\n        [language.substring(0, 2)]: message,\n      };\n    }\n\n    this._loadingExample = true;\n\n    const audio = new Audio();\n    audio.play();\n\n    let url;\n    try {\n      const result = await convertTextToSpeech(this.hass, {\n        platform,\n        message,\n        language,\n        options: { voice },\n      });\n      url = result.path;\n    } catch (err: any) {\n      this._loadingExample = false;\n      showAlertDialog(this, {\n        text: `Unable to load example. ${err.error || err.body || err}`,\n        warning: true,\n      });\n      return;\n    }\n    audio.src = url;\n    audio.addEventListener(\"canplaythrough\", () => audio.play());\n    audio.addEventListener(\"playing\", () => {\n      this._loadingExample = false;\n    });\n    audio.addEventListener(\"error\", () => {\n      showAlertDialog(this, { title: \"Error playing audio.\" });\n      this._loadingExample = false;\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-dialog {\n        --mdc-dialog-max-width: 500px;\n      }\n      ha-textarea,\n      ha-select {\n        width: 100%;\n      }\n      ha-select {\n        margin-top: 8px;\n      }\n      .loading {\n        height: 36px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-tts-try\": TTSTryDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}