{"version":3,"file":"PIx8Ks3i.js","mappings":";;AA+BA;;AAEA;AACA;AACA;;AAGA;;;;;;;;;;AAcA;ACXA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-trigger.ts","webpack://knx-frontend/mwc-check-list-item-base.ts"],"sourcesContent":["import type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport type { Trigger } from \"../../data/automation\";\nimport { migrateAutomationTrigger } from \"../../data/automation\";\nimport type { TriggerSelector } from \"../../data/selector\";\nimport \"../../panels/config/automation/trigger/ha-automation-trigger\";\nimport type { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-selector-trigger\")\nexport class HaTriggerSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: TriggerSelector;\n\n  @property({ attribute: false }) public value?: Trigger;\n\n  @property() public label?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  private _triggers = memoizeOne((trigger: Trigger | undefined) => {\n    if (!trigger) {\n      return [];\n    }\n    return migrateAutomationTrigger(trigger);\n  });\n\n  protected render() {\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : nothing}\n      <ha-automation-trigger\n        .disabled=${this.disabled}\n        .triggers=${this._triggers(this.value)}\n        .hass=${this.hass}\n      ></ha-automation-trigger>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-automation-trigger {\n        display: block;\n        margin-bottom: 16px;\n      }\n      label {\n        display: block;\n        margin-bottom: 4px;\n        font-weight: 500;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-trigger\": HaTriggerSelector;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-checkbox/mwc-checkbox.js';\n\nimport {Checkbox} from '@material/mwc-checkbox/mwc-checkbox.js';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base.js';\n\nexport class CheckListItemBase extends ListItemBase {\n  @query('slot') protected override slotElement!: HTMLSlotElement|null;\n  @query('mwc-checkbox') protected checkboxElement!: Checkbox;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true})\n  override graphic: GraphicType = 'control';\n\n  override render() {\n    const checkboxClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <span class=${classMap(checkboxClasses)}>\n        <mwc-checkbox\n            reducedTouchTarget\n            tabindex=${this.tabindex}\n            .checked=${this.selected}\n            ?disabled=${this.disabled}\n            @change=${this.onChange}>\n        </mwc-checkbox>\n      </span>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Checkbox;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}