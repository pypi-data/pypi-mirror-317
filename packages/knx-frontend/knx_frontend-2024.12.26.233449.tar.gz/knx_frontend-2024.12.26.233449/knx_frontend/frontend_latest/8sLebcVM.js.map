{"version":3,"file":"8sLebcVM.js","mappings":";;AA4DA;;;AAIA;;AASA;AAEA;AAGA;;;AAIA;AACA;;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAkBA;;AAEA;;AAEA;;;AAGA;AACA;AAEA;;AAEA;AAOA;;AAEA;;AAEA;;;AAGA;AACA;AAEA;;AA/CA;;AAGA;;AAEA;AACA;;;AAIA;;AAKA;;;;;AAwCA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;;;ACxPA;AACA;;;;AAKA;AACA;;;;;AA1BA;;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA;;;AC5HA;;AASA;;;;;AAKA;AACA;;;;AAIA;;;;;AAKA;AACA;;;;AAIA;;AAgBA;AACA;AACA;AACA;AACA;;AApBA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAcA;;;;;;;;;;;;;;;;;AA2CA;;;AC/CA;AACA;AACA;AACA;;;AAIA;AACA;;;;AAIA;;;;;;AAMA;;;;;;AAOA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-file-upload.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-picture-upload.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-image.ts","webpack://knx-frontend/mwc-linear-progress-base.ts"],"sourcesContent":["import \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport { mdiDelete, mdiFileUpload } from \"@mdi/js\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-button\";\nimport \"./ha-icon-button\";\nimport { blankBeforePercent } from \"../common/translations/blank_before_percent\";\nimport { ensureArray } from \"../common/array/ensure-array\";\nimport { bytesToString } from \"../util/bytes-to-string\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"file-picked\": { files: File[] };\n  }\n}\n\n@customElement(\"ha-file-upload\")\nexport class HaFileUpload extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public accept!: string;\n\n  @property() public icon?: string;\n\n  @property() public label?: string;\n\n  @property() public secondary?: string;\n\n  @property() public supports?: string;\n\n  @property({ type: Object }) public value?: File | File[] | FileList | string;\n\n  @property({ type: Boolean }) public multiple = false;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public uploading = false;\n\n  @property({ type: Number }) public progress?: number;\n\n  @property({ type: Boolean, attribute: \"auto-open-file-dialog\" })\n  public autoOpenFileDialog = false;\n\n  @state() private _drag = false;\n\n  @query(\"#input\") private _input?: HTMLInputElement;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    if (this.autoOpenFileDialog) {\n      this._openFilePicker();\n    }\n  }\n\n  public render(): TemplateResult {\n    return html`\n      ${this.uploading\n        ? html`<div class=\"container\">\n            <div class=\"row\">\n              <span class=\"header\"\n                >${this.value\n                  ? this.hass?.localize(\n                      \"ui.components.file-upload.uploading_name\",\n                      { name: this.value.toString() }\n                    )\n                  : this.hass?.localize(\n                      \"ui.components.file-upload.uploading\"\n                    )}</span\n              >\n              ${this.progress\n                ? html`<span class=\"progress\"\n                    >${this.progress}${blankBeforePercent(\n                      this.hass!.locale\n                    )}%</span\n                  >`\n                : \"\"}\n            </div>\n            <mwc-linear-progress\n              .indeterminate=${!this.progress}\n              .progress=${this.progress ? this.progress / 100 : undefined}\n            ></mwc-linear-progress>\n          </div>`\n        : html`<label\n            for=${this.value ? \"\" : \"input\"}\n            class=\"container ${classMap({\n              dragged: this._drag,\n              multiple: this.multiple,\n              value: Boolean(this.value),\n            })}\"\n            @drop=${this._handleDrop}\n            @dragenter=${this._handleDragStart}\n            @dragover=${this._handleDragStart}\n            @dragleave=${this._handleDragEnd}\n            @dragend=${this._handleDragEnd}\n            >${!this.value\n              ? html`<ha-svg-icon\n                    class=\"big-icon\"\n                    .path=${this.icon || mdiFileUpload}\n                  ></ha-svg-icon>\n                  <ha-button unelevated @click=${this._openFilePicker}>\n                    ${this.label ||\n                    this.hass?.localize(\"ui.components.file-upload.label\")}\n                  </ha-button>\n                  <span class=\"secondary\"\n                    >${this.secondary ||\n                    this.hass?.localize(\n                      \"ui.components.file-upload.secondary\"\n                    )}</span\n                  >\n                  <span class=\"supports\">${this.supports}</span>`\n              : typeof this.value === \"string\"\n                ? html`<div class=\"row\">\n                    <div class=\"value\" @click=${this._openFilePicker}>\n                      <ha-svg-icon\n                        .path=${this.icon || mdiFileUpload}\n                      ></ha-svg-icon>\n                      ${this.value}\n                    </div>\n                    <ha-icon-button\n                      @click=${this._clearValue}\n                      .label=${this.hass?.localize(\"ui.common.delete\") ||\n                      \"Delete\"}\n                      .path=${mdiDelete}\n                    ></ha-icon-button>\n                  </div>`\n                : (this.value instanceof FileList\n                    ? Array.from(this.value)\n                    : ensureArray(this.value)\n                  ).map(\n                    (file) =>\n                      html`<div class=\"row\">\n                        <div class=\"value\" @click=${this._openFilePicker}>\n                          <ha-svg-icon\n                            .path=${this.icon || mdiFileUpload}\n                          ></ha-svg-icon>\n                          ${file.name} - ${bytesToString(file.size)}\n                        </div>\n                        <ha-icon-button\n                          @click=${this._clearValue}\n                          .label=${this.hass?.localize(\"ui.common.delete\") ||\n                          \"Delete\"}\n                          .path=${mdiDelete}\n                        ></ha-icon-button>\n                      </div>`\n                  )}\n            <input\n              id=\"input\"\n              type=\"file\"\n              class=\"file\"\n              .accept=${this.accept}\n              .multiple=${this.multiple}\n              @change=${this._handleFilePicked}\n          /></label>`}\n    `;\n  }\n\n  private _openFilePicker() {\n    this._input?.click();\n  }\n\n  private _handleDrop(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (ev.dataTransfer?.files) {\n      fireEvent(this, \"file-picked\", {\n        files:\n          this.multiple || ev.dataTransfer.files.length === 1\n            ? Array.from(ev.dataTransfer.files)\n            : [ev.dataTransfer.files[0]],\n      });\n    }\n    this._drag = false;\n  }\n\n  private _handleDragStart(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = true;\n  }\n\n  private _handleDragEnd(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = false;\n  }\n\n  private _handleFilePicked(ev) {\n    if (ev.target.files.length === 0) {\n      return;\n    }\n    this.value = ev.target.files;\n    fireEvent(this, \"file-picked\", { files: ev.target.files });\n  }\n\n  private _clearValue(ev: Event) {\n    ev.preventDefault();\n    this._input!.value = \"\";\n    this.value = undefined;\n    fireEvent(this, \"change\");\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n        height: 240px;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n        color: var(--disabled-text-color);\n      }\n      .container {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        border: solid 1px\n          var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42));\n        border-radius: var(--mdc-shape-small, 4px);\n        height: 100%;\n      }\n      label.container {\n        border: dashed 1px\n          var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42));\n        cursor: pointer;\n      }\n      :host([disabled]) .container {\n        border-color: var(--disabled-color);\n      }\n      label.dragged {\n        border-color: var(--primary-color);\n      }\n      .dragged:before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        background-color: var(--primary-color);\n        content: \"\";\n        opacity: var(--dark-divider-opacity);\n        pointer-events: none;\n        border-radius: var(--mdc-shape-small, 4px);\n      }\n      label.value {\n        cursor: default;\n      }\n      label.value.multiple {\n        justify-content: unset;\n        overflow: auto;\n      }\n      .highlight {\n        color: var(--primary-color);\n      }\n      .row {\n        display: flex;\n        width: 100%;\n        align-items: center;\n        justify-content: space-between;\n        padding: 0 16px;\n        box-sizing: border-box;\n      }\n      ha-button {\n        margin-bottom: 4px;\n      }\n      .supports {\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n      :host([disabled]) .secondary {\n        color: var(--disabled-text-color);\n      }\n      input.file {\n        display: none;\n      }\n      .value {\n        cursor: pointer;\n      }\n      .value ha-svg-icon {\n        margin-right: 8px;\n        margin-inline-end: 8px;\n        margin-inline-start: initial;\n      }\n      .big-icon {\n        --mdc-icon-size: 48px;\n        margin-bottom: 8px;\n      }\n      ha-button {\n        --mdc-button-outline-color: var(--primary-color);\n        --mdc-icon-button-size: 24px;\n      }\n      mwc-linear-progress {\n        width: 100%;\n        padding: 16px;\n        box-sizing: border-box;\n      }\n      .header {\n        font-weight: 500;\n      }\n      .progress {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-file-upload\": HaFileUpload;\n  }\n}\n","import { mdiImagePlus } from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { haStyle } from \"../resources/styles\";\nimport { createImage, generateImageThumbnailUrl } from \"../data/image_upload\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport type { CropOptions } from \"../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { showImageCropperDialog } from \"../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-button\";\nimport \"./ha-circular-progress\";\nimport \"./ha-file-upload\";\n\n@customElement(\"ha-picture-upload\")\nexport class HaPictureUpload extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() public value: string | null = null;\n\n  @property() public label?: string;\n\n  @property() public secondary?: string;\n\n  @property() public supports?: string;\n\n  @property() public currentImageAltText?: string;\n\n  @property({ type: Boolean }) public crop = false;\n\n  @property({ attribute: false }) public cropOptions?: CropOptions;\n\n  @property({ type: Boolean }) public original = false;\n\n  @property({ type: Number }) public size = 512;\n\n  @state() private _uploading = false;\n\n  public render(): TemplateResult {\n    if (!this.value) {\n      return html`\n        <ha-file-upload\n          .hass=${this.hass}\n          .icon=${mdiImagePlus}\n          .label=${this.label ||\n          this.hass.localize(\"ui.components.picture-upload.label\")}\n          .secondary=${this.secondary}\n          .supports=${this.supports ||\n          this.hass.localize(\"ui.components.picture-upload.supported_formats\")}\n          .uploading=${this._uploading}\n          @file-picked=${this._handleFilePicked}\n          @change=${this._handleFileCleared}\n          accept=\"image/png, image/jpeg, image/gif\"\n        ></ha-file-upload>\n      `;\n    }\n    return html`<div class=\"center-vertical\">\n      <div class=\"value\">\n        <img\n          .src=${this.value}\n          alt=${this.currentImageAltText ||\n          this.hass.localize(\"ui.components.picture-upload.current_image_alt\")}\n        />\n        <div>\n          <ha-button\n            @click=${this._handleChangeClick}\n            .label=${this.hass.localize(\n              \"ui.components.picture-upload.change_picture\"\n            )}\n          >\n          </ha-button>\n        </div>\n      </div>\n    </div>`;\n  }\n\n  private _handleChangeClick() {\n    this.value = null;\n    fireEvent(this, \"change\");\n  }\n\n  private async _handleFilePicked(ev) {\n    const file = ev.detail.files[0];\n    if (this.crop) {\n      this._cropFile(file);\n    } else {\n      this._uploadFile(file);\n    }\n  }\n\n  private async _handleFileCleared() {\n    this.value = null;\n  }\n\n  private async _cropFile(file: File) {\n    if (![\"image/png\", \"image/jpeg\", \"image/gif\"].includes(file.type)) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.components.picture-upload.unsupported_format\"\n        ),\n      });\n      return;\n    }\n    showImageCropperDialog(this, {\n      file,\n      options: this.cropOptions || {\n        round: false,\n        aspectRatio: NaN,\n      },\n      croppedCallback: (croppedFile) => {\n        this._uploadFile(croppedFile);\n      },\n    });\n  }\n\n  private async _uploadFile(file: File) {\n    if (![\"image/png\", \"image/jpeg\", \"image/gif\"].includes(file.type)) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.components.picture-upload.unsupported_format\"\n        ),\n      });\n      return;\n    }\n    this._uploading = true;\n    try {\n      const media = await createImage(this.hass, file);\n      this.value = generateImageThumbnailUrl(\n        media.id,\n        this.size,\n        this.original\n      );\n      fireEvent(this, \"change\");\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: err.toString(),\n      });\n    } finally {\n      this._uploading = false;\n    }\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          height: 240px;\n        }\n        ha-file-upload {\n          height: 100%;\n        }\n        .center-vertical {\n          display: flex;\n          align-items: center;\n          height: 100%;\n        }\n        .value {\n          width: 100%;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n        img {\n          max-width: 100%;\n          max-height: 200px;\n          margin-bottom: 4px;\n          border-radius: var(--file-upload-image-border-radius);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-picture-upload\": HaPictureUpload;\n  }\n}\n","import type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { ImageSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-button\";\nimport \"../ha-textarea\";\nimport \"../ha-textfield\";\nimport \"../ha-picture-upload\";\nimport \"../ha-radio\";\nimport \"../ha-formfield\";\nimport type { HaPictureUpload } from \"../ha-picture-upload\";\nimport { URL_PREFIX } from \"../../data/image_upload\";\n\n@customElement(\"ha-selector-image\")\nexport class HaImageSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public value?: any;\n\n  @property() public name?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public helper?: string;\n\n  @property({ attribute: false }) public selector!: ImageSelector;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private showUpload = false;\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (!this.value || this.value.startsWith(URL_PREFIX)) {\n      this.showUpload = true;\n    }\n  }\n\n  protected render() {\n    return html`\n      <div>\n        <label>\n          ${this.hass.localize(\n            \"ui.components.selectors.image.select_image_with_label\",\n            {\n              label:\n                this.label ||\n                this.hass.localize(\"ui.components.selectors.image.image\"),\n            }\n          )}\n          <ha-formfield\n            .label=${this.hass.localize(\"ui.components.selectors.image.upload\")}\n          >\n            <ha-radio\n              name=\"mode\"\n              value=\"upload\"\n              .checked=${this.showUpload}\n              @change=${this._radioGroupPicked}\n            ></ha-radio>\n          </ha-formfield>\n          <ha-formfield\n            .label=${this.hass.localize(\"ui.components.selectors.image.url\")}\n          >\n            <ha-radio\n              name=\"mode\"\n              value=\"url\"\n              .checked=${!this.showUpload}\n              @change=${this._radioGroupPicked}\n            ></ha-radio>\n          </ha-formfield>\n        </label>\n        ${!this.showUpload\n          ? html`\n              <ha-textfield\n                .name=${this.name}\n                .value=${this.value || \"\"}\n                .placeholder=${this.placeholder || \"\"}\n                .helper=${this.helper}\n                helperPersistent\n                .disabled=${this.disabled}\n                @input=${this._handleChange}\n                .label=${this.label || \"\"}\n                .required=${this.required}\n              ></ha-textfield>\n            `\n          : html`\n              <ha-picture-upload\n                .hass=${this.hass}\n                .value=${this.value?.startsWith(URL_PREFIX) ? this.value : null}\n                .original=${this.selector.image?.original}\n                .cropOptions=${this.selector.image?.crop}\n                @change=${this._pictureChanged}\n              ></ha-picture-upload>\n            `}\n      </div>\n    `;\n  }\n\n  private _radioGroupPicked(ev): void {\n    this.showUpload = ev.target.value === \"upload\";\n  }\n\n  private _pictureChanged(ev) {\n    const value = (ev.target as HaPictureUpload).value;\n\n    fireEvent(this, \"value-changed\", { value: value ?? undefined });\n  }\n\n  private _handleChange(ev) {\n    let value = ev.target.value;\n    if (this.value === value) {\n      return;\n    }\n    if (value === \"\" && !this.required) {\n      value = undefined;\n    }\n\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        position: relative;\n      }\n      div {\n        display: flex;\n        flex-direction: column;\n      }\n      label {\n        display: flex;\n        flex-direction: column;\n      }\n      ha-textarea,\n      ha-textfield {\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-image\": HaImageSelector;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport {MDCResizeObserver, WithMDCResizeObserver} from '@material/linear-progress/types.js';\nimport {ariaProperty} from '@material/mwc-base/aria-property.js';\nimport {html, LitElement, PropertyValues, TemplateResult} from 'lit';\nimport {property, query, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\n/** @soyCompatible */\nexport class LinearProgressBase extends LitElement {\n  @query('.mdc-linear-progress') protected rootEl!: HTMLElement;\n\n  @property({type: Boolean, reflect: true}) indeterminate = false;\n\n  @property({type: Number}) progress = 0;\n\n  @property({type: Number}) buffer = 1;\n\n  @property({type: Boolean, reflect: true}) reverse = false;\n\n  @property({type: Boolean, reflect: true}) closed = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({attribute: 'aria-label'})\n  override ariaLabel!: string;\n\n  @state() protected stylePrimaryHalf = '';\n  @state() protected stylePrimaryFull = '';\n  @state() protected styleSecondaryQuarter = '';\n  @state() protected styleSecondaryHalf = '';\n  @state() protected styleSecondaryFull = '';\n  @state() protected animationReady = true;\n  @state() protected closedAnimationOff = false;\n  protected resizeObserver: MDCResizeObserver|null = null;\n\n  override connectedCallback() {\n    super.connectedCallback();\n    // if detached and reattached\n    if (this.rootEl) {\n      this.attachResizeObserver();\n    }\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected override render(): TemplateResult {\n    /** @classMap */\n    const classes = {\n      'mdc-linear-progress--closed': this.closed,\n      'mdc-linear-progress--closed-animation-off': this.closedAnimationOff,\n      'mdc-linear-progress--indeterminate': this.indeterminate,\n      // needed for controller-less render\n      'mdc-linear-progress--animation-ready': this.animationReady\n    };\n\n    /** @styleMap */\n    const rootStyles = {\n      '--mdc-linear-progress-primary-half': this.stylePrimaryHalf,\n      '--mdc-linear-progress-primary-half-neg':\n          this.stylePrimaryHalf !== '' ? `-${this.stylePrimaryHalf}` : '',\n      '--mdc-linear-progress-primary-full': this.stylePrimaryFull,\n      '--mdc-linear-progress-primary-full-neg':\n          this.stylePrimaryFull !== '' ? `-${this.stylePrimaryFull}` : '',\n      '--mdc-linear-progress-secondary-quarter': this.styleSecondaryQuarter,\n      '--mdc-linear-progress-secondary-quarter-neg':\n          this.styleSecondaryQuarter !== '' ? `-${this.styleSecondaryQuarter}` :\n                                              '',\n      '--mdc-linear-progress-secondary-half': this.styleSecondaryHalf,\n      '--mdc-linear-progress-secondary-half-neg':\n          this.styleSecondaryHalf !== '' ? `-${this.styleSecondaryHalf}` : '',\n      '--mdc-linear-progress-secondary-full': this.styleSecondaryFull,\n      '--mdc-linear-progress-secondary-full-neg':\n          this.styleSecondaryFull !== '' ? `-${this.styleSecondaryFull}` : '',\n    };\n\n    /** @styleMap */\n    const bufferBarStyles = {\n      'flex-basis': this.indeterminate ? '100%' : `${this.buffer * 100}%`,\n    };\n\n    /** @styleMap */\n    const primaryBarStyles = {\n      transform: this.indeterminate ? 'scaleX(1)' : `scaleX(${this.progress})`,\n    };\n\n    return html`\n      <div\n          role=\"progressbar\"\n          class=\"mdc-linear-progress ${classMap(classes)}\"\n          style=\"${styleMap(rootStyles)}\"\n          dir=\"${ifDefined(this.reverse ? 'rtl' : undefined)}\"\n          aria-label=\"${ifDefined(this.ariaLabel)}\"\n          aria-valuemin=\"0\"\n          aria-valuemax=\"1\"\n          aria-valuenow=\"${\n        ifDefined(this.indeterminate ? undefined : this.progress)}\"\n        @transitionend=\"${this.syncClosedState}\">\n        <div class=\"mdc-linear-progress__buffer\">\n          <div\n            class=\"mdc-linear-progress__buffer-bar\"\n            style=${styleMap(bufferBarStyles)}>\n          </div>\n          <div class=\"mdc-linear-progress__buffer-dots\"></div>\n        </div>\n        <div\n            class=\"mdc-linear-progress__bar mdc-linear-progress__primary-bar\"\n            style=${styleMap(primaryBarStyles)}>\n          <span class=\"mdc-linear-progress__bar-inner\"></span>\n        </div>\n        <div class=\"mdc-linear-progress__bar mdc-linear-progress__secondary-bar\">\n          <span class=\"mdc-linear-progress__bar-inner\"></span>\n        </div>\n      </div>`;\n  }\n\n  override update(changedProperties: PropertyValues<this>) {\n    // - When showing the indicator, enable animations immediately.\n    // - On first render, disable the animation immediately.\n    // - For normal calls to hide the component, let transitionend event trigger\n    //   disabling of animations instead (see render method), so that animation\n    //   does not jump in the middle of fade out.\n    if (changedProperties.has('closed') &&\n        (!this.closed || changedProperties.get('closed') === undefined)) {\n      this.syncClosedState();\n    }\n    super.update(changedProperties);\n  }\n\n  override async firstUpdated(changed: PropertyValues<this>) {\n    super.firstUpdated(changed);\n\n    this.attachResizeObserver();\n  }\n\n  protected syncClosedState() {\n    this.closedAnimationOff = this.closed;\n  }\n\n  protected override updated(changed: PropertyValues<this>) {\n    // restart animation for timing if reverse changed and is indeterminate.\n    // don't restart here if indeterminate has changed as well because we don't\n    // want to incur an extra style recalculation\n    if (!changed.has('indeterminate') && changed.has('reverse') &&\n        this.indeterminate) {\n      this.restartAnimation();\n    }\n\n    // Recaclulate the animation css custom props and restart the calculation\n    // if this is not the first render cycle, otherwise, resize observer init\n    // will already handle this and prevent unnecessary rerender + style recalc\n    // but resize observer will not update animation vals while determinate\n    if (changed.has('indeterminate') &&\n        changed.get('indeterminate') !== undefined && this.indeterminate &&\n        (window as unknown as WithMDCResizeObserver).ResizeObserver) {\n      this.calculateAndSetAnimationDimensions(this.rootEl.offsetWidth);\n    }\n    super.updated(changed);\n  }\n\n  override disconnectedCallback() {\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n    super.disconnectedCallback();\n  }\n\n  protected attachResizeObserver() {\n    if ((window as unknown as WithMDCResizeObserver).ResizeObserver) {\n      this.resizeObserver =\n          new (window as unknown as WithMDCResizeObserver)\n              .ResizeObserver((entries) => {\n                if (!this.indeterminate) {\n                  return;\n                }\n\n                for (const entry of entries) {\n                  if (entry.contentRect) {\n                    const width = entry.contentRect.width;\n                    this.calculateAndSetAnimationDimensions(width);\n                  }\n                }\n              });\n      this.resizeObserver.observe(this.rootEl);\n      return;\n    }\n\n    this.resizeObserver = null;\n  }\n\n  protected calculateAndSetAnimationDimensions(width: number) {\n    const primaryHalf = width * 0.8367142;\n    const primaryFull = width * 2.00611057;\n    const secondaryQuarter = width * 0.37651913;\n    const secondaryHalf = width * 0.84386165;\n    const secondaryFull = width * 1.60277782;\n\n    this.stylePrimaryHalf = `${primaryHalf}px`;\n    this.stylePrimaryFull = `${primaryFull}px`;\n    this.styleSecondaryQuarter = `${secondaryQuarter}px`;\n    this.styleSecondaryHalf = `${secondaryHalf}px`;\n    this.styleSecondaryFull = `${secondaryFull}px`;\n\n    // need to restart animation for custom props to apply to keyframes\n    this.restartAnimation();\n  }\n\n  protected async restartAnimation() {\n    this.animationReady = false;\n    await this.updateComplete;\n    await new Promise(requestAnimationFrame);\n    this.animationReady = true;\n    await this.updateComplete;\n  }\n\n  open() {\n    this.closed = false;\n  }\n\n  close() {\n    this.closed = true;\n  }\n}\n"],"names":[],"sourceRoot":""}