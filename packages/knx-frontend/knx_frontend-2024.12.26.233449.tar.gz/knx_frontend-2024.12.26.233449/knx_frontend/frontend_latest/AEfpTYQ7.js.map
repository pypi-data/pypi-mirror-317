{"version":3,"file":"AEfpTYQ7.js","mappings":";;;;;;;AAkDA;AACA;AACA;;;AAGA;AACA;;;AAGA;;;AAIA;;;;;AA0BA;;AChEA;AACA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-area-filter.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-area-filter.ts"],"sourcesContent":["import { mdiTextureBox } from \"@mdi/js\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { showAreaFilterDialog } from \"../dialogs/area-filter/show-area-filter-dialog\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-next\";\nimport \"./ha-svg-icon\";\nimport \"./ha-textfield\";\n\nexport type AreaFilterValue = {\n  hidden?: string[];\n  order?: string[];\n};\n\n@customElement(\"ha-area-filter\")\nexport class HaAreaPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public value?: AreaFilterValue;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  protected render(): TemplateResult {\n    const allAreasCount = Object.keys(this.hass.areas).length;\n    const hiddenAreasCount = this.value?.hidden?.length ?? 0;\n\n    const description =\n      hiddenAreasCount === 0\n        ? this.hass.localize(\"ui.components.area-filter.all_areas\")\n        : allAreasCount === hiddenAreasCount\n          ? this.hass.localize(\"ui.components.area-filter.no_areas\")\n          : this.hass.localize(\"ui.components.area-filter.area_count\", {\n              count: allAreasCount - hiddenAreasCount,\n            });\n\n    return html`\n      <ha-list-item\n        tabindex=\"0\"\n        role=\"button\"\n        hasMeta\n        twoline\n        graphic=\"icon\"\n        @click=${this._edit}\n        @keydown=${this._edit}\n        .disabled=${this.disabled}\n      >\n        <ha-svg-icon slot=\"graphic\" .path=${mdiTextureBox}></ha-svg-icon>\n        <span>${this.label}</span>\n        <span slot=\"secondary\">${description}</span>\n        <ha-icon-next\n          slot=\"meta\"\n          .label=${this.hass.localize(\"ui.common.edit\")}\n        ></ha-icon-next>\n      </ha-list-item>\n    `;\n  }\n\n  private async _edit(ev) {\n    if (ev.defaultPrevented) {\n      return;\n    }\n    if (ev.type === \"keydown\" && ev.key !== \"Enter\" && ev.key !== \" \") {\n      return;\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n    const value = await showAreaFilterDialog(this, {\n      title: this.label,\n      initialValue: this.value,\n    });\n    if (!value) return;\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-list-item {\n        --mdc-list-side-padding-left: 8px;\n        --mdc-list-side-padding-right: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-area-filter\": HaAreaPicker;\n  }\n}\n","import { LitElement, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { AreaFilterSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-area-filter\";\n\n@customElement(\"ha-selector-area_filter\")\nexport class HaAreaFilterSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: AreaFilterSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-area-filter\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-area-filter>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-area_filter\": HaAreaFilterSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}