{"version":3,"file":"b8XzMDsy.js","mappings":";AAqDA;AACA;AAEA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/dialogs/config-flow/previews/flow-preview-generic.ts"],"sourcesContent":["import type { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport type { FlowType } from \"../../../data/data_entry_flow\";\nimport type { GenericPreview } from \"../../../data/preview\";\nimport { subscribePreviewGeneric } from \"../../../data/preview\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"./entity-preview-row\";\nimport { debounce } from \"../../../common/util/debounce\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-alert\";\n\n@customElement(\"flow-preview-generic\")\nclass FlowPreviewGeneric extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public flowType!: FlowType;\n\n  public handler!: string;\n\n  @property() public domain!: string;\n\n  @property() public stepId!: string;\n\n  @property() public flowId!: string;\n\n  @property() public stepData!: Record<string, any>;\n\n  @state() private _preview?: HassEntity;\n\n  @state() private _error?: string;\n\n  private _unsub?: Promise<UnsubscribeFunc>;\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    if (this._unsub) {\n      this._unsub.then((unsub) => unsub());\n      this._unsub = undefined;\n    }\n  }\n\n  willUpdate(changedProps) {\n    if (changedProps.has(\"stepData\")) {\n      this._debouncedSubscribePreview();\n    }\n  }\n\n  protected render() {\n    if (this._error) {\n      return html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`;\n    }\n    return html`<entity-preview-row\n      .hass=${this.hass}\n      .stateObj=${this._preview}\n    ></entity-preview-row>`;\n  }\n\n  private _setPreview = (preview: GenericPreview) => {\n    const now = new Date().toISOString();\n    this._preview = {\n      entity_id: `${this.stepId}.___flow_preview___`,\n      last_changed: now,\n      last_updated: now,\n      context: { id: \"\", parent_id: null, user_id: null },\n      ...preview,\n    };\n  };\n\n  private _debouncedSubscribePreview = debounce(() => {\n    this._subscribePreview();\n  }, 250);\n\n  private async _subscribePreview() {\n    if (this._unsub) {\n      (await this._unsub)();\n      this._unsub = undefined;\n    }\n    if (this.flowType === \"repair_flow\") {\n      return;\n    }\n    try {\n      this._unsub = subscribePreviewGeneric(\n        this.hass,\n        this.domain,\n        this.flowId,\n        this.flowType,\n        this.stepData,\n        this._setPreview\n      );\n      fireEvent(this, \"set-flow-errors\", { errors: {} });\n    } catch (err: any) {\n      if (typeof err.message === \"string\") {\n        this._error = err.message;\n      } else {\n        this._error = undefined;\n        fireEvent(this, \"set-flow-errors\", err.message);\n      }\n      this._unsub = undefined;\n      this._preview = undefined;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"flow-preview-generic\": FlowPreviewGeneric;\n  }\n}\n"],"names":[],"sourceRoot":""}