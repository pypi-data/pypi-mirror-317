{"version":3,"file":"93hHYV33.js","mappings":";;AA6CA;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;;AAIA;AAEA;AACA;;AAMA;AAGA;AACA;;;AAKA;;;;AAkBA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;;;AAMA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-assist-pipeline-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-assist-pipeline.ts"],"sourcesContent":["import type { CSSResultGroup, PropertyValueMap } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { formatLanguageCode } from \"../common/language/format_language\";\nimport type { AssistPipeline } from \"../data/assist_pipeline\";\nimport { listAssistPipelines } from \"../data/assist_pipeline\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\n\nconst PREFERRED = \"preferred\";\nconst LAST_USED = \"last_used\";\n\n@customElement(\"ha-assist-pipeline-picker\")\nexport class HaAssistPipelinePicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean }) public includeLastUsed = false;\n\n  @state() _pipelines?: AssistPipeline[];\n\n  @state() _preferredPipeline: string | null = null;\n\n  private get _default() {\n    return this.includeLastUsed ? LAST_USED : PREFERRED;\n  }\n\n  protected render() {\n    if (!this._pipelines) {\n      return nothing;\n    }\n    const value = this.value ?? this._default;\n    return html`\n      <ha-select\n        .label=${this.label ||\n        this.hass!.localize(\"ui.components.pipeline-picker.pipeline\")}\n        .value=${value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${this.includeLastUsed\n          ? html`\n              <ha-list-item .value=${LAST_USED}>\n                ${this.hass!.localize(\n                  \"ui.components.pipeline-picker.last_used\"\n                )}\n              </ha-list-item>\n            `\n          : null}\n        <ha-list-item .value=${PREFERRED}>\n          ${this.hass!.localize(\"ui.components.pipeline-picker.preferred\", {\n            preferred: this._pipelines.find(\n              (pipeline) => pipeline.id === this._preferredPipeline\n            )?.name,\n          })}\n        </ha-list-item>\n        ${this._pipelines.map(\n          (pipeline) =>\n            html`<ha-list-item .value=${pipeline.id}>\n              ${pipeline.name}\n              (${formatLanguageCode(pipeline.language, this.hass.locale)})\n            </ha-list-item>`\n        )}\n      </ha-select>\n    `;\n  }\n\n  protected firstUpdated(\n    changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>\n  ): void {\n    super.firstUpdated(changedProperties);\n    listAssistPipelines(this.hass).then((pipelines) => {\n      this._pipelines = pipelines.pipelines;\n      this._preferredPipeline = pipelines.preferred_pipeline;\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-select {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    const target = ev.target as HaSelect;\n    if (\n      !this.hass ||\n      target.value === \"\" ||\n      target.value === this.value ||\n      (this.value === undefined && target.value === this._default)\n    ) {\n      return;\n    }\n    this.value = target.value === this._default ? undefined : target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-assist-pipeline-picker\": HaAssistPipelinePicker;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { AssistPipelineSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-assist-pipeline-picker\";\n\n@customElement(\"ha-selector-assist_pipeline\")\nexport class HaAssistPipelineSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: AssistPipelineSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`\n      <ha-assist-pipeline-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .includeLastUsed=${Boolean(\n          this.selector.assist_pipeline?.include_last_used\n        )}\n      ></ha-assist-pipeline-picker>\n    `;\n  }\n\n  static styles = css`\n    ha-conversation-agent-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-assist_pipeline\": HaAssistPipelineSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}