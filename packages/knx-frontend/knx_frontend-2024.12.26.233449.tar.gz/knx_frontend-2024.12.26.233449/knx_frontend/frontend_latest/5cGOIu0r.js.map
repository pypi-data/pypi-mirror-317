{"version":3,"file":"5cGOIu0r.js","mappings":";;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DA;;;;ACxEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC4CA;;AAoBA;;AAEA;;;AAGA;;AAGA;;;;;;;;;;;;;AC5DA;;;;ACSA;ACEA;AACA;;;AAGA;AACA;;;;AAKA;;;;;;;;AAoCA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;;;;;;;;;;;;;;;;;;;;;ACLA;;;;;;;;;;;;;;;;;;;;;;;;;ACKA;;ACGA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;AAUA;;;AAIA;;;AAGA;;AAIA;;;;;;;;;;;;;;;;;;;;AAoCA;;ACuHA;AACA;AACA;;AAEA;;AAEA;AAGA;;AAOA;AACA;AACA;;AAIA;AACA;AAIA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;;AAOA;;;;AAIA;;;AAGA;;AAMA;;AAMA;;AAEA;;AAEA;;AAKA;AACA;;AAvSA;AA4SA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;AACA;AACA;;;;AAMA;;;;;AAOA;;;;AAIA;;;;AAIA;AACA;;;AAGA;;;;AAIA;AACA;;;AAGA;;;;;AAOA;AACA;;;AAGA;;;;AAMA;AAEA;AAGA;;;;;AAMA;AAEA;;;AAMA;;AAIA;;;;AAIA;;;AAGA;AAEA;AACA;AACA;AAGA;;;;;AAMA;AAEA;AAEA;AACA;;;AAIA;;;AAIA;;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAcA;AAGA;AAjBA;;;;AAKA;;;;;;;;;AAkBA;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;;AAIA;AACA;AACA;AACA;;AAEA;;;;AAIA;AACA;;;;AArfA;;AA2fA;;;AAGA;AACA;;;;AA/fA;;AAqgBA;;;;AAIA;;AAIA;AACA;;AAEA;AACA;;AAEA;;;AAIA;;AAIA;AAEA;;AAEA;;AAIA;;AAGA;;;;;AAKA;AACA;AACA;;;AAKA;;AAEA;;AAGA;AACA;AACA;AAGA;;;;;;AAOA;AACA;;;AAKA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwTA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-dialog-header.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-md-divider.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/chips/ha-assist-chip.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/chips/ha-filter-chip.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-menu.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-md-button-menu.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-md-menu-item.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-outlined-field.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-outlined-text-field.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/search-input-outlined.ts","webpack://knx-frontend/./homeassistant-frontend/src/layouts/hass-tabs-subpage-data-table.ts"],"sourcesContent":["import { css, html, LitElement } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-dialog-header\")\nexport class HaDialogHeader extends LitElement {\n  protected render() {\n    return html`\n      <header class=\"header\">\n        <div class=\"header-bar\">\n          <section class=\"header-navigation-icon\">\n            <slot name=\"navigationIcon\"></slot>\n          </section>\n          <section class=\"header-content\">\n            <div class=\"header-title\">\n              <slot name=\"title\"></slot>\n            </div>\n            <div class=\"header-subtitle\">\n              <slot name=\"subtitle\"></slot>\n            </div>\n          </section>\n          <section class=\"header-action-items\">\n            <slot name=\"actionItems\"></slot>\n          </section>\n        </div>\n        <slot></slot>\n      </header>\n    `;\n  }\n\n  static get styles() {\n    return [\n      css`\n        :host {\n          display: block;\n        }\n        :host([show-border]) {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n        }\n        .header-bar {\n          display: flex;\n          flex-direction: row;\n          align-items: flex-start;\n          padding: 4px;\n          box-sizing: border-box;\n        }\n        .header-content {\n          flex: 1;\n          padding: 10px 4px;\n          min-width: 0;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          white-space: nowrap;\n        }\n        .header-title {\n          font-size: 22px;\n          line-height: 28px;\n          font-weight: 400;\n        }\n        .header-subtitle {\n          font-size: 14px;\n          line-height: 20px;\n          color: var(--secondary-text-color);\n        }\n        @media all and (min-width: 450px) and (min-height: 500px) {\n          .header-bar {\n            padding: 12px;\n          }\n        }\n        .header-navigation-icon {\n          flex: none;\n          min-width: 8px;\n          height: 100%;\n          display: flex;\n          flex-direction: row;\n        }\n        .header-action-items {\n          flex: none;\n          min-width: 8px;\n          height: 100%;\n          display: flex;\n          flex-direction: row;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-header\": HaDialogHeader;\n  }\n}\n","import { MdDivider } from \"@material/web/divider/divider\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-md-divider\")\nexport class HaMdDivider extends MdDivider {\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-divider-color: var(--divider-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-md-divider\": HaMdDivider;\n  }\n}\n","import { MdAssistChip } from \"@material/web/chips/assist-chip\";\nimport { css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-assist-chip\")\n// @ts-ignore\nexport class HaAssistChip extends MdAssistChip {\n  @property({ type: Boolean, reflect: true }) filled = false;\n\n  @property({ type: Boolean }) active = false;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-primary: var(--primary-text-color);\n        --md-sys-color-on-surface: var(--primary-text-color);\n        --md-assist-chip-container-shape: var(\n          --ha-assist-chip-container-shape,\n          16px\n        );\n        --md-assist-chip-outline-color: var(--outline-color);\n        --md-assist-chip-label-text-weight: 400;\n      }\n      /** Material 3 doesn't have a filled chip, so we have to make our own **/\n      .filled {\n        display: flex;\n        pointer-events: none;\n        border-radius: inherit;\n        inset: 0;\n        position: absolute;\n        background-color: var(--ha-assist-chip-filled-container-color);\n      }\n      /** Set the size of mdc icons **/\n      ::slotted([slot=\"icon\"]),\n      ::slotted([slot=\"trailingIcon\"]) {\n        display: flex;\n        --mdc-icon-size: var(--md-input-chip-icon-size, 18px);\n      }\n\n      .trailing.icon ::slotted(*),\n      .trailing.icon svg {\n        margin-inline-end: unset;\n        margin-inline-start: var(--_icon-label-space);\n      }\n      ::before {\n        background: var(--ha-assist-chip-container-color, transparent);\n        opacity: var(--ha-assist-chip-container-opacity, 1);\n      }\n      :where(.active)::before {\n        background: var(--ha-assist-chip-active-container-color);\n        opacity: var(--ha-assist-chip-active-container-opacity);\n      }\n      .label {\n        font-family: Roboto, sans-serif;\n      }\n    `,\n  ];\n\n  protected override renderOutline() {\n    if (this.filled) {\n      return html`<span class=\"filled\"></span>`;\n    }\n\n    return super.renderOutline();\n  }\n\n  protected override getContainerClasses() {\n    return {\n      ...super.getContainerClasses(),\n      active: this.active,\n    };\n  }\n\n  protected override renderPrimaryContent() {\n    return html`\n      <span class=\"leading icon\" aria-hidden=\"true\">\n        ${this.renderLeadingIcon()}\n      </span>\n      <span class=\"label\">${this.label}</span>\n      <span class=\"touch\"></span>\n      <span class=\"trailing leading icon\" aria-hidden=\"true\">\n        ${this.renderTrailingIcon()}\n      </span>\n    `;\n  }\n\n  protected renderTrailingIcon() {\n    return html`<slot name=\"trailing-icon\"></slot>`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-assist-chip\": HaAssistChip;\n  }\n}\n","import { MdFilterChip } from \"@material/web/chips/filter-chip\";\nimport { css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-filter-chip\")\nexport class HaFilterChip extends MdFilterChip {\n  @property({ type: Boolean, reflect: true, attribute: \"no-leading-icon\" })\n  noLeadingIcon = false;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-primary: var(--primary-text-color);\n        --md-sys-color-on-surface: var(--primary-text-color);\n        --md-sys-color-on-surface-variant: var(--primary-text-color);\n        --md-sys-color-on-secondary-container: var(--primary-text-color);\n        --md-filter-chip-container-shape: 16px;\n        --md-filter-chip-outline-color: var(--outline-color);\n        --md-filter-chip-selected-container-color: rgba(\n          var(--rgb-primary-text-color),\n          0.15\n        );\n      }\n    `,\n  ];\n\n  protected renderLeadingIcon() {\n    if (this.noLeadingIcon) {\n      // eslint-disable-next-line lit/prefer-nothing\n      return html``;\n    }\n    return super.renderLeadingIcon();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-filter-chip\": HaFilterChip;\n  }\n}\n","import { MdMenu } from \"@material/web/menu/menu\";\nimport type { CloseMenuEvent } from \"@material/web/menu/menu\";\nimport {\n  CloseReason,\n  KeydownCloseKey,\n} from \"@material/web/menu/internal/controllers/shared\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport type { HaMdMenuItem } from \"./ha-md-menu-item\";\n\n@customElement(\"ha-menu\")\nexport class HaMenu extends MdMenu {\n  connectedCallback(): void {\n    super.connectedCallback();\n    this.addEventListener(\"close-menu\", this._handleCloseMenu);\n  }\n\n  private _handleCloseMenu(ev: CloseMenuEvent) {\n    if (\n      ev.detail.reason.kind === CloseReason.KEYDOWN &&\n      ev.detail.reason.key === KeydownCloseKey.ESCAPE\n    ) {\n      return;\n    }\n    (ev.detail.initiator as HaMdMenuItem).clickAction?.(ev.detail.initiator);\n  }\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-surface-container: var(--card-background-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-menu\": HaMenu;\n  }\n\n  interface HTMLElementEventMap {\n    \"close-menu\": CloseMenuEvent;\n  }\n}\n","import type { Button } from \"@material/mwc-button\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\nimport \"./ha-menu\";\nimport type { HaMenu } from \"./ha-menu\";\n\n@customElement(\"ha-md-button-menu\")\nexport class HaMdButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property() public positioning?: \"fixed\" | \"absolute\" | \"popover\";\n\n  @property({ type: Boolean, attribute: \"has-overflow\" }) public hasOverflow =\n    false;\n\n  @query(\"ha-menu\", true) private _menu!: HaMenu;\n\n  public get items() {\n    return this._menu.items;\n  }\n\n  public override focus() {\n    if (this._menu.open) {\n      this._menu.focus();\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <ha-menu\n        .positioning=${this.positioning}\n        .hasOverflow=${this.hasOverflow}\n      >\n        <slot></slot>\n      </ha-menu>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu.anchorElement = this;\n    if (this._menu.open) {\n      this._menu.close();\n    } else {\n      this._menu.show();\n    }\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"], ha-assist-chip[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-md-button-menu\": HaMdButtonMenu;\n  }\n}\n","import { MdMenuItem } from \"@material/web/menu/menu-item\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-md-menu-item\")\nexport class HaMdMenuItem extends MdMenuItem {\n  @property({ attribute: false }) clickAction?: (item?: HTMLElement) => void;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --ha-icon-display: block;\n        --md-sys-color-primary: var(--primary-text-color);\n        --md-sys-color-on-primary: var(--primary-text-color);\n        --md-sys-color-secondary: var(--secondary-text-color);\n        --md-sys-color-surface: var(--card-background-color);\n        --md-sys-color-on-surface: var(--primary-text-color);\n        --md-sys-color-on-surface-variant: var(--secondary-text-color);\n        --md-sys-color-secondary-container: rgba(\n          var(--rgb-primary-color),\n          0.15\n        );\n        --md-sys-color-on-secondary-container: var(--text-primary-color);\n        --mdc-icon-size: 16px;\n\n        --md-sys-color-on-primary-container: var(--primary-text-color);\n        --md-sys-color-on-secondary-container: var(--primary-text-color);\n        --md-menu-item-label-text-font: Roboto, sans-serif;\n      }\n      :host(.warning) {\n        --md-menu-item-label-text-color: var(--error-color);\n        --md-menu-item-leading-icon-color: var(--error-color);\n      }\n      ::slotted([slot=\"headline\"]) {\n        text-wrap: nowrap;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-md-menu-item\": HaMdMenuItem;\n  }\n}\n","import { MdOutlinedField } from \"@material/web/field/outlined-field\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { literal } from \"lit/static-html\";\n\n@customElement(\"ha-outlined-field\")\nexport class HaOutlinedField extends MdOutlinedField {\n  protected readonly fieldTag = literal`ha-outlined-field`;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      .container::before {\n        display: block;\n        content: \"\";\n        position: absolute;\n        inset: 0;\n        background-color: var(--ha-outlined-field-container-color, transparent);\n        opacity: var(--ha-outlined-field-container-opacity, 1);\n        border-start-start-radius: var(--_container-shape-start-start);\n        border-start-end-radius: var(--_container-shape-start-end);\n        border-end-start-radius: var(--_container-shape-end-start);\n        border-end-end-radius: var(--_container-shape-end-end);\n      }\n      .with-start .start {\n        margin-inline-end: var(--ha-outlined-field-start-margin, 4px);\n        margin-inline-start: initial;\n      }\n      .with-end .end {\n        margin-inline-start: var(--ha-outlined-field-end-margin, 4px);\n        margin-inline-end: initial;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-outlined-field\": HaOutlinedField;\n  }\n}\n","import { MdOutlinedTextField } from \"@material/web/textfield/outlined-text-field\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { literal } from \"lit/static-html\";\nimport \"./ha-outlined-field\";\n\n@customElement(\"ha-outlined-text-field\")\nexport class HaOutlinedTextField extends MdOutlinedTextField {\n  protected readonly fieldTag = literal`ha-outlined-field`;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-on-surface: var(--primary-text-color);\n        --md-sys-color-primary: var(--primary-text-color);\n        --md-outlined-text-field-input-text-color: var(--primary-text-color);\n        --md-sys-color-on-surface-variant: var(--secondary-text-color);\n        --md-outlined-field-outline-color: var(--outline-color);\n        --md-outlined-field-focus-outline-color: var(--primary-color);\n        --md-outlined-field-hover-outline-color: var(--outline-hover-color);\n      }\n      :host([dense]) {\n        --md-outlined-field-top-space: 5.5px;\n        --md-outlined-field-bottom-space: 5.5px;\n        --md-outlined-field-container-shape-start-start: 10px;\n        --md-outlined-field-container-shape-start-end: 10px;\n        --md-outlined-field-container-shape-end-end: 10px;\n        --md-outlined-field-container-shape-end-start: 10px;\n        --md-outlined-field-focus-outline-width: 1px;\n        --ha-outlined-field-start-margin: -4px;\n        --ha-outlined-field-end-margin: -4px;\n        --mdc-icon-size: var(--md-input-chip-icon-size, 18px);\n      }\n      .input {\n        font-family: Roboto, sans-serif;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-outlined-text-field\": HaOutlinedTextField;\n  }\n}\n","import { mdiClose, mdiMagnify } from \"@mdi/js\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\nimport \"./ha-outlined-text-field\";\nimport type { HaOutlinedTextField } from \"./ha-outlined-text-field\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"search-input-outlined\")\nclass SearchInputOutlined extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter?: string;\n\n  @property({ type: Boolean })\n  public suffix = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  @property({ type: String })\n  public label?: string;\n\n  @property({ type: String })\n  public placeholder?: string;\n\n  public focus() {\n    this._input?.focus();\n  }\n\n  @query(\"ha-outlined-text-field\", true) private _input!: HaOutlinedTextField;\n\n  protected render(): TemplateResult {\n    const placeholder =\n      this.placeholder || this.hass.localize(\"ui.common.search\");\n\n    return html`\n      <ha-outlined-text-field\n        .autofocus=${this.autofocus}\n        .aria-label=${this.label || this.hass.localize(\"ui.common.search\")}\n        .placeholder=${placeholder}\n        .value=${this.filter || \"\"}\n        icon\n        .iconTrailing=${this.filter || this.suffix}\n        @input=${this._filterInputChanged}\n        dense\n      >\n        <slot name=\"prefix\" slot=\"leading-icon\">\n          <ha-svg-icon\n            tabindex=\"-1\"\n            class=\"prefix\"\n            .path=${mdiMagnify}\n          ></ha-svg-icon>\n        </slot>\n        ${this.filter\n          ? html`<ha-icon-button\n              aria-label=\"Clear input\"\n              slot=\"trailing-icon\"\n              @click=${this._clearSearch}\n              .path=${mdiClose}\n            >\n            </ha-icon-button>`\n          : nothing}\n      </ha-outlined-text-field>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-flex;\n        /* For iOS */\n        z-index: 0;\n        --mdc-icon-button-size: 24px;\n      }\n      ha-outlined-text-field {\n        display: block;\n        width: 100%;\n        --ha-outlined-field-container-color: var(--card-background-color);\n      }\n      ha-svg-icon,\n      ha-icon-button {\n        display: flex;\n        color: var(--primary-text-color);\n      }\n      ha-svg-icon {\n        outline: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input-outlined\": SearchInputOutlined;\n  }\n}\n","import { ResizeController } from \"@lit-labs/observers/resize-controller\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport \"@material/mwc-button/mwc-button\";\nimport {\n  mdiArrowDown,\n  mdiArrowUp,\n  mdiClose,\n  mdiCog,\n  mdiFilterVariant,\n  mdiFilterVariantRemove,\n  mdiFormatListChecks,\n  mdiMenuDown,\n  mdiUnfoldLessHorizontal,\n  mdiUnfoldMoreHorizontal,\n} from \"@mdi/js\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { LocalizeFunc } from \"../common/translations/localize\";\nimport \"../components/chips/ha-assist-chip\";\nimport \"../components/chips/ha-filter-chip\";\nimport \"../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n  HaDataTable,\n  SortingDirection,\n} from \"../components/data-table/ha-data-table\";\nimport \"../components/ha-md-button-menu\";\nimport \"../components/ha-dialog\";\nimport \"../components/ha-dialog-header\";\nimport \"../components/ha-md-divider\";\nimport type { HaMenu } from \"../components/ha-menu\";\nimport \"../components/ha-md-menu-item\";\nimport \"../components/search-input-outlined\";\nimport type { HomeAssistant, Route } from \"../types\";\nimport \"./hass-tabs-subpage\";\nimport type { PageNavigation } from \"./hass-tabs-subpage\";\nimport { showDataTableSettingsDialog } from \"../components/data-table/show-dialog-data-table-settings\";\n\n@customElement(\"hass-tabs-subpage-data-table\")\nexport class HaTabsSubpageDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public localizeFunc?: LocalizeFunc;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property({ attribute: false }) public initialCollapsedGroups: string[] = [];\n\n  /**\n   * Object with the columns.\n   * @type {Object}\n   */\n  @property({ type: Object }) public columns: DataTableColumnContainer = {};\n\n  /**\n   * Data to show in the table.\n   * @type {Array}\n   */\n  @property({ type: Array }) public data: DataTableRowData[] = [];\n\n  /**\n   * Should rows be selectable.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public selectable = false;\n\n  /**\n   * Should rows be clickable.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public clickable = false;\n\n  /**\n   * Do we need to add padding for a fab.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public hasFab = false;\n\n  /**\n   * Add an extra row at the bottom of the data table\n   * @type {TemplateResult}\n   */\n  @property({ attribute: false }) public appendRow?: TemplateResult;\n\n  /**\n   * Field with a unique id per entry in data.\n   * @type {String}\n   */\n  @property({ type: String }) public id = \"id\";\n\n  /**\n   * String to filter the data in the data table on.\n   * @type {String}\n   */\n  @property({ type: String }) public filter = \"\";\n\n  @property() public searchLabel?: string;\n\n  /**\n   * Number of active filters.\n   * @type {Number}\n   */\n  @property({ type: Number }) public filters?;\n\n  /**\n   * Number of current selections.\n   * @type {Number}\n   */\n  @property({ type: Number }) public selected?;\n\n  /**\n   * What path to use when the back button is pressed.\n   * @type {String}\n   * @attr back-path\n   */\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  /**\n   * Function to call when the back button is pressed.\n   * @type {() => void}\n   */\n  @property({ attribute: false }) public backCallback?: () => void;\n\n  /**\n   * String to show when there are no records in the data table.\n   * @type {String}\n   */\n  @property({ type: String }) public noDataText?: string;\n\n  /**\n   * Hides the data table and show an empty message.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public empty = false;\n\n  @property({ attribute: false }) public route!: Route;\n\n  /**\n   * Array of tabs to show on the page.\n   * @type {Array}\n   */\n  @property({ attribute: false }) public tabs: PageNavigation[] = [];\n\n  /**\n   * Show the filter menu.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public hasFilters = false;\n\n  @property({ type: Boolean }) public showFilters = false;\n\n  @property({ attribute: false }) public initialSorting?: {\n    column: string;\n    direction: SortingDirection;\n  };\n\n  @property() public initialGroupColumn?: string;\n\n  @property({ attribute: false }) public groupOrder?: string[];\n\n  @property({ attribute: false }) public columnOrder?: string[];\n\n  @property({ attribute: false }) public hiddenColumns?: string[];\n\n  @state() private _sortColumn?: string;\n\n  @state() private _sortDirection: SortingDirection = null;\n\n  @state() private _groupColumn?: string;\n\n  @state() private _selectMode = false;\n\n  @query(\"ha-data-table\", true) private _dataTable!: HaDataTable;\n\n  @query(\"#group-by-menu\") private _groupByMenu!: HaMenu;\n\n  @query(\"#sort-by-menu\") private _sortByMenu!: HaMenu;\n\n  private _showPaneController = new ResizeController(this, {\n    callback: (entries) => entries[0]?.contentRect.width > 750,\n  });\n\n  public clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  protected willUpdate() {\n    if (this.hasUpdated) {\n      return;\n    }\n    if (this.initialGroupColumn) {\n      this._setGroupColumn(this.initialGroupColumn);\n    }\n    if (this.initialSorting) {\n      this._sortColumn = this.initialSorting.column;\n      this._sortDirection = this.initialSorting.direction;\n    }\n  }\n\n  private _toggleGroupBy() {\n    this._groupByMenu.open = !this._groupByMenu.open;\n  }\n\n  private _toggleSortBy() {\n    this._sortByMenu.open = !this._sortByMenu.open;\n  }\n\n  protected render(): TemplateResult {\n    const localize = this.localizeFunc || this.hass.localize;\n    const showPane = this._showPaneController.value ?? !this.narrow;\n    const filterButton = this.hasFilters\n      ? html`<div class=\"relative\">\n          <ha-assist-chip\n            .label=${localize(\"ui.components.subpage-data-table.filters\")}\n            .active=${this.filters}\n            @click=${this._toggleFilters}\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiFilterVariant}></ha-svg-icon>\n          </ha-assist-chip>\n          ${this.filters\n            ? html`<div class=\"badge\">${this.filters}</div>`\n            : nothing}\n        </div>`\n      : nothing;\n\n    const selectModeBtn =\n      this.selectable && !this._selectMode\n        ? html`<ha-assist-chip\n            class=\"has-dropdown select-mode-chip\"\n            .active=${this._selectMode}\n            @click=${this._enableSelectMode}\n            .title=${localize(\n              \"ui.components.subpage-data-table.enter_selection_mode\"\n            )}\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiFormatListChecks}></ha-svg-icon>\n          </ha-assist-chip>`\n        : nothing;\n\n    const searchBar = html`<search-input-outlined\n      .hass=${this.hass}\n      .filter=${this.filter}\n      @value-changed=${this._handleSearchChange}\n      .label=${this.searchLabel}\n      .placeholder=${this.searchLabel}\n    >\n    </search-input-outlined>`;\n\n    const sortByMenu = Object.values(this.columns).find((col) => col.sortable)\n      ? html`\n          <ha-assist-chip\n            .label=${localize(\"ui.components.subpage-data-table.sort_by\", {\n              sortColumn: this._sortColumn\n                ? ` ${this.columns[this._sortColumn]?.title || this.columns[this._sortColumn]?.label}` ||\n                  \"\"\n                : \"\",\n            })}\n            id=\"sort-by-anchor\"\n            @click=${this._toggleSortBy}\n          >\n            <ha-svg-icon\n              slot=\"trailing-icon\"\n              .path=${mdiMenuDown}\n            ></ha-svg-icon>\n          </ha-assist-chip>\n        `\n      : nothing;\n\n    const groupByMenu = Object.values(this.columns).find((col) => col.groupable)\n      ? html`\n          <ha-assist-chip\n            .label=${localize(\"ui.components.subpage-data-table.group_by\", {\n              groupColumn: this._groupColumn\n                ? ` ${this.columns[this._groupColumn].title || this.columns[this._groupColumn].label}`\n                : \"\",\n            })}\n            id=\"group-by-anchor\"\n            @click=${this._toggleGroupBy}\n          >\n            <ha-svg-icon slot=\"trailing-icon\" .path=${mdiMenuDown}></ha-svg-icon\n          ></ha-assist-chip>\n        `\n      : nothing;\n\n    const settingsButton = html`<ha-assist-chip\n      class=\"has-dropdown select-mode-chip\"\n      @click=${this._openSettings}\n      .title=${localize(\"ui.components.subpage-data-table.settings\")}\n    >\n      <ha-svg-icon slot=\"icon\" .path=${mdiCog}></ha-svg-icon>\n    </ha-assist-chip>`;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .localizeFunc=${this.localizeFunc}\n        .narrow=${this.narrow}\n        .isWide=${this.isWide}\n        .backPath=${this.backPath}\n        .backCallback=${this.backCallback}\n        .route=${this.route}\n        .tabs=${this.tabs}\n        .mainPage=${this.mainPage}\n        .supervisor=${this.supervisor}\n        .pane=${showPane && this.showFilters}\n        @sorting-changed=${this._sortingChanged}\n      >\n        ${this._selectMode\n          ? html`<div class=\"selection-bar\" slot=\"toolbar\">\n              <div class=\"selection-controls\">\n                <ha-icon-button\n                  .path=${mdiClose}\n                  @click=${this._disableSelectMode}\n                  .label=${localize(\n                    \"ui.components.subpage-data-table.exit_selection_mode\"\n                  )}\n                ></ha-icon-button>\n                <ha-md-button-menu positioning=\"absolute\">\n                  <ha-assist-chip\n                    .label=${localize(\n                      \"ui.components.subpage-data-table.select\"\n                    )}\n                    slot=\"trigger\"\n                  >\n                    <ha-svg-icon\n                      slot=\"icon\"\n                      .path=${mdiFormatListChecks}\n                    ></ha-svg-icon>\n                    <ha-svg-icon\n                      slot=\"trailing-icon\"\n                      .path=${mdiMenuDown}\n                    ></ha-svg-icon\n                  ></ha-assist-chip>\n                  <ha-md-menu-item\n                    .value=${undefined}\n                    @click=${this._selectAll}\n                  >\n                    <div slot=\"headline\">\n                      ${localize(\"ui.components.subpage-data-table.select_all\")}\n                    </div>\n                  </ha-md-menu-item>\n                  <ha-md-menu-item\n                    .value=${undefined}\n                    @click=${this._selectNone}\n                  >\n                    <div slot=\"headline\">\n                      ${localize(\n                        \"ui.components.subpage-data-table.select_none\"\n                      )}\n                    </div>\n                  </ha-md-menu-item>\n                  <ha-md-divider role=\"separator\" tabindex=\"-1\"></ha-md-divider>\n                  <ha-md-menu-item\n                    .value=${undefined}\n                    @click=${this._disableSelectMode}\n                  >\n                    <div slot=\"headline\">\n                      ${localize(\n                        \"ui.components.subpage-data-table.exit_selection_mode\"\n                      )}\n                    </div>\n                  </ha-md-menu-item>\n                </ha-md-button-menu>\n                ${this.selected !== undefined\n                  ? html`<p>\n                      ${localize(\"ui.components.subpage-data-table.selected\", {\n                        selected: this.selected || \"0\",\n                      })}\n                    </p>`\n                  : nothing}\n              </div>\n              <div class=\"center-vertical\">\n                <slot name=\"selection-bar\"></slot>\n              </div>\n            </div>`\n          : nothing}\n        ${this.showFilters\n          ? !showPane\n            ? nothing\n            : html`<div class=\"pane\" slot=\"pane\">\n                <div class=\"table-header\">\n                  <ha-assist-chip\n                    .label=${localize(\n                      \"ui.components.subpage-data-table.filters\"\n                    )}\n                    active\n                    @click=${this._toggleFilters}\n                  >\n                    <ha-svg-icon\n                      slot=\"icon\"\n                      .path=${mdiFilterVariant}\n                    ></ha-svg-icon>\n                  </ha-assist-chip>\n                  ${this.filters\n                    ? html`<ha-icon-button\n                        .path=${mdiFilterVariantRemove}\n                        @click=${this._clearFilters}\n                        .label=${localize(\n                          \"ui.components.subpage-data-table.clear_filter\"\n                        )}\n                      ></ha-icon-button>`\n                    : nothing}\n                </div>\n                <div class=\"pane-content\">\n                  <slot name=\"filter-pane\"></slot>\n                </div>\n              </div>`\n          : nothing}\n        ${this.empty\n          ? html`<div class=\"center\">\n              <slot name=\"empty\">${this.noDataText}</slot>\n            </div>`\n          : html`<div slot=\"toolbar-icon\">\n                <slot name=\"toolbar-icon\"></slot>\n              </div>\n              ${this.narrow\n                ? html`\n                    <div slot=\"header\">\n                      <slot name=\"header\">\n                        <div class=\"search-toolbar\">${searchBar}</div>\n                      </slot>\n                    </div>\n                  `\n                : \"\"}\n              <ha-data-table\n                .hass=${this.hass}\n                .localize=${localize}\n                .narrow=${this.narrow}\n                .columns=${this.columns}\n                .data=${this.data}\n                .noDataText=${this.noDataText}\n                .filter=${this.filter}\n                .selectable=${this._selectMode}\n                .hasFab=${this.hasFab}\n                .id=${this.id}\n                .clickable=${this.clickable}\n                .appendRow=${this.appendRow}\n                .sortColumn=${this._sortColumn}\n                .sortDirection=${this._sortDirection}\n                .groupColumn=${this._groupColumn}\n                .groupOrder=${this.groupOrder}\n                .initialCollapsedGroups=${this.initialCollapsedGroups}\n                .columnOrder=${this.columnOrder}\n                .hiddenColumns=${this.hiddenColumns}\n              >\n                ${!this.narrow\n                  ? html`\n                      <div slot=\"header\">\n                        <slot name=\"header\">\n                          <div class=\"table-header\">\n                            ${this.hasFilters && !this.showFilters\n                              ? html`${filterButton}`\n                              : nothing}${selectModeBtn}${searchBar}${groupByMenu}${sortByMenu}${settingsButton}\n                          </div>\n                        </slot>\n                      </div>\n                    `\n                  : html`<div slot=\"header\"></div>\n                      <div slot=\"header-row\" class=\"narrow-header-row\">\n                        ${this.hasFilters && !this.showFilters\n                          ? html`${filterButton}`\n                          : nothing}\n                        ${selectModeBtn}${groupByMenu}${sortByMenu}${settingsButton}\n                      </div>`}\n              </ha-data-table>`}\n        <div slot=\"fab\"><slot name=\"fab\"></slot></div>\n      </hass-tabs-subpage>\n      <ha-menu anchor=\"group-by-anchor\" id=\"group-by-menu\" positioning=\"fixed\">\n        ${Object.entries(this.columns).map(([id, column]) =>\n          column.groupable\n            ? html`\n                <ha-md-menu-item\n                  .value=${id}\n                  @click=${this._handleGroupBy}\n                  .selected=${id === this._groupColumn}\n                  class=${classMap({ selected: id === this._groupColumn })}\n                >\n                  ${column.title || column.label}\n                </ha-md-menu-item>\n              `\n            : nothing\n        )}\n        <ha-md-menu-item\n          .value=${undefined}\n          @click=${this._handleGroupBy}\n          .selected=${this._groupColumn === undefined}\n          class=${classMap({ selected: this._groupColumn === undefined })}\n        >\n          ${localize(\"ui.components.subpage-data-table.dont_group_by\")}\n        </ha-md-menu-item>\n        <ha-md-divider role=\"separator\" tabindex=\"-1\"></ha-md-divider>\n        <ha-md-menu-item\n          @click=${this._collapseAllGroups}\n          .disabled=${this._groupColumn === undefined}\n        >\n          <ha-svg-icon\n            slot=\"start\"\n            .path=${mdiUnfoldLessHorizontal}\n          ></ha-svg-icon>\n          ${localize(\"ui.components.subpage-data-table.collapse_all_groups\")}\n        </ha-md-menu-item>\n        <ha-md-menu-item\n          @click=${this._expandAllGroups}\n          .disabled=${this._groupColumn === undefined}\n        >\n          <ha-svg-icon\n            slot=\"start\"\n            .path=${mdiUnfoldMoreHorizontal}\n          ></ha-svg-icon>\n          ${localize(\"ui.components.subpage-data-table.expand_all_groups\")}\n        </ha-md-menu-item>\n      </ha-menu>\n      <ha-menu anchor=\"sort-by-anchor\" id=\"sort-by-menu\" positioning=\"fixed\">\n        ${Object.entries(this.columns).map(([id, column]) =>\n          column.sortable\n            ? html`\n                <ha-md-menu-item\n                  .value=${id}\n                  @click=${this._handleSortBy}\n                  keep-open\n                  .selected=${id === this._sortColumn}\n                  class=${classMap({ selected: id === this._sortColumn })}\n                >\n                  ${this._sortColumn === id\n                    ? html`\n                        <ha-svg-icon\n                          slot=\"end\"\n                          .path=${this._sortDirection === \"desc\"\n                            ? mdiArrowDown\n                            : mdiArrowUp}\n                        ></ha-svg-icon>\n                      `\n                    : nothing}\n                  ${column.title || column.label}\n                </ha-md-menu-item>\n              `\n            : nothing\n        )}\n      </ha-menu>\n      ${this.showFilters && !showPane\n        ? html`<ha-dialog\n            open\n            .heading=${localize(\"ui.components.subpage-data-table.filters\")}\n          >\n            <ha-dialog-header slot=\"heading\">\n              <ha-icon-button\n                slot=\"navigationIcon\"\n                .path=${mdiClose}\n                @click=${this._toggleFilters}\n                .label=${localize(\n                  \"ui.components.subpage-data-table.close_filter\"\n                )}\n              ></ha-icon-button>\n              <span slot=\"title\"\n                >${localize(\"ui.components.subpage-data-table.filters\")}</span\n              >\n              ${this.filters\n                ? html`<ha-icon-button\n                    slot=\"actionItems\"\n                    @click=${this._clearFilters}\n                    .path=${mdiFilterVariantRemove}\n                    .label=${localize(\n                      \"ui.components.subpage-data-table.clear_filter\"\n                    )}\n                  ></ha-icon-button>`\n                : nothing}\n            </ha-dialog-header>\n            <div class=\"filter-dialog-content\">\n              <slot name=\"filter-pane\"></slot>\n            </div>\n            <div slot=\"primaryAction\">\n              <ha-button @click=${this._toggleFilters}>\n                ${localize(\"ui.components.subpage-data-table.show_results\", {\n                  number: this.data.length,\n                })}\n              </ha-button>\n            </div>\n          </ha-dialog>`\n        : nothing}\n    `;\n  }\n\n  private _clearFilters() {\n    fireEvent(this, \"clear-filter\");\n  }\n\n  private _toggleFilters() {\n    this.showFilters = !this.showFilters;\n  }\n\n  private _sortingChanged(ev) {\n    this._sortDirection = ev.detail.direction;\n    this._sortColumn = this._sortDirection ? ev.detail.column : undefined;\n  }\n\n  private _handleSortBy(ev) {\n    const columnId = ev.currentTarget.value;\n    if (!this._sortDirection || this._sortColumn !== columnId) {\n      this._sortDirection = \"asc\";\n    } else if (this._sortDirection === \"asc\") {\n      this._sortDirection = \"desc\";\n    } else {\n      this._sortDirection = null;\n    }\n    this._sortColumn = this._sortDirection === null ? undefined : columnId;\n\n    fireEvent(this, \"sorting-changed\", {\n      column: columnId,\n      direction: this._sortDirection,\n    });\n  }\n\n  private _handleGroupBy(ev) {\n    this._setGroupColumn(ev.currentTarget.value);\n  }\n\n  private _setGroupColumn(columnId: string) {\n    this._groupColumn = columnId;\n    fireEvent(this, \"grouping-changed\", { value: columnId });\n  }\n\n  private _openSettings() {\n    showDataTableSettingsDialog(this, {\n      columns: this.columns,\n      hiddenColumns: this.hiddenColumns,\n      columnOrder: this.columnOrder,\n      onUpdate: (\n        columnOrder: string[] | undefined,\n        hiddenColumns: string[] | undefined\n      ) => {\n        this.columnOrder = columnOrder;\n        this.hiddenColumns = hiddenColumns;\n        fireEvent(this, \"columns-changed\", { columnOrder, hiddenColumns });\n      },\n      localizeFunc: this.localizeFunc,\n    });\n  }\n\n  private _collapseAllGroups() {\n    this._dataTable.collapseAllGroups();\n  }\n\n  private _expandAllGroups() {\n    this._dataTable.expandAllGroups();\n  }\n\n  private _enableSelectMode() {\n    this._selectMode = true;\n  }\n\n  private _disableSelectMode() {\n    this._selectMode = false;\n    this._dataTable.clearSelection();\n  }\n\n  private _selectAll() {\n    this._dataTable.selectAll();\n  }\n\n  private _selectNone() {\n    this._dataTable.clearSelection();\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    if (this.filter === ev.detail.value) {\n      return;\n    }\n    this.filter = ev.detail.value;\n    fireEvent(this, \"search-changed\", { value: this.filter });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n      }\n\n      ha-data-table {\n        width: 100%;\n        height: 100%;\n        --data-table-border-width: 0;\n      }\n      :host(:not([narrow])) ha-data-table,\n      .pane {\n        height: calc(100vh - 1px - var(--header-height));\n        display: block;\n      }\n\n      .pane-content {\n        height: calc(100vh - 1px - var(--header-height) - var(--header-height));\n        display: flex;\n        flex-direction: column;\n      }\n\n      :host([narrow]) hass-tabs-subpage {\n        --main-title-margin: 0;\n      }\n      :host([narrow]) {\n        --expansion-panel-summary-padding: 0 16px;\n      }\n      .table-header {\n        display: flex;\n        align-items: center;\n        --mdc-shape-small: 0;\n        height: 56px;\n        width: 100%;\n        justify-content: space-between;\n        padding: 0 16px;\n        gap: 16px;\n        box-sizing: border-box;\n        background: var(--primary-background-color);\n        border-bottom: 1px solid var(--divider-color);\n      }\n      search-input-outlined {\n        flex: 1;\n      }\n      .search-toolbar {\n        display: flex;\n        align-items: center;\n        color: var(--secondary-text-color);\n      }\n      .filters {\n        --mdc-text-field-fill-color: var(--input-fill-color);\n        --mdc-text-field-idle-line-color: var(--input-idle-line-color);\n        --mdc-shape-small: 4px;\n        --text-field-overflow: initial;\n        display: flex;\n        justify-content: flex-end;\n        color: var(--primary-text-color);\n      }\n      .active-filters {\n        color: var(--primary-text-color);\n        position: relative;\n        display: flex;\n        align-items: center;\n        padding: 2px 2px 2px 8px;\n        margin-left: 4px;\n        margin-inline-start: 4px;\n        margin-inline-end: initial;\n        font-size: 14px;\n        width: max-content;\n        cursor: initial;\n        direction: var(--direction);\n      }\n      .active-filters ha-svg-icon {\n        color: var(--primary-color);\n      }\n      .active-filters mwc-button {\n        margin-left: 8px;\n        margin-inline-start: 8px;\n        margin-inline-end: initial;\n        direction: var(--direction);\n      }\n      .active-filters::before {\n        background-color: var(--primary-color);\n        opacity: 0.12;\n        border-radius: 4px;\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        content: \"\";\n      }\n      .badge {\n        min-width: 20px;\n        box-sizing: border-box;\n        border-radius: 50%;\n        font-weight: 400;\n        background-color: var(--primary-color);\n        line-height: 20px;\n        text-align: center;\n        padding: 0px 4px;\n        color: var(--text-primary-color);\n        position: absolute;\n        right: 0;\n        inset-inline-end: 0;\n        inset-inline-start: initial;\n        top: 4px;\n        font-size: 0.65em;\n      }\n      .center {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        text-align: center;\n        box-sizing: border-box;\n        height: 100%;\n        width: 100%;\n        padding: 16px;\n      }\n\n      .badge {\n        position: absolute;\n        top: -4px;\n        right: -4px;\n        inset-inline-end: -4px;\n        inset-inline-start: initial;\n        min-width: 16px;\n        box-sizing: border-box;\n        border-radius: 50%;\n        font-weight: 400;\n        font-size: 11px;\n        background-color: var(--primary-color);\n        line-height: 16px;\n        text-align: center;\n        padding: 0px 2px;\n        color: var(--text-primary-color);\n      }\n\n      .narrow-header-row {\n        display: flex;\n        align-items: center;\n        gap: 16px;\n        padding: 0 16px;\n        overflow-x: scroll;\n        -ms-overflow-style: none;\n        scrollbar-width: none;\n      }\n\n      .selection-bar {\n        background: rgba(var(--rgb-primary-color), 0.1);\n        width: 100%;\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        padding: 8px 12px;\n        box-sizing: border-box;\n        font-size: 14px;\n        --ha-assist-chip-container-color: var(--card-background-color);\n      }\n\n      .selection-controls {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      }\n\n      .selection-controls p {\n        margin-left: 8px;\n        margin-inline-start: 8px;\n        margin-inline-end: initial;\n      }\n\n      .center-vertical {\n        display: flex;\n        align-items: center;\n        gap: 8px;\n      }\n\n      .relative {\n        position: relative;\n      }\n\n      ha-assist-chip {\n        --ha-assist-chip-container-shape: 10px;\n        --ha-assist-chip-container-color: var(--card-background-color);\n      }\n\n      .select-mode-chip {\n        --md-assist-chip-icon-label-space: 0;\n        --md-assist-chip-trailing-space: 8px;\n      }\n\n      ha-dialog {\n        --mdc-dialog-min-width: calc(\n          100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n        );\n        --mdc-dialog-max-width: calc(\n          100vw - env(safe-area-inset-right) - env(safe-area-inset-left)\n        );\n        --mdc-dialog-min-height: 100%;\n        --mdc-dialog-max-height: 100%;\n        --vertical-align-dialog: flex-end;\n        --ha-dialog-border-radius: 0;\n        --dialog-content-padding: 0;\n      }\n\n      .filter-dialog-content {\n        height: calc(100vh - 1px - 61px - var(--header-height));\n        display: flex;\n        flex-direction: column;\n      }\n\n      #sort-by-anchor,\n      #group-by-anchor,\n      ha-md-button-menu ha-assist-chip {\n        --md-assist-chip-trailing-space: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-tabs-subpage-data-table\": HaTabsSubpageDataTable;\n  }\n\n  // for fire event\n  interface HASSDomEvents {\n    \"search-changed\": { value: string };\n    \"grouping-changed\": { value: string };\n    \"columns-changed\": {\n      columnOrder: string[] | undefined;\n      hiddenColumns: string[] | undefined;\n    };\n    \"clear-filter\": undefined;\n  }\n}\n"],"names":[],"sourceRoot":""}