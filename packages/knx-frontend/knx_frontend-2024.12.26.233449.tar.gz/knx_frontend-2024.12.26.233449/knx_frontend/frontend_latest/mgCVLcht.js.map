{"version":3,"file":"mgCVLcht.js","mappings":";AA2DA;;;AAGA;;;AAGA;;AAIA;;AAEA;AACA;;AAEA;AACA;;AAGA;AAuBA;;;;;;;;;;;;;;;;AAkBA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/dialogs/image-cropper-dialog/image-cropper-dialog.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport Cropper from \"cropperjs\";\n// @ts-ignore\nimport cropperCss from \"cropperjs/dist/cropper.css\";\nimport type { CSSResultGroup, PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport \"../../components/ha-dialog\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport type { HaImageCropperDialogParams } from \"./show-image-cropper-dialog\";\n\n@customElement(\"image-cropper-dialog\")\nexport class HaImagecropperDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: HaImageCropperDialogParams;\n\n  @state() private _open = false;\n\n  @query(\"img\", true) private _image!: HTMLImageElement;\n\n  private _cropper?: Cropper;\n\n  public showDialog(params: HaImageCropperDialogParams): void {\n    this._params = params;\n    this._open = true;\n  }\n\n  public closeDialog() {\n    this._open = false;\n    this._params = undefined;\n    this._cropper?.destroy();\n    this._cropper = undefined;\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"_params\") || !this._params) {\n      return;\n    }\n    if (!this._cropper) {\n      this._image.src = URL.createObjectURL(this._params.file);\n      this._cropper = new Cropper(this._image, {\n        aspectRatio: this._params.options.aspectRatio,\n        viewMode: 1,\n        dragMode: \"move\",\n        minCropBoxWidth: 50,\n        ready: () => {\n          URL.revokeObjectURL(this._image!.src);\n        },\n      });\n    } else {\n      this._cropper.replace(URL.createObjectURL(this._params.file));\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`<ha-dialog\n      @closed=${this.closeDialog}\n      scrimClickAction\n      escapeKeyAction\n      .open=${this._open}\n    >\n      <div\n        class=\"container ${classMap({\n          round: Boolean(this._params?.options.round),\n        })}\"\n      >\n        <img alt=${this.hass.localize(\"ui.dialogs.image_cropper.crop_image\")} />\n      </div>\n      <mwc-button slot=\"secondaryAction\" @click=${this.closeDialog}>\n        ${this.hass.localize(\"ui.common.cancel\")}\n      </mwc-button>\n      <mwc-button slot=\"primaryAction\" @click=${this._cropImage}>\n        ${this.hass.localize(\"ui.dialogs.image_cropper.crop\")}\n      </mwc-button>\n    </ha-dialog>`;\n  }\n\n  private _cropImage() {\n    this._cropper!.getCroppedCanvas().toBlob(\n      (blob) => {\n        if (!blob) {\n          return;\n        }\n        const file = new File([blob], this._params!.file.name, {\n          type: this._params!.options.type || this._params!.file.type,\n        });\n        this._params!.croppedCallback(file);\n        this.closeDialog();\n      },\n      this._params!.options.type || this._params!.file.type,\n      this._params!.options.quality\n    );\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ${unsafeCSS(cropperCss)}\n        .container {\n          max-width: 640px;\n        }\n        img {\n          max-width: 100%;\n        }\n        .container.round .cropper-view-box,\n        .container.round .cropper-face {\n          border-radius: 50%;\n        }\n        .cropper-line,\n        .cropper-point,\n        .cropper-point.point-se::before {\n          background-color: var(--primary-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"image-cropper-dialog\": HaImagecropperDialog;\n  }\n}\n"],"names":[],"sourceRoot":""}