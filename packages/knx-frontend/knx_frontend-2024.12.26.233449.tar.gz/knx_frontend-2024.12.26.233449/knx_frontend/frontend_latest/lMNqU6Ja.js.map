{"version":3,"file":"lMNqU6Ja.js","mappings":";AAwEA;AAGA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/panels/lovelace/components/hui-timestamp-display.ts"],"sourcesContent":["import type { HassConfig } from \"home-assistant-js-websocket\";\nimport type { PropertyValues } from \"lit\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { formatDate } from \"../../../common/datetime/format_date\";\nimport { formatDateTime } from \"../../../common/datetime/format_date_time\";\nimport { formatTime } from \"../../../common/datetime/format_time\";\nimport { relativeTime } from \"../../../common/datetime/relative_time\";\nimport { capitalizeFirstLetter } from \"../../../common/string/capitalize-first-letter\";\nimport type { FrontendLocaleData } from \"../../../data/translation\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { TimestampRenderingFormat } from \"./types\";\n\nconst FORMATS: {\n  [key: string]: (\n    ts: Date,\n    lang: FrontendLocaleData,\n    config: HassConfig\n  ) => string;\n} = {\n  date: formatDate,\n  datetime: formatDateTime,\n  time: formatTime,\n};\nconst INTERVAL_FORMAT = [\"relative\", \"total\"];\n\n@customElement(\"hui-timestamp-display\")\nclass HuiTimestampDisplay extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public ts?: Date;\n\n  @property() public format?: TimestampRenderingFormat;\n\n  @property({ type: Boolean }) public capitalize = false;\n\n  @state() private _relative?: string;\n\n  private _connected?: boolean;\n\n  private _interval?: number;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    this._connected = true;\n    this._startInterval();\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._connected = false;\n    this._clearInterval();\n  }\n\n  protected render() {\n    if (!this.ts || !this.hass) {\n      return nothing;\n    }\n\n    if (isNaN(this.ts.getTime())) {\n      return html`${this.hass.localize(\n        \"ui.panel.lovelace.components.timestamp-display.invalid\"\n      )}`;\n    }\n\n    const format = this._format;\n\n    if (INTERVAL_FORMAT.includes(format)) {\n      return html` ${this._relative} `;\n    }\n    if (format in FORMATS) {\n      return html`\n        ${FORMATS[format](this.ts, this.hass.locale, this.hass.config)}\n      `;\n    }\n    return html`${this.hass.localize(\n      \"ui.panel.lovelace.components.timestamp-display.invalid_format\"\n    )}`;\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n    if (!changedProperties.has(\"format\") || !this._connected) {\n      return;\n    }\n\n    if (INTERVAL_FORMAT.includes(\"relative\")) {\n      this._startInterval();\n    } else {\n      this._clearInterval();\n    }\n  }\n\n  private get _format(): string {\n    return this.format || \"relative\";\n  }\n\n  private _startInterval(): void {\n    this._clearInterval();\n    if (this._connected && INTERVAL_FORMAT.includes(this._format)) {\n      this._updateRelative();\n      this._interval = window.setInterval(() => this._updateRelative(), 1000);\n    }\n  }\n\n  private _clearInterval(): void {\n    if (this._interval) {\n      clearInterval(this._interval);\n      this._interval = undefined;\n    }\n  }\n\n  private _updateRelative(): void {\n    if (this.ts && this.hass?.localize) {\n      this._relative =\n        this._format === \"relative\"\n          ? relativeTime(this.ts, this.hass!.locale)\n          : relativeTime(new Date(), this.hass!.locale, this.ts, false);\n\n      this._relative = this.capitalize\n        ? capitalizeFirstLetter(this._relative)\n        : this._relative;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-timestamp-display\": HuiTimestampDisplay;\n  }\n}\n"],"names":[],"sourceRoot":""}