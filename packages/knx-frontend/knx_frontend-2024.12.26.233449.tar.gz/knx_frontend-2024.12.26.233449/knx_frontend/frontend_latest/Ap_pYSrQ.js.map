{"version":3,"file":"Ap_pYSrQ.js","mappings":";;;AA0HA;AACA;AACA;AACA;;;AAKA;;;;AAMA;AACA;AACA;AACA;AACA;;;;AAxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkXA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/panels/config/helpers/forms/ha-schedule-form.ts"],"sourcesContent":["import type { CalendarOptions } from \"@fullcalendar/core\";\nimport { Calendar } from \"@fullcalendar/core\";\nimport allLocales from \"@fullcalendar/core/locales-all\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport type { Day } from \"date-fns\";\nimport { addDays, isSameDay, isSameWeek, nextDay } from \"date-fns\";\nimport type { CSSResultGroup, PropertyValues } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { firstWeekdayIndex } from \"../../../../common/datetime/first_weekday\";\nimport { formatTime24h } from \"../../../../common/datetime/format_time\";\nimport { useAmPm } from \"../../../../common/datetime/use_am_pm\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-textfield\";\nimport type { Schedule, ScheduleDay } from \"../../../../data/schedule\";\nimport { weekdays } from \"../../../../data/schedule\";\nimport { TimeZone } from \"../../../../data/translation\";\nimport { showScheduleBlockInfoDialog } from \"./show-dialog-schedule-block-info\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\n\nconst defaultFullCalendarConfig: CalendarOptions = {\n  plugins: [timeGridPlugin, interactionPlugin],\n  headerToolbar: false,\n  initialView: \"timeGridWeek\",\n  editable: true,\n  selectable: true,\n  selectMirror: true,\n  selectOverlap: false,\n  eventOverlap: false,\n  allDaySlot: false,\n  height: \"parent\",\n  locales: allLocales,\n  firstDay: 1,\n  dayHeaderFormat: { weekday: \"short\", month: undefined, day: undefined },\n};\n\n@customElement(\"ha-schedule-form\")\nclass HaScheduleForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public new = false;\n\n  @state() private _name!: string;\n\n  @state() private _icon!: string;\n\n  @state() private _monday!: ScheduleDay[];\n\n  @state() private _tuesday!: ScheduleDay[];\n\n  @state() private _wednesday!: ScheduleDay[];\n\n  @state() private _thursday!: ScheduleDay[];\n\n  @state() private _friday!: ScheduleDay[];\n\n  @state() private _saturday!: ScheduleDay[];\n\n  @state() private _sunday!: ScheduleDay[];\n\n  @state() private calendar?: Calendar;\n\n  private _item?: Schedule;\n\n  set item(item: Schedule) {\n    this._item = item;\n    if (item) {\n      this._name = item.name || \"\";\n      this._icon = item.icon || \"\";\n      this._monday = item.monday || [];\n      this._tuesday = item.tuesday || [];\n      this._wednesday = item.wednesday || [];\n      this._thursday = item.thursday || [];\n      this._friday = item.friday || [];\n      this._saturday = item.saturday || [];\n      this._sunday = item.sunday || [];\n    } else {\n      this._name = \"\";\n      this._icon = \"\";\n      this._monday = [];\n      this._tuesday = [];\n      this._wednesday = [];\n      this._thursday = [];\n      this._friday = [];\n      this._saturday = [];\n      this._sunday = [];\n    }\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.calendar?.destroy();\n    this.calendar = undefined;\n    this.renderRoot.querySelector(\"style[data-fullcalendar]\")?.remove();\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hasUpdated && !this.calendar) {\n      this.setupCalendar();\n    }\n  }\n\n  public focus() {\n    this.updateComplete.then(() =>\n      (\n        this.shadowRoot?.querySelector(\"[dialogInitialFocus]\") as HTMLElement\n      )?.focus()\n    );\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    return html`\n      <div class=\"form\">\n        <ha-textfield\n          .value=${this._name}\n          .configValue=${\"name\"}\n          @input=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.name\"\n          )}\n          autoValidate\n          required\n          .validationMessage=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.required_error_msg\"\n          )}\n          dialogInitialFocus\n        ></ha-textfield>\n        <ha-icon-picker\n          .hass=${this.hass}\n          .value=${this._icon}\n          .configValue=${\"icon\"}\n          @value-changed=${this._valueChanged}\n          .label=${this.hass!.localize(\n            \"ui.dialogs.helper_settings.generic.icon\"\n          )}\n        ></ha-icon-picker>\n        <div id=\"calendar\"></div>\n      </div>\n    `;\n  }\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (!this.calendar) {\n      return;\n    }\n\n    if (\n      changedProps.has(\"_sunday\") ||\n      changedProps.has(\"_monday\") ||\n      changedProps.has(\"_tuesday\") ||\n      changedProps.has(\"_wednesday\") ||\n      changedProps.has(\"_thursday\") ||\n      changedProps.has(\"_friday\") ||\n      changedProps.has(\"_saturday\") ||\n      changedProps.has(\"calendar\")\n    ) {\n      this.calendar.removeAllEventSources();\n      this.calendar.addEventSource(this._events);\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant;\n\n    if (oldHass && oldHass.language !== this.hass.language) {\n      this.calendar.setOption(\"locale\", this.hass.language);\n    }\n  }\n\n  protected firstUpdated(): void {\n    this.setupCalendar();\n  }\n\n  private setupCalendar(): void {\n    const config: CalendarOptions = {\n      ...defaultFullCalendarConfig,\n      locale: this.hass.language,\n      firstDay: firstWeekdayIndex(this.hass.locale),\n      slotLabelFormat: {\n        hour: \"numeric\",\n        minute: undefined,\n        hour12: useAmPm(this.hass.locale),\n        meridiem: useAmPm(this.hass.locale) ? \"narrow\" : false,\n      },\n      eventTimeFormat: {\n        hour: useAmPm(this.hass.locale) ? \"numeric\" : \"2-digit\",\n        minute: useAmPm(this.hass.locale) ? \"numeric\" : \"2-digit\",\n        hour12: useAmPm(this.hass.locale),\n        meridiem: useAmPm(this.hass.locale) ? \"narrow\" : false,\n      },\n    };\n\n    config.eventClick = (info) => this._handleEventClick(info);\n    config.select = (info) => this._handleSelect(info);\n    config.eventResize = (info) => this._handleEventResize(info);\n    config.eventDrop = (info) => this._handleEventDrop(info);\n\n    this.calendar = new Calendar(\n      this.shadowRoot!.getElementById(\"calendar\")!,\n      config\n    );\n\n    this.calendar!.render();\n  }\n\n  private get _events() {\n    const events: any[] = [];\n\n    for (const [i, day] of weekdays.entries()) {\n      if (!this[`_${day}`].length) {\n        continue;\n      }\n\n      this[`_${day}`].forEach((item: ScheduleDay, index: number) => {\n        let date = nextDay(new Date(), i as Day);\n        if (\n          !isSameWeek(date, new Date(), {\n            weekStartsOn: firstWeekdayIndex(this.hass.locale),\n          })\n        ) {\n          date = addDays(date, -7);\n        }\n        const start = new Date(date);\n        const start_tokens = item.from.split(\":\");\n        start.setHours(\n          parseInt(start_tokens[0]),\n          parseInt(start_tokens[1]),\n          0,\n          0\n        );\n\n        const end = new Date(date);\n        const end_tokens = item.to.split(\":\");\n        end.setHours(parseInt(end_tokens[0]), parseInt(end_tokens[1]), 0, 0);\n\n        events.push({\n          id: `${day}-${index}`,\n          start: start.toISOString(),\n          end: end.toISOString(),\n        });\n      });\n    }\n\n    return events;\n  }\n\n  private _handleSelect(info: { start: Date; end: Date }) {\n    const { start, end } = info;\n\n    const day = weekdays[start.getDay()];\n    const value = [...this[`_${day}`]];\n    const newValue = { ...this._item };\n\n    // Schedule is timezone unaware, we need to format it in local time\n    const endFormatted = formatTime24h(\n      end,\n      { ...this.hass.locale, time_zone: TimeZone.local },\n      this.hass.config\n    );\n    value.push({\n      from: formatTime24h(\n        start,\n        { ...this.hass.locale, time_zone: TimeZone.local },\n        this.hass.config\n      ),\n      to:\n        !isSameDay(start, end) || endFormatted === \"0:00\"\n          ? \"24:00\"\n          : endFormatted,\n    });\n\n    newValue[day] = value;\n\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n\n    if (!isSameDay(start, end)) {\n      this.calendar!.unselect();\n    }\n  }\n\n  private _handleEventResize(info: any) {\n    const { id, start, end } = info.event;\n\n    const [day, index] = id.split(\"-\");\n    const value = this[`_${day}`][parseInt(index)];\n    const newValue = { ...this._item };\n\n    const endFormatted = formatTime24h(end, this.hass.locale, this.hass.config);\n    newValue[day][index] = {\n      from: value.from,\n      to:\n        !isSameDay(start, end) || endFormatted === \"0:00\"\n          ? \"24:00\"\n          : endFormatted,\n    };\n\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n\n    if (!isSameDay(start, end)) {\n      this.requestUpdate(`_${day}`);\n      info.revert();\n    }\n  }\n\n  private _handleEventDrop(info: any) {\n    const { id, start, end } = info.event;\n\n    const [day, index] = id.split(\"-\");\n    const newDay = weekdays[start.getDay()];\n    const newValue = { ...this._item };\n\n    const endFormatted = formatTime24h(end, this.hass.locale, this.hass.config);\n    const event = {\n      from: formatTime24h(start, this.hass.locale, this.hass.config),\n      to:\n        !isSameDay(start, end) || endFormatted === \"0:00\"\n          ? \"24:00\"\n          : endFormatted,\n    };\n\n    if (newDay === day) {\n      newValue[day][index] = event;\n    } else {\n      newValue[day].splice(index, 1);\n      const value = [...this[`_${newDay}`]];\n      value.push(event);\n      newValue[newDay] = value;\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n\n    if (!isSameDay(start, end)) {\n      this.requestUpdate(`_${day}`);\n      info.revert();\n    }\n  }\n\n  private async _handleEventClick(info: any) {\n    const [day, index] = info.event.id.split(\"-\");\n    const item = [...this[`_${day}`]][index];\n    showScheduleBlockInfoDialog(this, {\n      block: item,\n      updateBlock: (newBlock) => this._updateBlock(day, index, newBlock),\n      deleteBlock: () => this._deleteBlock(day, index),\n    });\n  }\n\n  private _updateBlock(day, index, newBlock) {\n    const [fromH, fromM, _fromS] = newBlock.from.split(\":\");\n    newBlock.from = `${fromH}:${fromM}`;\n    const [toH, toM, _toS] = newBlock.to.split(\":\");\n    newBlock.to = `${toH}:${toM}`;\n    if (Number(toH) === 0 && Number(toM) === 0) {\n      newBlock.to = \"24:00\";\n    }\n    const newValue = { ...this._item };\n    newValue[day] = [...this._item![day]];\n    newValue[day][index] = newBlock;\n\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  private _deleteBlock(day, index) {\n    const value = [...this[`_${day}`]];\n    const newValue = { ...this._item };\n    value.splice(parseInt(index), 1);\n    newValue[day] = value;\n\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    if (!this.new && !this._item) {\n      return;\n    }\n\n    ev.stopPropagation();\n    const configValue = (ev.target as any).configValue;\n    const value = ev.detail?.value || (ev.target as any).value;\n    if (this[`_${configValue}`] === value) {\n      return;\n    }\n    const newValue = { ...this._item };\n    if (!value) {\n      delete newValue[configValue];\n    } else {\n      newValue[configValue] = value;\n    }\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .form {\n          color: var(--primary-text-color);\n        }\n\n        ha-textfield {\n          display: block;\n          margin: 8px 0;\n        }\n\n        #calendar {\n          margin: 8px 0;\n          height: 450px;\n          width: 100%;\n          -webkit-user-select: none;\n          -ms-user-select: none;\n          user-select: none;\n          --fc-border-color: var(--divider-color);\n          --fc-event-border-color: var(--divider-color);\n        }\n\n        .fc-v-event .fc-event-time {\n          white-space: inherit;\n        }\n        .fc-theme-standard .fc-scrollgrid {\n          border: 1px solid var(--divider-color);\n          border-radius: var(--mdc-shape-small, 4px);\n        }\n\n        .fc-scrollgrid-section-header td {\n          border: none;\n        }\n        :host([narrow]) .fc-scrollgrid-sync-table {\n          overflow: hidden;\n        }\n        table.fc-scrollgrid-sync-table\n          tbody\n          tr:first-child\n          .fc-daygrid-day-top {\n          padding-top: 0;\n        }\n        .fc-scroller::-webkit-scrollbar {\n          width: 0.4rem;\n          height: 0.4rem;\n        }\n        .fc-scroller::-webkit-scrollbar-thumb {\n          -webkit-border-radius: 4px;\n          border-radius: 4px;\n          background: var(--scrollbar-thumb-color);\n        }\n        .fc-scroller {\n          overflow-y: auto;\n          scrollbar-color: var(--scrollbar-thumb-color) transparent;\n          scrollbar-width: thin;\n        }\n\n        .fc-timegrid-event-short .fc-event-time:after {\n          content: \"\"; /* prevent trailing dash in half hour events since we do not have event titles */\n        }\n\n        a {\n          color: inherit !important;\n        }\n\n        th.fc-col-header-cell.fc-day {\n          background-color: var(--table-header-background-color);\n          color: var(--primary-text-color);\n          font-size: 11px;\n          font-weight: bold;\n          text-transform: uppercase;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-schedule-form\": HaScheduleForm;\n  }\n}\n"],"names":[],"sourceRoot":""}