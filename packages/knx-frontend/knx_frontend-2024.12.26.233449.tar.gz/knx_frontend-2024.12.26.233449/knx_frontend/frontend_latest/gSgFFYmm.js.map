{"version":3,"file":"gSgFFYmm.js","mappings":";;AAqBA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAZA;AC4CA;;;AAIA;;AASA;AAEA;AAGA;;;AAIA;AACA;;AAEA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAkBA;;AAEA;;AAEA;;;AAGA;AACA;AAEA;;AAEA;AAOA;;AAEA;;AAEA;;;AAGA;AACA;AAEA;;AA/CA;;AAGA;;AAEA;AACA;;;AAIA;;AAKA;;;;;AAwCA;AACA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsJA;;;ACxPA;AACA;;;;AAKA;AACA;;;;;AA1BA;;AAEA;;AAEA;AAEA;AACA;AAEA;AACA;AACA;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;AAkGA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-aliases-editor.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-file-upload.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-picture-upload.ts"],"sourcesContent":["import { LitElement, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-multi-textfield\";\n\n@customElement(\"ha-aliases-editor\")\nclass AliasesEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Array }) public aliases!: string[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  protected render() {\n    if (!this.aliases) {\n      return nothing;\n    }\n\n    return html`\n      <ha-multi-textfield\n        .hass=${this.hass}\n        .value=${this.aliases}\n        .disabled=${this.disabled}\n        .label=${this.hass!.localize(\"ui.dialogs.aliases.label\")}\n        .removeLabel=${this.hass!.localize(\"ui.dialogs.aliases.remove\")}\n        .addLabel=${this.hass!.localize(\"ui.dialogs.aliases.add\")}\n        item-index\n        @value-changed=${this._aliasesChanged}\n      >\n      </ha-multi-textfield>\n    `;\n  }\n\n  private _aliasesChanged(value) {\n    fireEvent(this, \"value-changed\", { value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-aliases-editor\": AliasesEditor;\n  }\n}\n","import \"@material/mwc-linear-progress/mwc-linear-progress\";\nimport { mdiDelete, mdiFileUpload } from \"@mdi/js\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-button\";\nimport \"./ha-icon-button\";\nimport { blankBeforePercent } from \"../common/translations/blank_before_percent\";\nimport { ensureArray } from \"../common/array/ensure-array\";\nimport { bytesToString } from \"../util/bytes-to-string\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"file-picked\": { files: File[] };\n  }\n}\n\n@customElement(\"ha-file-upload\")\nexport class HaFileUpload extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public accept!: string;\n\n  @property() public icon?: string;\n\n  @property() public label?: string;\n\n  @property() public secondary?: string;\n\n  @property() public supports?: string;\n\n  @property({ type: Object }) public value?: File | File[] | FileList | string;\n\n  @property({ type: Boolean }) public multiple = false;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public uploading = false;\n\n  @property({ type: Number }) public progress?: number;\n\n  @property({ type: Boolean, attribute: \"auto-open-file-dialog\" })\n  public autoOpenFileDialog = false;\n\n  @state() private _drag = false;\n\n  @query(\"#input\") private _input?: HTMLInputElement;\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    if (this.autoOpenFileDialog) {\n      this._openFilePicker();\n    }\n  }\n\n  public render(): TemplateResult {\n    return html`\n      ${this.uploading\n        ? html`<div class=\"container\">\n            <div class=\"row\">\n              <span class=\"header\"\n                >${this.value\n                  ? this.hass?.localize(\n                      \"ui.components.file-upload.uploading_name\",\n                      { name: this.value.toString() }\n                    )\n                  : this.hass?.localize(\n                      \"ui.components.file-upload.uploading\"\n                    )}</span\n              >\n              ${this.progress\n                ? html`<span class=\"progress\"\n                    >${this.progress}${blankBeforePercent(\n                      this.hass!.locale\n                    )}%</span\n                  >`\n                : \"\"}\n            </div>\n            <mwc-linear-progress\n              .indeterminate=${!this.progress}\n              .progress=${this.progress ? this.progress / 100 : undefined}\n            ></mwc-linear-progress>\n          </div>`\n        : html`<label\n            for=${this.value ? \"\" : \"input\"}\n            class=\"container ${classMap({\n              dragged: this._drag,\n              multiple: this.multiple,\n              value: Boolean(this.value),\n            })}\"\n            @drop=${this._handleDrop}\n            @dragenter=${this._handleDragStart}\n            @dragover=${this._handleDragStart}\n            @dragleave=${this._handleDragEnd}\n            @dragend=${this._handleDragEnd}\n            >${!this.value\n              ? html`<ha-svg-icon\n                    class=\"big-icon\"\n                    .path=${this.icon || mdiFileUpload}\n                  ></ha-svg-icon>\n                  <ha-button unelevated @click=${this._openFilePicker}>\n                    ${this.label ||\n                    this.hass?.localize(\"ui.components.file-upload.label\")}\n                  </ha-button>\n                  <span class=\"secondary\"\n                    >${this.secondary ||\n                    this.hass?.localize(\n                      \"ui.components.file-upload.secondary\"\n                    )}</span\n                  >\n                  <span class=\"supports\">${this.supports}</span>`\n              : typeof this.value === \"string\"\n                ? html`<div class=\"row\">\n                    <div class=\"value\" @click=${this._openFilePicker}>\n                      <ha-svg-icon\n                        .path=${this.icon || mdiFileUpload}\n                      ></ha-svg-icon>\n                      ${this.value}\n                    </div>\n                    <ha-icon-button\n                      @click=${this._clearValue}\n                      .label=${this.hass?.localize(\"ui.common.delete\") ||\n                      \"Delete\"}\n                      .path=${mdiDelete}\n                    ></ha-icon-button>\n                  </div>`\n                : (this.value instanceof FileList\n                    ? Array.from(this.value)\n                    : ensureArray(this.value)\n                  ).map(\n                    (file) =>\n                      html`<div class=\"row\">\n                        <div class=\"value\" @click=${this._openFilePicker}>\n                          <ha-svg-icon\n                            .path=${this.icon || mdiFileUpload}\n                          ></ha-svg-icon>\n                          ${file.name} - ${bytesToString(file.size)}\n                        </div>\n                        <ha-icon-button\n                          @click=${this._clearValue}\n                          .label=${this.hass?.localize(\"ui.common.delete\") ||\n                          \"Delete\"}\n                          .path=${mdiDelete}\n                        ></ha-icon-button>\n                      </div>`\n                  )}\n            <input\n              id=\"input\"\n              type=\"file\"\n              class=\"file\"\n              .accept=${this.accept}\n              .multiple=${this.multiple}\n              @change=${this._handleFilePicked}\n          /></label>`}\n    `;\n  }\n\n  private _openFilePicker() {\n    this._input?.click();\n  }\n\n  private _handleDrop(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    if (ev.dataTransfer?.files) {\n      fireEvent(this, \"file-picked\", {\n        files:\n          this.multiple || ev.dataTransfer.files.length === 1\n            ? Array.from(ev.dataTransfer.files)\n            : [ev.dataTransfer.files[0]],\n      });\n    }\n    this._drag = false;\n  }\n\n  private _handleDragStart(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = true;\n  }\n\n  private _handleDragEnd(ev: DragEvent) {\n    ev.preventDefault();\n    ev.stopPropagation();\n    this._drag = false;\n  }\n\n  private _handleFilePicked(ev) {\n    if (ev.target.files.length === 0) {\n      return;\n    }\n    this.value = ev.target.files;\n    fireEvent(this, \"file-picked\", { files: ev.target.files });\n  }\n\n  private _clearValue(ev: Event) {\n    ev.preventDefault();\n    this._input!.value = \"\";\n    this.value = undefined;\n    fireEvent(this, \"change\");\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n        height: 240px;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n        color: var(--disabled-text-color);\n      }\n      .container {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n        border: solid 1px\n          var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42));\n        border-radius: var(--mdc-shape-small, 4px);\n        height: 100%;\n      }\n      label.container {\n        border: dashed 1px\n          var(--mdc-text-field-idle-line-color, rgba(0, 0, 0, 0.42));\n        cursor: pointer;\n      }\n      :host([disabled]) .container {\n        border-color: var(--disabled-color);\n      }\n      label.dragged {\n        border-color: var(--primary-color);\n      }\n      .dragged:before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        background-color: var(--primary-color);\n        content: \"\";\n        opacity: var(--dark-divider-opacity);\n        pointer-events: none;\n        border-radius: var(--mdc-shape-small, 4px);\n      }\n      label.value {\n        cursor: default;\n      }\n      label.value.multiple {\n        justify-content: unset;\n        overflow: auto;\n      }\n      .highlight {\n        color: var(--primary-color);\n      }\n      .row {\n        display: flex;\n        width: 100%;\n        align-items: center;\n        justify-content: space-between;\n        padding: 0 16px;\n        box-sizing: border-box;\n      }\n      ha-button {\n        margin-bottom: 4px;\n      }\n      .supports {\n        color: var(--secondary-text-color);\n        font-size: 12px;\n      }\n      :host([disabled]) .secondary {\n        color: var(--disabled-text-color);\n      }\n      input.file {\n        display: none;\n      }\n      .value {\n        cursor: pointer;\n      }\n      .value ha-svg-icon {\n        margin-right: 8px;\n        margin-inline-end: 8px;\n        margin-inline-start: initial;\n      }\n      .big-icon {\n        --mdc-icon-size: 48px;\n        margin-bottom: 8px;\n      }\n      ha-button {\n        --mdc-button-outline-color: var(--primary-color);\n        --mdc-icon-button-size: 24px;\n      }\n      mwc-linear-progress {\n        width: 100%;\n        padding: 16px;\n        box-sizing: border-box;\n      }\n      .header {\n        font-weight: 500;\n      }\n      .progress {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-file-upload\": HaFileUpload;\n  }\n}\n","import { mdiImagePlus } from \"@mdi/js\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { haStyle } from \"../resources/styles\";\nimport { createImage, generateImageThumbnailUrl } from \"../data/image_upload\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport type { CropOptions } from \"../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { showImageCropperDialog } from \"../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-button\";\nimport \"./ha-circular-progress\";\nimport \"./ha-file-upload\";\n\n@customElement(\"ha-picture-upload\")\nexport class HaPictureUpload extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() public value: string | null = null;\n\n  @property() public label?: string;\n\n  @property() public secondary?: string;\n\n  @property() public supports?: string;\n\n  @property() public currentImageAltText?: string;\n\n  @property({ type: Boolean }) public crop = false;\n\n  @property({ attribute: false }) public cropOptions?: CropOptions;\n\n  @property({ type: Boolean }) public original = false;\n\n  @property({ type: Number }) public size = 512;\n\n  @state() private _uploading = false;\n\n  public render(): TemplateResult {\n    if (!this.value) {\n      return html`\n        <ha-file-upload\n          .hass=${this.hass}\n          .icon=${mdiImagePlus}\n          .label=${this.label ||\n          this.hass.localize(\"ui.components.picture-upload.label\")}\n          .secondary=${this.secondary}\n          .supports=${this.supports ||\n          this.hass.localize(\"ui.components.picture-upload.supported_formats\")}\n          .uploading=${this._uploading}\n          @file-picked=${this._handleFilePicked}\n          @change=${this._handleFileCleared}\n          accept=\"image/png, image/jpeg, image/gif\"\n        ></ha-file-upload>\n      `;\n    }\n    return html`<div class=\"center-vertical\">\n      <div class=\"value\">\n        <img\n          .src=${this.value}\n          alt=${this.currentImageAltText ||\n          this.hass.localize(\"ui.components.picture-upload.current_image_alt\")}\n        />\n        <div>\n          <ha-button\n            @click=${this._handleChangeClick}\n            .label=${this.hass.localize(\n              \"ui.components.picture-upload.change_picture\"\n            )}\n          >\n          </ha-button>\n        </div>\n      </div>\n    </div>`;\n  }\n\n  private _handleChangeClick() {\n    this.value = null;\n    fireEvent(this, \"change\");\n  }\n\n  private async _handleFilePicked(ev) {\n    const file = ev.detail.files[0];\n    if (this.crop) {\n      this._cropFile(file);\n    } else {\n      this._uploadFile(file);\n    }\n  }\n\n  private async _handleFileCleared() {\n    this.value = null;\n  }\n\n  private async _cropFile(file: File) {\n    if (![\"image/png\", \"image/jpeg\", \"image/gif\"].includes(file.type)) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.components.picture-upload.unsupported_format\"\n        ),\n      });\n      return;\n    }\n    showImageCropperDialog(this, {\n      file,\n      options: this.cropOptions || {\n        round: false,\n        aspectRatio: NaN,\n      },\n      croppedCallback: (croppedFile) => {\n        this._uploadFile(croppedFile);\n      },\n    });\n  }\n\n  private async _uploadFile(file: File) {\n    if (![\"image/png\", \"image/jpeg\", \"image/gif\"].includes(file.type)) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\n          \"ui.components.picture-upload.unsupported_format\"\n        ),\n      });\n      return;\n    }\n    this._uploading = true;\n    try {\n      const media = await createImage(this.hass, file);\n      this.value = generateImageThumbnailUrl(\n        media.id,\n        this.size,\n        this.original\n      );\n      fireEvent(this, \"change\");\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: err.toString(),\n      });\n    } finally {\n      this._uploading = false;\n    }\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          height: 240px;\n        }\n        ha-file-upload {\n          height: 100%;\n        }\n        .center-vertical {\n          display: flex;\n          align-items: center;\n          height: 100%;\n        }\n        .value {\n          width: 100%;\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n        }\n        img {\n          max-width: 100%;\n          max-height: 200px;\n          margin-bottom: 4px;\n          border-radius: var(--file-upload-image-border-radius);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-picture-upload\": HaPictureUpload;\n  }\n}\n"],"names":[],"sourceRoot":""}