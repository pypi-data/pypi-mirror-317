{"version":3,"file":"caKqpukN.js","mappings":";;AAuDA;;;AAGA;;;AAKA;;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AAKA;AAGA;;AAEA;;;;AAQA;;;AAQA;;AAMA;ACrFA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;AAMA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-mount-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-backup-location.ts"],"sourcesContent":["import { mdiBackupRestore, mdiFolder, mdiHarddisk, mdiPlayBox } from \"@mdi/js\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport type { SupervisorMounts } from \"../data/supervisor/mounts\";\nimport {\n  fetchSupervisorMounts,\n  SupervisorMountType,\n  SupervisorMountUsage,\n} from \"../data/supervisor/mounts\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-alert\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\n\nconst __BACKUP_DATA_DISK__ = \"/backup\";\n\n@customElement(\"ha-mount-picker\")\nclass HaMountPicker extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property() public usage?: SupervisorMountUsage;\n\n  @state() private _mounts?: SupervisorMounts;\n\n  @state() private _error?: string;\n\n  protected firstUpdated() {\n    this._getMounts();\n  }\n\n  protected render() {\n    if (this._error) {\n      return html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`;\n    }\n    if (!this._mounts) {\n      return nothing;\n    }\n    const dataDiskOption = html`<ha-list-item\n      graphic=\"icon\"\n      .value=${__BACKUP_DATA_DISK__}\n    >\n      <span>\n        ${this.hass.localize(\"ui.components.mount-picker.use_datadisk\") ||\n        \"Use data disk for backup\"}\n      </span>\n      <ha-svg-icon slot=\"graphic\" .path=${mdiHarddisk}></ha-svg-icon>\n    </ha-list-item>`;\n    return html`\n      <ha-select\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.mount-picker.mount\")\n          : this.label}\n        .value=${this._value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        @selected=${this._mountChanged}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${this.usage === SupervisorMountUsage.BACKUP &&\n        (!this._mounts.default_backup_mount ||\n          this._mounts.default_backup_mount === __BACKUP_DATA_DISK__)\n          ? dataDiskOption\n          : nothing}\n        ${this._filterMounts(this._mounts, this.usage).map(\n          (mount) =>\n            html`<ha-list-item twoline graphic=\"icon\" .value=${mount.name}>\n              <span>${mount.name}</span>\n              <span slot=\"secondary\"\n                >${mount.server}${mount.port\n                  ? `:${mount.port}`\n                  : nothing}${mount.type === SupervisorMountType.NFS\n                  ? mount.path\n                  : `:${mount.share}`}</span\n              >\n              <ha-svg-icon\n                slot=\"graphic\"\n                .path=${mount.usage === SupervisorMountUsage.MEDIA\n                  ? mdiPlayBox\n                  : mount.usage === SupervisorMountUsage.SHARE\n                    ? mdiFolder\n                    : mdiBackupRestore}\n              ></ha-svg-icon>\n            </ha-list-item>`\n        )}\n        ${this.usage === SupervisorMountUsage.BACKUP &&\n        this._mounts.default_backup_mount\n          ? dataDiskOption\n          : nothing}\n      </ha-select>\n    `;\n  }\n\n  private _filterMounts = memoizeOne(\n    (mounts: SupervisorMounts, usage: this[\"usage\"]) => {\n      let filteredMounts = mounts.mounts.filter((mount) =>\n        [SupervisorMountType.CIFS, SupervisorMountType.NFS].includes(mount.type)\n      );\n      if (usage) {\n        filteredMounts = mounts.mounts.filter((mount) => mount.usage === usage);\n      }\n      return filteredMounts.sort((mountA, mountB) => {\n        if (mountA.name === mounts.default_backup_mount) {\n          return -1;\n        }\n        if (mountB.name === mounts.default_backup_mount) {\n          return 1;\n        }\n        return caseInsensitiveStringCompare(\n          mountA.name,\n          mountB.name,\n          this.hass.locale.language\n        );\n      });\n    }\n  );\n\n  private async _getMounts() {\n    try {\n      if (isComponentLoaded(this.hass, \"hassio\")) {\n        this._mounts = await fetchSupervisorMounts(this.hass);\n        if (this.usage === SupervisorMountUsage.BACKUP && !this.value) {\n          this.value =\n            this._mounts.default_backup_mount || __BACKUP_DATA_DISK__;\n        }\n      } else {\n        this._error = this.hass.localize(\n          \"ui.components.mount-picker.error.no_supervisor\"\n        );\n      }\n    } catch (err: any) {\n      this._error = this.hass.localize(\n        \"ui.components.mount-picker.error.fetch_mounts\"\n      );\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _mountChanged(ev: Event) {\n    ev.stopPropagation();\n    const target = ev.target as HaSelect;\n    const newValue = target.value;\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-mount-picker\": HaMountPicker;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { BackupLocationSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-mount-picker\";\n\n@customElement(\"ha-selector-backup_location\")\nexport class HaBackupLocationSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: BackupLocationSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`<ha-mount-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      .helper=${this.helper}\n      .disabled=${this.disabled}\n      .required=${this.required}\n      usage=\"backup\"\n    ></ha-mount-picker>`;\n  }\n\n  static styles = css`\n    ha-mount-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-backup_location\": HaBackupLocationSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}