{"version":3,"file":"HNMHdrw8.js","mappings":";;AAmIA;;AAGA;AACA;AACA;AAEA;;AAEA;;AAIA;;;AAuNA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;ACnSA;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAQA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAoEA;AC1HA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmBA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/entity/ha-entity-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/entity/ha-entities-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-entity.ts"],"sourcesContent":["import \"../ha-list-item\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { html, LitElement } from \"lit\";\nimport type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport type { ScorableTextItem } from \"../../common/string/filter/sequence-matching\";\nimport { fuzzyFilterSort } from \"../../common/string/filter/sequence-matching\";\nimport type { ValueChangedEvent, HomeAssistant } from \"../../types\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\nimport \"../ha-icon-button\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nimport { showHelperDetailDialog } from \"../../panels/config/helpers/show-dialog-helper-detail\";\nimport { domainToName } from \"../../data/integration\";\nimport type { HelperDomain } from \"../../panels/config/helpers/const\";\nimport { isHelperDomain } from \"../../panels/config/helpers/const\";\n\ninterface HassEntityWithCachedName extends HassEntity, ScorableTextItem {\n  friendly_name: string;\n}\n\nexport type HaEntityPickerEntityFilterFunc = (entity: HassEntity) => boolean;\n\nconst CREATE_ID = \"___create-new-entity___\";\n\n@customElement(\"ha-entity-picker\")\nexport class HaEntityPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Array }) public createDomains?: string[];\n\n  /**\n   * Show entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only entities with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  /**\n   * List of allowed entities to show.\n   * @type {Array}\n   * @attr include-entities\n   */\n  @property({ type: Array, attribute: \"include-entities\" })\n  public includeEntities?: string[];\n\n  /**\n   * List of entities to be excluded.\n   * @type {Array}\n   * @attr exclude-entities\n   */\n  @property({ type: Array, attribute: \"exclude-entities\" })\n  public excludeEntities?: string[];\n\n  @property({ attribute: false })\n  public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Boolean }) public hideClearIcon = false;\n\n  @property({ attribute: \"item-label-path\" }) public itemLabelPath =\n    \"friendly_name\";\n\n  @state() private _opened = false;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  public async open() {\n    await this.updateComplete;\n    await this.comboBox?.open();\n  }\n\n  public async focus() {\n    await this.updateComplete;\n    await this.comboBox?.focus();\n  }\n\n  private _initedStates = false;\n\n  private _states: HassEntityWithCachedName[] = [];\n\n  private _rowRenderer: ComboBoxLitRenderer<HassEntityWithCachedName> = (\n    item\n  ) =>\n    html`<ha-list-item graphic=\"avatar\" .twoline=${!!item.entity_id}>\n      ${item.state\n        ? html`<state-badge\n            slot=\"graphic\"\n            .stateObj=${item}\n            .hass=${this.hass}\n          ></state-badge>`\n        : \"\"}\n      <span>${item.friendly_name}</span>\n      <span slot=\"secondary\"\n        >${item.entity_id.startsWith(CREATE_ID)\n          ? this.hass.localize(\"ui.components.entity.entity-picker.new_entity\")\n          : item.entity_id}</span\n      >\n    </ha-list-item>`;\n\n  private _getStates = memoizeOne(\n    (\n      _opened: boolean,\n      hass: this[\"hass\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      entityFilter: this[\"entityFilter\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      includeUnitOfMeasurement: this[\"includeUnitOfMeasurement\"],\n      includeEntities: this[\"includeEntities\"],\n      excludeEntities: this[\"excludeEntities\"],\n      createDomains: this[\"createDomains\"]\n    ): HassEntityWithCachedName[] => {\n      let states: HassEntityWithCachedName[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      const createItems = createDomains?.length\n        ? createDomains.map((domain) => {\n            const newFriendlyName = hass.localize(\n              \"ui.components.entity.entity-picker.create_helper\",\n              {\n                domain: isHelperDomain(domain)\n                  ? hass.localize(\n                      `ui.panel.config.helpers.types.${domain as HelperDomain}`\n                    )\n                  : domainToName(hass.localize, domain),\n              }\n            );\n\n            return {\n              entity_id: CREATE_ID + domain,\n              state: \"on\",\n              last_changed: \"\",\n              last_updated: \"\",\n              context: { id: \"\", user_id: null, parent_id: null },\n              friendly_name: newFriendlyName,\n              attributes: {\n                icon: \"mdi:plus\",\n              },\n              strings: [domain, newFriendlyName],\n            };\n          })\n        : [];\n\n      if (!entityIds.length) {\n        return [\n          {\n            entity_id: \"\",\n            state: \"\",\n            last_changed: \"\",\n            last_updated: \"\",\n            context: { id: \"\", user_id: null, parent_id: null },\n            friendly_name: this.hass!.localize(\n              \"ui.components.entity.entity-picker.no_entities\"\n            ),\n            attributes: {\n              friendly_name: this.hass!.localize(\n                \"ui.components.entity.entity-picker.no_entities\"\n              ),\n              icon: \"mdi:magnify\",\n            },\n            strings: [],\n          },\n          ...createItems,\n        ];\n      }\n\n      if (includeEntities) {\n        entityIds = entityIds.filter((entityId) =>\n          includeEntities.includes(entityId)\n        );\n      }\n\n      if (excludeEntities) {\n        entityIds = entityIds.filter(\n          (entityId) => !excludeEntities.includes(entityId)\n        );\n      }\n\n      if (includeDomains) {\n        entityIds = entityIds.filter((eid) =>\n          includeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      if (excludeDomains) {\n        entityIds = entityIds.filter(\n          (eid) => !excludeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      states = entityIds\n        .map((key) => {\n          const friendly_name = computeStateName(hass!.states[key]) || key;\n          return {\n            ...hass!.states[key],\n            friendly_name,\n            strings: [key, friendly_name],\n          };\n        })\n        .sort((entityA, entityB) =>\n          caseInsensitiveStringCompare(\n            entityA.friendly_name,\n            entityB.friendly_name,\n            this.hass.locale.language\n          )\n        );\n\n      if (includeDeviceClasses) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class))\n        );\n      }\n\n      if (includeUnitOfMeasurement) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.unit_of_measurement &&\n              includeUnitOfMeasurement.includes(\n                stateObj.attributes.unit_of_measurement\n              ))\n        );\n      }\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n\n      if (!states.length) {\n        return [\n          {\n            entity_id: \"\",\n            state: \"\",\n            last_changed: \"\",\n            last_updated: \"\",\n            context: { id: \"\", user_id: null, parent_id: null },\n            friendly_name: this.hass!.localize(\n              \"ui.components.entity.entity-picker.no_match\"\n            ),\n            attributes: {\n              friendly_name: this.hass!.localize(\n                \"ui.components.entity.entity-picker.no_match\"\n              ),\n              icon: \"mdi:magnify\",\n            },\n            strings: [],\n          },\n          ...createItems,\n        ];\n      }\n\n      if (createItems?.length) {\n        states.push(...createItems);\n      }\n\n      return states;\n    }\n  );\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"value\") ||\n      changedProps.has(\"label\") ||\n      changedProps.has(\"disabled\")\n    ) {\n      return true;\n    }\n    return !(!changedProps.has(\"_opened\") && this._opened);\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (!this._initedStates || (changedProps.has(\"_opened\") && this._opened)) {\n      this._states = this._getStates(\n        this._opened,\n        this.hass,\n        this.includeDomains,\n        this.excludeDomains,\n        this.entityFilter,\n        this.includeDeviceClasses,\n        this.includeUnitOfMeasurement,\n        this.includeEntities,\n        this.excludeEntities,\n        this.createDomains\n      );\n      if (this._initedStates) {\n        this.comboBox.filteredItems = this._states;\n      }\n      this._initedStates = true;\n    }\n\n    if (changedProps.has(\"createDomains\") && this.createDomains?.length) {\n      this.hass.loadFragmentTranslation(\"config\");\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        item-value-path=\"entity_id\"\n        .itemLabelPath=${this.itemLabelPath}\n        .hass=${this.hass}\n        .value=${this._value}\n        .label=${this.label === undefined\n          ? this.hass.localize(\"ui.components.entity.entity-picker.entity\")\n          : this.label}\n        .helper=${this.helper}\n        .allowCustomValue=${this.allowCustomEntity}\n        .filteredItems=${this._states}\n        .renderer=${this._rowRenderer}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: ValueChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: ValueChangedEvent<string | undefined>) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value?.trim();\n\n    if (newValue && newValue.startsWith(CREATE_ID)) {\n      const domain = newValue.substring(CREATE_ID.length);\n      showHelperDetailDialog(this, {\n        domain,\n        dialogClosedCallback: (item) => {\n          if (item.entityId) this._setValue(item.entityId);\n        },\n      });\n      return;\n    }\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const target = ev.target as HaComboBox;\n    const filterString = ev.detail.value.trim().toLowerCase();\n    target.filteredItems = filterString.length\n      ? fuzzyFilterSort<HassEntityWithCachedName>(filterString, this._states)\n      : this._states;\n  }\n\n  private _setValue(value: string | undefined) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n","import { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { isValidEntityId } from \"../../common/entity/valid_entity_id\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../../types\";\nimport \"./ha-entity-picker\";\nimport type { HaEntityPickerEntityFilterFunc } from \"./ha-entity-picker\";\n\n@customElement(\"ha-entities-picker\")\nclass HaEntitiesPickerLight extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property() public helper?: string;\n\n  /**\n   * Show entities from specific domains.\n   * @type {string}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only entities with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  /**\n   * List of allowed entities to show. Will ignore all other filters.\n   * @type {Array}\n   * @attr include-entities\n   */\n  @property({ type: Array, attribute: \"include-entities\" })\n  public includeEntities?: string[];\n\n  /**\n   * List of entities to be excluded.\n   * @type {Array}\n   * @attr exclude-entities\n   */\n  @property({ type: Array, attribute: \"exclude-entities\" })\n  public excludeEntities?: string[];\n\n  @property({ attribute: \"picked-entity-label\" })\n  public pickedEntityLabel?: string;\n\n  @property({ attribute: \"pick-entity-label\" }) public pickEntityLabel?: string;\n\n  @property({ attribute: false })\n  public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Array }) public createDomains?: string[];\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const currentEntities = this._currentEntities;\n    return html`\n      ${currentEntities.map(\n        (entityId) => html`\n          <div>\n            <ha-entity-picker\n              allow-custom-entity\n              .curValue=${entityId}\n              .hass=${this.hass}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeEntities=${this.includeEntities}\n              .excludeEntities=${this.excludeEntities}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .includeUnitOfMeasurement=${this.includeUnitOfMeasurement}\n              .entityFilter=${this.entityFilter}\n              .value=${entityId}\n              .label=${this.pickedEntityLabel}\n              .disabled=${this.disabled}\n              .createDomains=${this.createDomains}\n              @value-changed=${this._entityChanged}\n            ></ha-entity-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-entity-picker\n          allow-custom-entity\n          .hass=${this.hass}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeEntities=${this.includeEntities}\n          .excludeEntities=${this._excludeEntities(\n            this.value,\n            this.excludeEntities\n          )}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .includeUnitOfMeasurement=${this.includeUnitOfMeasurement}\n          .entityFilter=${this.entityFilter}\n          .label=${this.pickEntityLabel}\n          .helper=${this.helper}\n          .disabled=${this.disabled}\n          .createDomains=${this.createDomains}\n          .required=${this.required && !currentEntities.length}\n          @value-changed=${this._addEntity}\n        ></ha-entity-picker>\n      </div>\n    `;\n  }\n\n  private _excludeEntities = memoizeOne(\n    (\n      value: string[] | undefined,\n      excludeEntities: string[] | undefined\n    ): string[] | undefined => {\n      if (value === undefined) {\n        return excludeEntities;\n      }\n      return [...(excludeEntities || []), ...value];\n    }\n  );\n\n  private get _currentEntities() {\n    return this.value || [];\n  }\n\n  private async _updateEntities(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _entityChanged(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const curValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (\n      newValue === curValue ||\n      (newValue !== undefined && !isValidEntityId(newValue))\n    ) {\n      return;\n    }\n    const currentEntities = this._currentEntities;\n    if (!newValue || currentEntities.includes(newValue)) {\n      this._updateEntities(currentEntities.filter((ent) => ent !== curValue));\n      return;\n    }\n    this._updateEntities(\n      currentEntities.map((ent) => (ent === curValue ? newValue : ent))\n    );\n  }\n\n  private async _addEntity(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentEntities;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateEntities([...currentEntities, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entities-picker\": HaEntitiesPickerLight;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { PropertyValues } from \"lit\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { EntitySources } from \"../../data/entity_sources\";\nimport { fetchEntitySourcesWithCache } from \"../../data/entity_sources\";\nimport type { EntitySelector } from \"../../data/selector\";\nimport {\n  filterSelectorEntities,\n  computeCreateDomains,\n} from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../entity/ha-entities-picker\";\nimport \"../entity/ha-entity-picker\";\n\n@customElement(\"ha-selector-entity\")\nexport class HaEntitySelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: EntitySelector;\n\n  @state() private _entitySources?: EntitySources;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private _createDomains: string[] | undefined;\n\n  private _hasIntegration(selector: EntitySelector) {\n    return (\n      selector.entity?.filter &&\n      ensureArray(selector.entity.filter).some((filter) => filter.integration)\n    );\n  }\n\n  protected willUpdate(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selector\") && this.value !== undefined) {\n      if (this.selector.entity?.multiple && !Array.isArray(this.value)) {\n        this.value = [this.value];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      } else if (!this.selector.entity?.multiple && Array.isArray(this.value)) {\n        this.value = this.value[0];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      }\n    }\n  }\n\n  protected render() {\n    if (this._hasIntegration(this.selector) && !this._entitySources) {\n      return nothing;\n    }\n\n    if (!this.selector.entity?.multiple) {\n      return html`<ha-entity-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .label=${this.label}\n        .helper=${this.helper}\n        .includeEntities=${this.selector.entity?.include_entities}\n        .excludeEntities=${this.selector.entity?.exclude_entities}\n        .entityFilter=${this._filterEntities}\n        .createDomains=${this._createDomains}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        allow-custom-entity\n      ></ha-entity-picker>`;\n    }\n\n    return html`\n      ${this.label ? html`<label>${this.label}</label>` : \"\"}\n      <ha-entities-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .includeEntities=${this.selector.entity.include_entities}\n        .excludeEntities=${this.selector.entity.exclude_entities}\n        .entityFilter=${this._filterEntities}\n        .createDomains=${this._createDomains}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-entities-picker>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (\n      changedProps.has(\"selector\") &&\n      this._hasIntegration(this.selector) &&\n      !this._entitySources\n    ) {\n      fetchEntitySourcesWithCache(this.hass).then((sources) => {\n        this._entitySources = sources;\n      });\n    }\n    if (changedProps.has(\"selector\")) {\n      this._createDomains = computeCreateDomains(this.selector);\n    }\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    if (!this.selector?.entity?.filter) {\n      return true;\n    }\n    return ensureArray(this.selector.entity.filter).some((filter) =>\n      filterSelectorEntities(filter, entity, this._entitySources)\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-entity\": HaEntitySelector;\n  }\n}\n"],"names":[],"sourceRoot":""}