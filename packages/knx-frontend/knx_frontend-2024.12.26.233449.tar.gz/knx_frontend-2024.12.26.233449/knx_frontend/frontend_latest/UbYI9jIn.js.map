{"version":3,"file":"UbYI9jIn.js","mappings":";;AAyCA;;AAEA;AAGA;AAGA;;AAqTA;AACA;;;;AAIA;AACA;AACA;AACA;AAGA;AAIA;AACA;AACA;AACA;;;AAIA;AChQA;AAEA;;AASA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;;AAGA;AAGA;;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;AAIA;;;;;;;;;AAqDA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-label-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-labels-picker.ts"],"sourcesContent":["import type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { LitElement, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport type { ScorableTextItem } from \"../common/string/filter/sequence-matching\";\nimport { fuzzyFilterSort } from \"../common/string/filter/sequence-matching\";\nimport type {\n  DeviceEntityDisplayLookup,\n  DeviceRegistryEntry,\n} from \"../data/device_registry\";\nimport { getDeviceEntityDisplayLookup } from \"../data/device_registry\";\nimport type { EntityRegistryDisplayEntry } from \"../data/entity_registry\";\nimport type { LabelRegistryEntry } from \"../data/label_registry\";\nimport {\n  createLabelRegistryEntry,\n  subscribeLabelRegistry,\n} from \"../data/label_registry\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { showLabelDetailDialog } from \"../panels/config/labels/show-dialog-label-detail\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-icon-button\";\nimport \"./ha-list-item\";\nimport \"./ha-svg-icon\";\n\ntype ScorableLabelItem = ScorableTextItem & LabelRegistryEntry;\n\nconst ADD_NEW_ID = \"___ADD_NEW___\";\nconst NO_LABELS_ID = \"___NO_LABELS___\";\nconst ADD_NEW_SUGGESTION_ID = \"___ADD_NEW_SUGGESTION___\";\n\nconst rowRenderer: ComboBoxLitRenderer<LabelRegistryEntry> = (item) =>\n  html`<ha-list-item\n    graphic=\"icon\"\n    class=${classMap({ \"add-new\": item.label_id === ADD_NEW_ID })}\n  >\n    ${item.icon\n      ? html`<ha-icon slot=\"graphic\" .icon=${item.icon}></ha-icon>`\n      : nothing}\n    ${item.name}\n  </ha-list-item>`;\n\n@customElement(\"ha-label-picker\")\nexport class HaLabelPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd = false;\n\n  /**\n   * Show only labels with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no labels with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only labels with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * List of labels to be excluded.\n   * @type {Array}\n   * @attr exclude-labels\n   */\n  @property({ type: Array, attribute: \"exclude-label\" })\n  public excludeLabels?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: (entity: HassEntity) => boolean;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() private _opened?: boolean;\n\n  @state() private _labels?: LabelRegistryEntry[];\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  private _suggestion?: string;\n\n  private _init = false;\n\n  public async open() {\n    await this.updateComplete;\n    await this.comboBox?.open();\n  }\n\n  public async focus() {\n    await this.updateComplete;\n    await this.comboBox?.focus();\n  }\n\n  protected hassSubscribe(): (UnsubscribeFunc | Promise<UnsubscribeFunc>)[] {\n    return [\n      subscribeLabelRegistry(this.hass.connection, (labels) => {\n        this._labels = labels;\n      }),\n    ];\n  }\n\n  private _getLabels = memoizeOne(\n    (\n      labels: LabelRegistryEntry[],\n      areas: HomeAssistant[\"areas\"],\n      devices: DeviceRegistryEntry[],\n      entities: EntityRegistryDisplayEntry[],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"],\n      entityFilter: this[\"entityFilter\"],\n      noAdd: this[\"noAdd\"],\n      excludeLabels: this[\"excludeLabels\"]\n    ): LabelRegistryEntry[] => {\n      let deviceEntityLookup: DeviceEntityDisplayLookup = {};\n      let inputDevices: DeviceRegistryEntry[] | undefined;\n      let inputEntities: EntityRegistryDisplayEntry[] | undefined;\n\n      if (\n        includeDomains ||\n        excludeDomains ||\n        includeDeviceClasses ||\n        deviceFilter ||\n        entityFilter\n      ) {\n        deviceEntityLookup = getDeviceEntityDisplayLookup(entities);\n        inputDevices = devices;\n        inputEntities = entities.filter((entity) => entity.labels.length > 0);\n\n        if (includeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) =>\n              includeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (excludeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return true;\n            }\n            return entities.every(\n              (entity) =>\n                !excludeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (includeDeviceClasses) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return (\n                stateObj.attributes.device_class &&\n                includeDeviceClasses.includes(stateObj.attributes.device_class)\n              );\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        }\n\n        if (deviceFilter) {\n          inputDevices = inputDevices!.filter((device) =>\n            deviceFilter!(device)\n          );\n        }\n\n        if (entityFilter) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return entityFilter(stateObj);\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return entityFilter!(stateObj);\n          });\n        }\n      }\n\n      let outputLabels = labels;\n      const usedLabels = new Set<string>();\n\n      let areaIds: string[] | undefined;\n\n      if (inputDevices) {\n        areaIds = inputDevices\n          .filter((device) => device.area_id)\n          .map((device) => device.area_id!);\n\n        inputDevices.forEach((device) => {\n          device.labels.forEach((label) => usedLabels.add(label));\n        });\n      }\n\n      if (inputEntities) {\n        areaIds = (areaIds ?? []).concat(\n          inputEntities\n            .filter((entity) => entity.area_id)\n            .map((entity) => entity.area_id!)\n        );\n        inputEntities.forEach((entity) => {\n          entity.labels.forEach((label) => usedLabels.add(label));\n        });\n      }\n\n      if (areaIds) {\n        areaIds.forEach((areaId) => {\n          const area = areas[areaId];\n          area.labels.forEach((label) => usedLabels.add(label));\n        });\n      }\n\n      if (excludeLabels) {\n        outputLabels = outputLabels.filter(\n          (label) => !excludeLabels!.includes(label.label_id)\n        );\n      }\n\n      if (inputDevices || inputEntities) {\n        outputLabels = outputLabels.filter((label) =>\n          usedLabels.has(label.label_id)\n        );\n      }\n\n      if (!outputLabels.length) {\n        outputLabels = [\n          {\n            label_id: NO_LABELS_ID,\n            name: this.hass.localize(\"ui.components.label-picker.no_match\"),\n            icon: null,\n            color: null,\n            description: null,\n            created_at: 0,\n            modified_at: 0,\n          },\n        ];\n      }\n\n      return noAdd\n        ? outputLabels\n        : [\n            ...outputLabels,\n            {\n              label_id: ADD_NEW_ID,\n              name: this.hass.localize(\"ui.components.label-picker.add_new\"),\n              icon: \"mdi:plus\",\n              color: null,\n              description: null,\n              created_at: 0,\n              modified_at: 0,\n            },\n          ];\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      (!this._init && this.hass && this._labels) ||\n      (this._init && changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      const items = this._getLabels(\n        this._labels!,\n        this.hass.areas,\n        Object.values(this.hass.devices),\n        Object.values(this.hass.entities),\n        this.includeDomains,\n        this.excludeDomains,\n        this.includeDeviceClasses,\n        this.deviceFilter,\n        this.entityFilter,\n        this.noAdd,\n        this.excludeLabels\n      ).map((label) => ({\n        ...label,\n        strings: [label.label_id, label.name],\n      }));\n\n      this.comboBox.items = items;\n      this.comboBox.filteredItems = items;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .helper=${this.helper}\n        item-value-path=\"label_id\"\n        item-id-path=\"label_id\"\n        item-label-path=\"name\"\n        .value=${this._value}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.label-picker.label\")\n          : this.label}\n        .placeholder=${this.placeholder\n          ? this._labels?.find((label) => label.label_id === this.placeholder)\n              ?.name\n          : undefined}\n        .renderer=${rowRenderer}\n        @filter-changed=${this._filterChanged}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._labelChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const target = ev.target as HaComboBox;\n    const filterString = ev.detail.value;\n    if (!filterString) {\n      this.comboBox.filteredItems = this.comboBox.items;\n      return;\n    }\n\n    const filteredItems = fuzzyFilterSort<ScorableLabelItem>(\n      filterString,\n      target.items?.filter(\n        (item) => ![NO_LABELS_ID, ADD_NEW_ID].includes(item.label_id)\n      ) || []\n    );\n    if (filteredItems.length === 0) {\n      if (this.noAdd) {\n        this.comboBox.filteredItems = [\n          {\n            label_id: NO_LABELS_ID,\n            name: this.hass.localize(\"ui.components.label-picker.no_match\"),\n            icon: null,\n            color: null,\n          },\n        ] as ScorableLabelItem[];\n      } else {\n        this._suggestion = filterString;\n        this.comboBox.filteredItems = [\n          {\n            label_id: ADD_NEW_SUGGESTION_ID,\n            name: this.hass.localize(\n              \"ui.components.label-picker.add_new_sugestion\",\n              { name: this._suggestion }\n            ),\n            icon: \"mdi:plus\",\n            color: null,\n          },\n        ] as ScorableLabelItem[];\n      }\n    } else {\n      this.comboBox.filteredItems = filteredItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: ValueChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _labelChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    let newValue = ev.detail.value;\n\n    if (newValue === NO_LABELS_ID) {\n      newValue = \"\";\n      this.comboBox.setInputValue(\"\");\n      return;\n    }\n\n    if (![ADD_NEW_SUGGESTION_ID, ADD_NEW_ID].includes(newValue)) {\n      if (newValue !== this._value) {\n        this._setValue(newValue);\n      }\n      return;\n    }\n\n    (ev.target as any).value = this._value;\n\n    this.hass.loadFragmentTranslation(\"config\");\n\n    showLabelDetailDialog(this, {\n      entry: undefined,\n      suggestedName: newValue === ADD_NEW_SUGGESTION_ID ? this._suggestion : \"\",\n      createEntry: async (values) => {\n        const label = await createLabelRegistryEntry(this.hass, values);\n        const labels = [...this._labels!, label];\n        this.comboBox.filteredItems = this._getLabels(\n          labels,\n          this.hass.areas!,\n          Object.values(this.hass.devices)!,\n          Object.values(this.hass.entities)!,\n          this.includeDomains,\n          this.excludeDomains,\n          this.includeDeviceClasses,\n          this.deviceFilter,\n          this.entityFilter,\n          this.noAdd,\n          this.excludeLabels\n        );\n        await this.updateComplete;\n        await this.comboBox.updateComplete;\n        this._setValue(label.label_id);\n        return label;\n      },\n    });\n\n    this._suggestion = undefined;\n    this.comboBox.setInputValue(\"\");\n  }\n\n  private _setValue(value?: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-label-picker\": HaLabelPicker;\n  }\n}\n","import type { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport type { TemplateResult } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport memoizeOne from \"memoize-one\";\nimport { computeCssColor } from \"../common/color/compute-color\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stringCompare } from \"../common/string/compare\";\nimport type { LabelRegistryEntry } from \"../data/label_registry\";\nimport {\n  subscribeLabelRegistry,\n  updateLabelRegistryEntry,\n} from \"../data/label_registry\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport { showLabelDetailDialog } from \"../panels/config/labels/show-dialog-label-detail\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../types\";\nimport \"./chips/ha-chip-set\";\nimport \"./chips/ha-input-chip\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-label-picker\";\nimport type { HaLabelPicker } from \"./ha-label-picker\";\n\n@customElement(\"ha-labels-picker\")\nexport class HaLabelsPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public value?: string[];\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd = false;\n\n  /**\n   * Show only labels with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no labels with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only labels with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * List of labels to be excluded.\n   * @type {Array}\n   * @attr exclude-labels\n   */\n  @property({ type: Array, attribute: \"exclude-label\" })\n  public excludeLabels?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: (entity: HassEntity) => boolean;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() private _labels?: { [id: string]: LabelRegistryEntry };\n\n  @query(\"ha-label-picker\", true) public labelPicker!: HaLabelPicker;\n\n  public async open() {\n    await this.updateComplete;\n    await this.labelPicker?.open();\n  }\n\n  public async focus() {\n    await this.updateComplete;\n    await this.labelPicker?.focus();\n  }\n\n  protected hassSubscribe(): (UnsubscribeFunc | Promise<UnsubscribeFunc>)[] {\n    return [\n      subscribeLabelRegistry(this.hass.connection, (labels) => {\n        const lookUp = {};\n        labels.forEach((label) => {\n          lookUp[label.label_id] = label;\n        });\n        this._labels = lookUp;\n      }),\n    ];\n  }\n\n  private _sortedLabels = memoizeOne(\n    (\n      value: string[] | undefined,\n      labels: { [id: string]: LabelRegistryEntry } | undefined,\n      language: string\n    ) =>\n      value\n        ?.map((id) => labels?.[id])\n        .sort((a, b) => stringCompare(a?.name || \"\", b?.name || \"\", language))\n  );\n\n  protected render(): TemplateResult {\n    const labels = this._sortedLabels(\n      this.value,\n      this._labels,\n      this.hass.locale.language\n    );\n    return html`\n      ${labels?.length\n        ? html`<ha-chip-set>\n            ${repeat(\n              labels,\n              (label) => label?.label_id,\n              (label) => {\n                const color = label?.color\n                  ? computeCssColor(label.color)\n                  : undefined;\n                return html`\n                  <ha-input-chip\n                    .item=${label}\n                    @remove=${this._removeItem}\n                    @click=${this._openDetail}\n                    .label=${label?.name}\n                    selected\n                    style=${color ? `--color: ${color}` : \"\"}\n                  >\n                    ${label?.icon\n                      ? html`<ha-icon\n                          slot=\"icon\"\n                          .icon=${label.icon}\n                        ></ha-icon>`\n                      : nothing}\n                  </ha-input-chip>\n                `;\n              }\n            )}\n          </ha-chip-set>`\n        : nothing}\n      <ha-label-picker\n        .hass=${this.hass}\n        .helper=${this.helper}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.label-picker.add_label\")\n          : this.label}\n        .placeholder=${this.placeholder}\n        .excludeLabels=${this.value}\n        @value-changed=${this._labelChanged}\n      >\n      </ha-label-picker>\n    `;\n  }\n\n  private get _value() {\n    return this.value || [];\n  }\n\n  private _removeItem(ev) {\n    const label = ev.currentTarget.item;\n    this._setValue(this._value.filter((id) => id !== label.label_id));\n  }\n\n  private _openDetail(ev) {\n    const label = ev.currentTarget.item;\n    showLabelDetailDialog(this, {\n      entry: label,\n      updateEntry: async (values) => {\n        const updated = await updateLabelRegistryEntry(\n          this.hass,\n          label.label_id,\n          values\n        );\n        return updated;\n      },\n    });\n  }\n\n  private _labelChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n    if (!newValue || this._value.includes(newValue)) {\n      return;\n    }\n    this._setValue([...this._value, newValue]);\n    this.labelPicker.value = \"\";\n  }\n\n  private _setValue(value?: string[]) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n\n  static styles = css`\n    ha-chip-set {\n      margin-bottom: 8px;\n    }\n    ha-input-chip {\n      --md-input-chip-selected-container-color: var(--color, var(--grey-color));\n      --ha-input-chip-selected-container-opacity: 0.5;\n      --md-input-chip-selected-outline-width: 1px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-labels-picker\": HaLabelsPicker;\n  }\n}\n"],"names":[],"sourceRoot":""}