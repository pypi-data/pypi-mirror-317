{"version":3,"file":"95SJoYVS.js","mappings":";;;AAkCA;AACA;AACA;AACA;AACA;;;AAKA;;;AAGA;AACA;AACA;AACA;AACA;;;AAIA;;;;;AAwBA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-label.ts"],"sourcesContent":["import type { CSSResultGroup } from \"lit\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { LabelSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-labels-picker\";\n\n@customElement(\"ha-selector-label\")\nexport class HaLabelSelector extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property() public value?: string | string[];\n\n  @property() public name?: string;\n\n  @property() public label?: string;\n\n  @property() public placeholder?: string;\n\n  @property() public helper?: string;\n\n  @property({ attribute: false }) public selector!: LabelSelector;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    if (this.selector.label.multiple) {\n      return html`\n        <ha-labels-picker\n          no-add\n          .hass=${this.hass}\n          .value=${ensureArray(this.value ?? [])}\n          .disabled=${this.disabled}\n          .label=${this.label}\n          @value-changed=${this._handleChange}\n        >\n        </ha-labels-picker>\n      `;\n    }\n    return html`\n      <ha-label-picker\n        no-add\n        .hass=${this.hass}\n        .value=${this.value}\n        .disabled=${this.disabled}\n        .label=${this.label}\n        @value-changed=${this._handleChange}\n      >\n      </ha-label-picker>\n    `;\n  }\n\n  private _handleChange(ev) {\n    let value = ev.detail.value;\n    if (this.value === value) {\n      return;\n    }\n    if (\n      (value === \"\" || (Array.isArray(value) && value.length === 0)) &&\n      !this.required\n    ) {\n      value = undefined;\n    }\n\n    fireEvent(this, \"value-changed\", { value });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-labels-picker {\n        display: block;\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-label\": HaLabelSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}