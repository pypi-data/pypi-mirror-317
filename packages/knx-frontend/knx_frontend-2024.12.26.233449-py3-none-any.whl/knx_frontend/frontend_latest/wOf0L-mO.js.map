{"version":3,"file":"wOf0L-mO.js","mappings":";;AA0EA;AAIA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;;AAKA;AAGA;AACA;;AAGA;;AAGA;;AAGA;AACA;AAGA;;;;AC9CA;;AAEA;;;;AAuBA;;AAEA;AA0EA;AAEA;;;;AAoBA;;AAEA;;;;AAsBA;;AAEA;;;;;;;;;;;ADRA;AEjLA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;AAMA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-conversation-agent-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/config-flow/show-dialog-options-flow.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-conversation-agent.ts"],"sourcesContent":["import { mdiCog } from \"@mdi/js\";\nimport type { CSSResultGroup, PropertyValues } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { debounce } from \"../common/util/debounce\";\nimport type { ConfigEntry } from \"../data/config_entries\";\nimport { getConfigEntry } from \"../data/config_entries\";\nimport type { Agent } from \"../data/conversation\";\nimport { listAgents } from \"../data/conversation\";\nimport { fetchIntegrationManifest } from \"../data/integration\";\nimport { showOptionsFlowDialog } from \"../dialogs/config-flow/show-dialog-options-flow\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\nimport { getExtendedEntityRegistryEntry } from \"../data/entity_registry\";\n\nconst NONE = \"__NONE_OPTION__\";\n\n@customElement(\"ha-conversation-agent-picker\")\nexport class HaConversationAgentPicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public language?: string;\n\n  @property() public label?: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() _agents?: Agent[];\n\n  @state() private _configEntry?: ConfigEntry;\n\n  protected render() {\n    if (!this._agents) {\n      return nothing;\n    }\n    let value = this.value;\n    if (!value && this.required) {\n      // Select Home Assistant conversation agent if it supports the language\n      for (const agent of this._agents) {\n        if (\n          agent.id === \"conversation.home_assistant\" &&\n          agent.supported_languages.includes(this.language!)\n        ) {\n          value = agent.id;\n          break;\n        }\n      }\n      if (!value) {\n        // Select the first agent that supports the language\n        for (const agent of this._agents) {\n          if (\n            agent.supported_languages === \"*\" &&\n            agent.supported_languages.includes(this.language!)\n          ) {\n            value = agent.id;\n            break;\n          }\n        }\n      }\n    }\n    if (!value) {\n      value = NONE;\n    }\n\n    return html`\n      <ha-select\n        .label=${this.label ||\n        this.hass!.localize(\n          \"ui.components.coversation-agent-picker.conversation_agent\"\n        )}\n        .value=${value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${!this.required\n          ? html`<ha-list-item .value=${NONE}>\n              ${this.hass!.localize(\n                \"ui.components.coversation-agent-picker.none\"\n              )}\n            </ha-list-item>`\n          : nothing}\n        ${this._agents.map(\n          (agent) =>\n            html`<ha-list-item\n              .value=${agent.id}\n              .disabled=${agent.supported_languages !== \"*\" &&\n              agent.supported_languages.length === 0}\n            >\n              ${agent.name}\n            </ha-list-item>`\n        )}</ha-select\n      >${this._configEntry?.supports_options\n        ? html`<ha-icon-button\n            .path=${mdiCog}\n            @click=${this._openOptionsFlow}\n          ></ha-icon-button>`\n        : \"\"}\n    `;\n  }\n\n  protected willUpdate(changedProperties: PropertyValues<this>): void {\n    super.willUpdate(changedProperties);\n    if (!this.hasUpdated) {\n      this._updateAgents();\n    } else if (changedProperties.has(\"language\")) {\n      this._debouncedUpdateAgents();\n    }\n\n    if (changedProperties.has(\"value\")) {\n      this._maybeFetchConfigEntry();\n    }\n  }\n\n  private async _maybeFetchConfigEntry() {\n    if (!this.value || !(this.value in this.hass.entities)) {\n      this._configEntry = undefined;\n      return;\n    }\n    try {\n      const regEntry = await getExtendedEntityRegistryEntry(\n        this.hass,\n        this.value\n      );\n\n      if (!regEntry.config_entry_id) {\n        this._configEntry = undefined;\n        return;\n      }\n\n      this._configEntry = (\n        await getConfigEntry(this.hass, regEntry.config_entry_id)\n      ).config_entry;\n    } catch (err) {\n      this._configEntry = undefined;\n    }\n  }\n\n  private _debouncedUpdateAgents = debounce(() => this._updateAgents(), 500);\n\n  private async _updateAgents() {\n    const { agents } = await listAgents(\n      this.hass,\n      this.language,\n      this.hass.config.country || undefined\n    );\n\n    this._agents = agents;\n\n    if (!this.value) {\n      return;\n    }\n\n    const selectedAgent = agents.find((agent) => agent.id === this.value);\n\n    fireEvent(this, \"supported-languages-changed\", {\n      value: selectedAgent?.supported_languages,\n    });\n\n    if (\n      !selectedAgent ||\n      (selectedAgent.supported_languages !== \"*\" &&\n        selectedAgent.supported_languages.length === 0)\n    ) {\n      this.value = undefined;\n      fireEvent(this, \"value-changed\", { value: this.value });\n    }\n  }\n\n  private async _openOptionsFlow() {\n    if (!this._configEntry) {\n      return;\n    }\n    showOptionsFlowDialog(this, this._configEntry, {\n      manifest: await fetchIntegrationManifest(\n        this.hass,\n        this._configEntry.domain\n      ),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      ha-select {\n        width: 100%;\n      }\n      ha-icon-button {\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    const target = ev.target as HaSelect;\n    if (\n      !this.hass ||\n      target.value === \"\" ||\n      target.value === this.value ||\n      (this.value === undefined && target.value === NONE)\n    ) {\n      return;\n    }\n    this.value = target.value === NONE ? undefined : target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n    fireEvent(this, \"supported-languages-changed\", {\n      value: this._agents!.find((agent) => agent.id === this.value)\n        ?.supported_languages,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-conversation-agent-picker\": HaConversationAgentPicker;\n  }\n  interface HASSDomEvents {\n    \"supported-languages-changed\": { value: \"*\" | string[] | undefined };\n  }\n}\n","import { html } from \"lit\";\nimport type { ConfigEntry } from \"../../data/config_entries\";\nimport { domainToName } from \"../../data/integration\";\nimport {\n  createOptionsFlow,\n  deleteOptionsFlow,\n  fetchOptionsFlow,\n  handleOptionsFlowStep,\n} from \"../../data/options_flow\";\nimport type { DataEntryFlowDialogParams } from \"./show-dialog-data-entry-flow\";\nimport {\n  loadDataEntryFlowDialog,\n  showFlowDialog,\n} from \"./show-dialog-data-entry-flow\";\n\nexport const loadOptionsFlowDialog = loadDataEntryFlowDialog;\n\nexport const showOptionsFlowDialog = (\n  element: HTMLElement,\n  configEntry: ConfigEntry,\n  dialogParams?: Omit<DataEntryFlowDialogParams, \"flowConfig\">\n): void =>\n  showFlowDialog(\n    element,\n    {\n      startFlowHandler: configEntry.entry_id,\n      domain: configEntry.domain,\n      ...dialogParams,\n    },\n    {\n      flowType: \"options_flow\",\n      showDevices: false,\n      createFlow: async (hass, handler) => {\n        const [step] = await Promise.all([\n          createOptionsFlow(hass, handler),\n          hass.loadFragmentTranslation(\"config\"),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n          hass.loadBackendTranslation(\"selector\", configEntry.domain),\n        ]);\n        return step;\n      },\n      fetchFlow: async (hass, flowId) => {\n        const [step] = await Promise.all([\n          fetchOptionsFlow(hass, flowId),\n          hass.loadFragmentTranslation(\"config\"),\n          hass.loadBackendTranslation(\"options\", configEntry.domain),\n          hass.loadBackendTranslation(\"selector\", configEntry.domain),\n        ]);\n        return step;\n      },\n      handleFlowStep: handleOptionsFlowStep,\n      deleteFlow: deleteOptionsFlow,\n\n      renderAbortDescription(hass, step) {\n        const description = hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.abort.${step.reason}`,\n          step.description_placeholders\n        );\n\n        return description\n          ? html`\n              <ha-markdown\n                breaks\n                allowsvg\n                .content=${description}\n              ></ha-markdown>\n            `\n          : step.reason;\n      },\n\n      renderShowFormStepHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.title`,\n            step.description_placeholders\n          ) || hass.localize(`ui.dialogs.options_flow.form.header`)\n        );\n      },\n\n      renderShowFormStepDescription(hass, step) {\n        const description = hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderShowFormStepFieldLabel(hass, step, field, options) {\n        if (field.type === \"expandable\") {\n          return hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.sections.${field.name}.name`\n          );\n        }\n\n        const prefix = options?.path?.[0] ? `sections.${options.path[0]}.` : \"\";\n\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.${prefix}data.${field.name}`\n          ) || field.name\n        );\n      },\n\n      renderShowFormStepFieldHelper(hass, step, field, options) {\n        if (field.type === \"expandable\") {\n          return hass.localize(\n            `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.sections.${field.name}.description`\n          );\n        }\n\n        const prefix = options?.path?.[0] ? `sections.${options.path[0]}.` : \"\";\n\n        const description = hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.${prefix}data_description.${field.name}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`<ha-markdown breaks .content=${description}></ha-markdown>`\n          : \"\";\n      },\n\n      renderShowFormStepFieldError(hass, step, error) {\n        return (\n          hass.localize(\n            `component.${step.translation_domain || configEntry.domain}.options.error.${error}`,\n            step.description_placeholders\n          ) || error\n        );\n      },\n\n      renderShowFormStepFieldLocalizeValue(hass, _step, key) {\n        return hass.localize(`component.${configEntry.domain}.selector.${key}`);\n      },\n\n      renderShowFormStepSubmitButton(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.submit`\n          ) ||\n          hass.localize(\n            `ui.panel.config.integrations.config_flow.${\n              step.last_step === false ? \"next\" : \"submit\"\n            }`\n          )\n        );\n      },\n\n      renderExternalStepHeader(_hass, _step) {\n        return \"\";\n      },\n\n      renderExternalStepDescription(_hass, _step) {\n        return \"\";\n      },\n\n      renderCreateEntryDescription(hass, _step) {\n        return html`\n          <p>${hass.localize(`ui.dialogs.options_flow.success.description`)}</p>\n        `;\n      },\n\n      renderShowFormProgressHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderShowFormProgressDescription(hass, step) {\n        const description = hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.progress.${step.progress_action}`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuHeader(hass, step) {\n        return (\n          hass.localize(\n            `component.${configEntry.domain}.options.step.${step.step_id}.title`\n          ) || hass.localize(`component.${configEntry.domain}.title`)\n        );\n      },\n\n      renderMenuDescription(hass, step) {\n        const description = hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.description`,\n          step.description_placeholders\n        );\n        return description\n          ? html`\n              <ha-markdown\n                allowsvg\n                breaks\n                .content=${description}\n              ></ha-markdown>\n            `\n          : \"\";\n      },\n\n      renderMenuOption(hass, step, option) {\n        return hass.localize(\n          `component.${step.translation_domain || configEntry.domain}.options.step.${step.step_id}.menu_options.${option}`,\n          step.description_placeholders\n        );\n      },\n\n      renderLoadingDescription(hass, reason) {\n        return (\n          hass.localize(`component.${configEntry.domain}.options.loading`) ||\n          (reason === \"loading_flow\" || reason === \"loading_step\"\n            ? hass.localize(`ui.dialogs.options_flow.loading.${reason}`, {\n                integration: domainToName(hass.localize, configEntry.domain),\n              })\n            : \"\")\n        );\n      },\n    }\n  );\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { ConversationAgentSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-conversation-agent-picker\";\n\n@customElement(\"ha-selector-conversation_agent\")\nexport class HaConversationAgentSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: ConversationAgentSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ attribute: false }) public context?: {\n    language?: string;\n  };\n\n  protected render() {\n    return html`<ha-conversation-agent-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .language=${this.selector.conversation_agent?.language ||\n      this.context?.language}\n      .label=${this.label}\n      .helper=${this.helper}\n      .disabled=${this.disabled}\n      .required=${this.required}\n    ></ha-conversation-agent-picker>`;\n  }\n\n  static styles = css`\n    ha-conversation-agent-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-conversation_agent\": HaConversationAgentSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}