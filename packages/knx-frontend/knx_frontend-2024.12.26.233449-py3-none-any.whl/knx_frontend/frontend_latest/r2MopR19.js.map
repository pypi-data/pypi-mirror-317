{"version":3,"file":"r2MopR19.js","mappings":";;AA2CA;;AAEA;AACA;AAGA;;AA8RA;AACA;;;;AAIA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;;;AAIA;;;ACnRA;AACA;;;AAQA;;AAIA;;;AAIA;;AAIA;;AAEA;;;AAIA;AACA;AACA;AACA;;;;;;AAQA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;;;AAIA;AACA;;AAEA;AACA;;;;AAIA;;;;AAMA;;;AAKA;AACA;AACA;;;;AAIA;AACA;;;;AAIA;AACA;;AAEA;;;AAMA;;;;;;;;;AA4EA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floor-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/panels/config/areas/dialog-area-registry-detail.ts"],"sourcesContent":["import type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport type { ScorableTextItem } from \"../common/string/filter/sequence-matching\";\nimport { fuzzyFilterSort } from \"../common/string/filter/sequence-matching\";\nimport type { AreaRegistryEntry } from \"../data/area_registry\";\nimport { updateAreaRegistryEntry } from \"../data/area_registry\";\nimport type {\n  DeviceEntityDisplayLookup,\n  DeviceRegistryEntry,\n} from \"../data/device_registry\";\nimport { getDeviceEntityDisplayLookup } from \"../data/device_registry\";\nimport type { EntityRegistryDisplayEntry } from \"../data/entity_registry\";\nimport type { FloorRegistryEntry } from \"../data/floor_registry\";\nimport {\n  createFloorRegistryEntry,\n  getFloorAreaLookup,\n} from \"../data/floor_registry\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { showFloorRegistryDetailDialog } from \"../panels/config/areas/show-dialog-floor-registry-detail\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-floor-icon\";\nimport \"./ha-icon-button\";\nimport \"./ha-list-item\";\n\ntype ScorableFloorRegistryEntry = ScorableTextItem & FloorRegistryEntry;\n\nconst ADD_NEW_ID = \"___ADD_NEW___\";\nconst NO_FLOORS_ID = \"___NO_FLOORS___\";\nconst ADD_NEW_SUGGESTION_ID = \"___ADD_NEW_SUGGESTION___\";\n\nconst rowRenderer: ComboBoxLitRenderer<FloorRegistryEntry> = (item) =>\n  html`<ha-list-item\n    graphic=\"icon\"\n    class=${classMap({ \"add-new\": item.floor_id === ADD_NEW_ID })}\n  >\n    <ha-floor-icon slot=\"graphic\" .floor=${item}></ha-floor-icon>\n    ${item.name}\n  </ha-list-item>`;\n\n@customElement(\"ha-floor-picker\")\nexport class HaFloorPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd = false;\n\n  /**\n   * Show only floors with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no floors with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only floors with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * List of floors to be excluded.\n   * @type {Array}\n   * @attr exclude-floors\n   */\n  @property({ type: Array, attribute: \"exclude-floor\" })\n  public excludeFloors?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: (entity: HassEntity) => boolean;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() private _opened?: boolean;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  private _suggestion?: string;\n\n  private _init = false;\n\n  public async open() {\n    await this.updateComplete;\n    await this.comboBox?.open();\n  }\n\n  public async focus() {\n    await this.updateComplete;\n    await this.comboBox?.focus();\n  }\n\n  private _getFloors = memoizeOne(\n    (\n      floors: FloorRegistryEntry[],\n      areas: AreaRegistryEntry[],\n      devices: DeviceRegistryEntry[],\n      entities: EntityRegistryDisplayEntry[],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"],\n      entityFilter: this[\"entityFilter\"],\n      noAdd: this[\"noAdd\"],\n      excludeFloors: this[\"excludeFloors\"]\n    ): FloorRegistryEntry[] => {\n      let deviceEntityLookup: DeviceEntityDisplayLookup = {};\n      let inputDevices: DeviceRegistryEntry[] | undefined;\n      let inputEntities: EntityRegistryDisplayEntry[] | undefined;\n\n      if (\n        includeDomains ||\n        excludeDomains ||\n        includeDeviceClasses ||\n        deviceFilter ||\n        entityFilter\n      ) {\n        deviceEntityLookup = getDeviceEntityDisplayLookup(entities);\n        inputDevices = devices;\n        inputEntities = entities.filter((entity) => entity.area_id);\n\n        if (includeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) =>\n              includeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (excludeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return true;\n            }\n            return entities.every(\n              (entity) =>\n                !excludeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (includeDeviceClasses) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return (\n                stateObj.attributes.device_class &&\n                includeDeviceClasses.includes(stateObj.attributes.device_class)\n              );\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        }\n\n        if (deviceFilter) {\n          inputDevices = inputDevices!.filter((device) =>\n            deviceFilter!(device)\n          );\n        }\n\n        if (entityFilter) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return entityFilter(stateObj);\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return entityFilter!(stateObj);\n          });\n        }\n      }\n\n      let outputFloors = floors;\n\n      let areaIds: string[] | undefined;\n\n      if (inputDevices) {\n        areaIds = inputDevices\n          .filter((device) => device.area_id)\n          .map((device) => device.area_id!);\n      }\n\n      if (inputEntities) {\n        areaIds = (areaIds ?? []).concat(\n          inputEntities\n            .filter((entity) => entity.area_id)\n            .map((entity) => entity.area_id!)\n        );\n      }\n\n      if (areaIds) {\n        const floorAreaLookup = getFloorAreaLookup(areas);\n        outputFloors = outputFloors.filter((floor) =>\n          floorAreaLookup[floor.floor_id]?.some((area) =>\n            areaIds!.includes(area.area_id)\n          )\n        );\n      }\n\n      if (excludeFloors) {\n        outputFloors = outputFloors.filter(\n          (floor) => !excludeFloors!.includes(floor.floor_id)\n        );\n      }\n\n      if (!outputFloors.length) {\n        outputFloors = [\n          {\n            floor_id: NO_FLOORS_ID,\n            name: this.hass.localize(\"ui.components.floor-picker.no_floors\"),\n            icon: null,\n            level: null,\n            aliases: [],\n            created_at: 0,\n            modified_at: 0,\n          },\n        ];\n      }\n\n      return noAdd\n        ? outputFloors\n        : [\n            ...outputFloors,\n            {\n              floor_id: ADD_NEW_ID,\n              name: this.hass.localize(\"ui.components.floor-picker.add_new\"),\n              icon: \"mdi:plus\",\n              level: null,\n              aliases: [],\n              created_at: 0,\n              modified_at: 0,\n            },\n          ];\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      (!this._init && this.hass) ||\n      (this._init && changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      const floors = this._getFloors(\n        Object.values(this.hass.floors),\n        Object.values(this.hass.areas),\n        Object.values(this.hass.devices),\n        Object.values(this.hass.entities),\n        this.includeDomains,\n        this.excludeDomains,\n        this.includeDeviceClasses,\n        this.deviceFilter,\n        this.entityFilter,\n        this.noAdd,\n        this.excludeFloors\n      ).map((floor) => ({\n        ...floor,\n        strings: [floor.floor_id, floor.name, ...floor.aliases],\n      }));\n      this.comboBox.items = floors;\n      this.comboBox.filteredItems = floors;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .helper=${this.helper}\n        item-value-path=\"floor_id\"\n        item-id-path=\"floor_id\"\n        item-label-path=\"name\"\n        .value=${this._value}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.floor-picker.floor\")\n          : this.label}\n        .placeholder=${this.placeholder\n          ? this.hass.floors[this.placeholder]?.name\n          : undefined}\n        .renderer=${rowRenderer}\n        @filter-changed=${this._filterChanged}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._floorChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const target = ev.target as HaComboBox;\n    const filterString = ev.detail.value;\n    if (!filterString) {\n      this.comboBox.filteredItems = this.comboBox.items;\n      return;\n    }\n\n    const filteredItems = fuzzyFilterSort<ScorableFloorRegistryEntry>(\n      filterString,\n      target.items?.filter(\n        (item) => ![NO_FLOORS_ID, ADD_NEW_ID].includes(item.label_id)\n      ) || []\n    );\n    if (filteredItems.length === 0) {\n      if (this.noAdd) {\n        this.comboBox.filteredItems = [\n          {\n            floor_id: NO_FLOORS_ID,\n            name: this.hass.localize(\"ui.components.floor-picker.no_match\"),\n            icon: null,\n            level: null,\n            aliases: [],\n            created_at: 0,\n            modified_at: 0,\n          },\n        ] as FloorRegistryEntry[];\n      } else {\n        this._suggestion = filterString;\n        this.comboBox.filteredItems = [\n          {\n            floor_id: ADD_NEW_SUGGESTION_ID,\n            name: this.hass.localize(\n              \"ui.components.floor-picker.add_new_sugestion\",\n              { name: this._suggestion }\n            ),\n            icon: \"mdi:plus\",\n            level: null,\n            aliases: [],\n            created_at: 0,\n            modified_at: 0,\n          },\n        ] as FloorRegistryEntry[];\n      }\n    } else {\n      this.comboBox.filteredItems = filteredItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: ValueChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _floorChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    let newValue = ev.detail.value;\n\n    if (newValue === NO_FLOORS_ID) {\n      newValue = \"\";\n      this.comboBox.setInputValue(\"\");\n      return;\n    }\n\n    if (![ADD_NEW_SUGGESTION_ID, ADD_NEW_ID].includes(newValue)) {\n      if (newValue !== this._value) {\n        this._setValue(newValue);\n      }\n      return;\n    }\n\n    (ev.target as any).value = this._value;\n\n    this.hass.loadFragmentTranslation(\"config\");\n\n    showFloorRegistryDetailDialog(this, {\n      suggestedName: newValue === ADD_NEW_SUGGESTION_ID ? this._suggestion : \"\",\n      createEntry: async (values, addedAreas) => {\n        try {\n          const floor = await createFloorRegistryEntry(this.hass, values);\n          addedAreas.forEach((areaId) => {\n            updateAreaRegistryEntry(this.hass, areaId, {\n              floor_id: floor.floor_id,\n            });\n          });\n          const floors = [...Object.values(this.hass.floors), floor];\n          this.comboBox.filteredItems = this._getFloors(\n            floors,\n            Object.values(this.hass.areas)!,\n            Object.values(this.hass.devices)!,\n            Object.values(this.hass.entities)!,\n            this.includeDomains,\n            this.excludeDomains,\n            this.includeDeviceClasses,\n            this.deviceFilter,\n            this.entityFilter,\n            this.noAdd,\n            this.excludeFloors\n          );\n          await this.updateComplete;\n          await this.comboBox.updateComplete;\n          this._setValue(floor.floor_id);\n        } catch (err: any) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\n              \"ui.components.floor-picker.failed_create_floor\"\n            ),\n            text: err.message,\n          });\n        }\n      },\n    });\n\n    this._suggestion = undefined;\n    this.comboBox.setInputValue(\"\");\n  }\n\n  private _setValue(value?: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floor-picker\": HaFloorPicker;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport type { CSSResultGroup } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-aliases-editor\";\nimport { createCloseHeading } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-picture-upload\";\nimport type { HaPictureUpload } from \"../../../components/ha-picture-upload\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-floor-picker\";\nimport \"../../../components/ha-textfield\";\nimport \"../../../components/ha-labels-picker\";\nimport type { AreaRegistryEntryMutableParams } from \"../../../data/area_registry\";\nimport type { CropOptions } from \"../../../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../../../types\";\nimport type { AreaRegistryDetailDialogParams } from \"./show-dialog-area-registry-detail\";\n\nconst cropOptions: CropOptions = {\n  round: false,\n  type: \"image/jpeg\",\n  quality: 0.75,\n  aspectRatio: 1.78,\n};\n\nclass DialogAreaDetail extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _name!: string;\n\n  @state() private _aliases!: string[];\n\n  @state() private _labels!: string[];\n\n  @state() private _picture!: string | null;\n\n  @state() private _icon!: string | null;\n\n  @state() private _floor!: string | null;\n\n  @state() private _error?: string;\n\n  @state() private _params?: AreaRegistryDetailDialogParams;\n\n  @state() private _submitting?: boolean;\n\n  public async showDialog(\n    params: AreaRegistryDetailDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._name = this._params.entry\n      ? this._params.entry.name\n      : this._params.suggestedName || \"\";\n    this._aliases = this._params.entry ? this._params.entry.aliases : [];\n    this._labels = this._params.entry ? this._params.entry.labels : [];\n    this._picture = this._params.entry?.picture || null;\n    this._icon = this._params.entry?.icon || null;\n    this._floor = this._params.entry?.floor_id || null;\n    await this.updateComplete;\n  }\n\n  public closeDialog(): void {\n    this._error = \"\";\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    const entry = this._params.entry;\n    const nameInvalid = !this._isNameValid();\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          entry\n            ? this.hass.localize(\"ui.panel.config.areas.editor.update_area\")\n            : this.hass.localize(\"ui.panel.config.areas.editor.create_area\")\n        )}\n      >\n        <div>\n          ${this._error\n            ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n            : \"\"}\n          <div class=\"form\">\n            ${entry\n              ? html`\n                  <ha-settings-row>\n                    <span slot=\"heading\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.areas.editor.area_id\"\n                      )}\n                    </span>\n                    <span slot=\"description\"> ${entry.area_id} </span>\n                  </ha-settings-row>\n                `\n              : nothing}\n\n            <ha-textfield\n              .value=${this._name}\n              @input=${this._nameChanged}\n              .label=${this.hass.localize(\"ui.panel.config.areas.editor.name\")}\n              .validationMessage=${this.hass.localize(\n                \"ui.panel.config.areas.editor.name_required\"\n              )}\n              required\n              dialogInitialFocus\n            ></ha-textfield>\n\n            <ha-icon-picker\n              .hass=${this.hass}\n              .value=${this._icon}\n              @value-changed=${this._iconChanged}\n              .label=${this.hass.localize(\"ui.panel.config.areas.editor.icon\")}\n            ></ha-icon-picker>\n\n            <ha-floor-picker\n              .hass=${this.hass}\n              .value=${this._floor}\n              @value-changed=${this._floorChanged}\n              .label=${this.hass.localize(\"ui.panel.config.areas.editor.floor\")}\n            ></ha-floor-picker>\n\n            <ha-labels-picker\n              .hass=${this.hass}\n              .value=${this._labels}\n              @value-changed=${this._labelsChanged}\n            ></ha-labels-picker>\n\n            <ha-picture-upload\n              .hass=${this.hass}\n              .value=${this._picture}\n              crop\n              .cropOptions=${cropOptions}\n              @change=${this._pictureChanged}\n            ></ha-picture-upload>\n\n            <h3 class=\"header\">\n              ${this.hass.localize(\n                \"ui.panel.config.areas.editor.aliases_section\"\n              )}\n            </h3>\n\n            <p class=\"description\">\n              ${this.hass.localize(\n                \"ui.panel.config.areas.editor.aliases_description\"\n              )}\n            </p>\n            <ha-aliases-editor\n              .hass=${this.hass}\n              .aliases=${this._aliases}\n              @value-changed=${this._aliasesChanged}\n            ></ha-aliases-editor>\n          </div>\n        </div>\n        <mwc-button slot=\"secondaryAction\" @click=${this.closeDialog}>\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </mwc-button>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._updateEntry}\n          .disabled=${nameInvalid || this._submitting}\n        >\n          ${entry\n            ? this.hass.localize(\"ui.common.save\")\n            : this.hass.localize(\"ui.common.add\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _isNameValid() {\n    return this._name.trim() !== \"\";\n  }\n\n  private _nameChanged(ev) {\n    this._error = undefined;\n    this._name = ev.target.value;\n  }\n\n  private _floorChanged(ev) {\n    this._error = undefined;\n    this._floor = ev.detail.value;\n  }\n\n  private _iconChanged(ev) {\n    this._error = undefined;\n    this._icon = ev.detail.value;\n  }\n\n  private _labelsChanged(ev) {\n    this._error = undefined;\n    this._labels = ev.detail.value;\n  }\n\n  private _pictureChanged(ev: ValueChangedEvent<string | null>) {\n    this._error = undefined;\n    this._picture = (ev.target as HaPictureUpload).value;\n  }\n\n  private async _updateEntry() {\n    const create = !this._params!.entry;\n    this._submitting = true;\n    try {\n      const values: AreaRegistryEntryMutableParams = {\n        name: this._name.trim(),\n        picture: this._picture || (create ? undefined : null),\n        icon: this._icon || (create ? undefined : null),\n        floor_id: this._floor || (create ? undefined : null),\n        labels: this._labels || null,\n        aliases: this._aliases,\n      };\n      if (create) {\n        await this._params!.createEntry!(values);\n      } else {\n        await this._params!.updateEntry!(values);\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      this._error =\n        err.message ||\n        this.hass.localize(\"ui.panel.config.areas.editor.unknown_error\");\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _aliasesChanged(ev: CustomEvent): void {\n    this._aliases = ev.detail.value;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-textfield,\n        ha-icon-picker,\n        ha-floor-picker,\n        ha-labels-picker,\n        ha-picture-upload {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-area-registry-detail\": DialogAreaDetail;\n  }\n}\n\ncustomElements.define(\"dialog-area-registry-detail\", DialogAreaDetail);\n"],"names":[],"sourceRoot":""}