{"version":3,"file":"pI0SeZxw.js","mappings":";;AAoDA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAKA;;;;;;;;AA+CA;;;;;;;;;;;;;;;;;;;;;;;;;;ACtEA;ACcA;AAGA;;AAEA;AACA;AACA;AACA;;;AAGA;AAKA;;AAEA;;AAEA;AACA;;;;;;AAMA;AACA;AAOA;;;;;AAKA;;AAEA;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA;AC7LA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-button-menu.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-check-list-item.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-form/ha-form-multi_select.ts","webpack://knx-frontend/mwc-check-list-item-base.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"BOTTOM_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @property({ type: Boolean, attribute: \"no-anchor\" }) public noAnchor = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (mainWindow.document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this.noAnchor ? null : this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { css } from \"lit\";\nimport { CheckListItemBase } from \"@material/mwc-list/mwc-check-list-item-base\";\nimport { styles as controlStyles } from \"@material/mwc-list/mwc-control-list-item.css\";\nimport { styles } from \"@material/mwc-list/mwc-list-item.css\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-check-list-item\")\nexport class HaCheckListItem extends CheckListItemBase {\n  async onChange(event) {\n    super.onChange(event);\n    fireEvent(this, event.type);\n  }\n\n  static override styles = [\n    styles,\n    controlStyles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n\n      :host([graphic=\"avatar\"]) .mdc-deprecated-list-item__graphic,\n      :host([graphic=\"medium\"]) .mdc-deprecated-list-item__graphic,\n      :host([graphic=\"large\"]) .mdc-deprecated-list-item__graphic,\n      :host([graphic=\"control\"]) .mdc-deprecated-list-item__graphic {\n        margin-inline-end: var(--mdc-list-item-graphic-margin, 16px);\n        margin-inline-start: 0px;\n        direction: var(--direction);\n      }\n      .mdc-deprecated-list-item__meta {\n        flex-shrink: 0;\n        direction: var(--direction);\n        margin-inline-start: auto;\n        margin-inline-end: 0;\n      }\n      .mdc-deprecated-list-item__graphic {\n        margin-top: var(--check-list-item-graphic-margin-top);\n      }\n      :host([graphic=\"icon\"]) .mdc-deprecated-list-item__graphic {\n        margin-inline-start: 0;\n        margin-inline-end: var(--mdc-list-item-graphic-margin, 32px);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-check-list-item\": HaCheckListItem;\n  }\n}\n","import { mdiMenuDown, mdiMenuUp } from \"@mdi/js\";\nimport type { CSSResultGroup, PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../ha-button-menu\";\nimport \"../ha-check-list-item\";\nimport type { HaCheckListItem } from \"../ha-check-list-item\";\nimport \"../ha-checkbox\";\nimport type { HaCheckbox } from \"../ha-checkbox\";\nimport \"../ha-formfield\";\nimport \"../ha-svg-icon\";\nimport \"../ha-textfield\";\nimport type {\n  HaFormElement,\n  HaFormMultiSelectData,\n  HaFormMultiSelectSchema,\n} from \"./types\";\n\nfunction optionValue(item: string | string[]): string {\n  return Array.isArray(item) ? item[0] : item;\n}\n\nfunction optionLabel(item: string | string[]): string {\n  return Array.isArray(item) ? item[1] || item[0] : item;\n}\n\nconst SHOW_ALL_ENTRIES_LIMIT = 6;\n\n@customElement(\"ha-form-multi_select\")\nexport class HaFormMultiSelect extends LitElement implements HaFormElement {\n  @property({ attribute: false }) public schema!: HaFormMultiSelectSchema;\n\n  @property({ attribute: false }) public data!: HaFormMultiSelectData;\n\n  @property() public label!: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _opened = false;\n\n  @query(\"ha-button-menu\") private _input?: HTMLElement;\n\n  public focus(): void {\n    if (this._input) {\n      this._input.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    const options = Array.isArray(this.schema.options)\n      ? this.schema.options\n      : Object.entries(this.schema.options);\n    const data = this.data || [];\n\n    // We will just render all checkboxes.\n    if (options.length < SHOW_ALL_ENTRIES_LIMIT) {\n      return html`<div>\n        ${this.label}${options.map((item: string | [string, string]) => {\n          const value = optionValue(item);\n          return html`\n            <ha-formfield .label=${optionLabel(item)}>\n              <ha-checkbox\n                .checked=${data.includes(value)}\n                .value=${value}\n                .disabled=${this.disabled}\n                @change=${this._valueChanged}\n              ></ha-checkbox>\n            </ha-formfield>\n          `;\n        })}\n      </div> `;\n    }\n\n    return html`\n      <ha-button-menu\n        .disabled=${this.disabled}\n        fixed\n        @opened=${this._handleOpen}\n        @closed=${this._handleClose}\n        multi\n        activatable\n      >\n        <ha-textfield\n          slot=\"trigger\"\n          .label=${this.label}\n          .value=${data\n            .map(\n              (value) =>\n                optionLabel(options.find((v) => optionValue(v) === value)) ||\n                value\n            )\n            .join(\", \")}\n          .disabled=${this.disabled}\n          tabindex=\"-1\"\n        ></ha-textfield>\n        <ha-svg-icon\n          slot=\"trigger\"\n          .path=${this._opened ? mdiMenuUp : mdiMenuDown}\n        ></ha-svg-icon>\n        ${options.map((item: string | [string, string]) => {\n          const value = optionValue(item);\n          const selected = data.includes(value);\n          return html`<ha-check-list-item\n            left\n            .selected=${selected}\n            .activated=${selected}\n            @request-selected=${this._selectedChanged}\n            .value=${value}\n            .disabled=${this.disabled}\n          >\n            ${optionLabel(item)}\n          </ha-check-list-item>`;\n        })}\n      </ha-button-menu>\n    `;\n  }\n\n  protected firstUpdated() {\n    this.updateComplete.then(() => {\n      const { formElement, mdcRoot } =\n        this.shadowRoot?.querySelector(\"ha-textfield\") || ({} as any);\n      if (formElement) {\n        formElement.style.textOverflow = \"ellipsis\";\n      }\n      if (mdcRoot) {\n        mdcRoot.style.cursor = \"pointer\";\n      }\n    });\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    if (changedProps.has(\"schema\")) {\n      this.toggleAttribute(\n        \"own-margin\",\n        Object.keys(this.schema.options).length >= SHOW_ALL_ENTRIES_LIMIT &&\n          !!this.schema.required\n      );\n    }\n  }\n\n  private _selectedChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (ev.detail.source === \"property\") {\n      return;\n    }\n    this._handleValueChanged(\n      (ev.target as HaCheckListItem).value,\n      ev.detail.selected\n    );\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const { value, checked } = ev.target as HaCheckbox;\n    this._handleValueChanged(value, checked);\n  }\n\n  private _handleValueChanged(value, checked: boolean): void {\n    let newValue: string[];\n\n    if (checked) {\n      if (!this.data) {\n        newValue = [value];\n      } else if (this.data.includes(value)) {\n        return;\n      } else {\n        newValue = [...this.data, value];\n      }\n    } else {\n      if (!this.data.includes(value)) {\n        return;\n      }\n      newValue = this.data.filter((v) => v !== value);\n    }\n\n    fireEvent(this, \"value-changed\", {\n      value: newValue,\n    });\n  }\n\n  private _handleOpen(ev: Event): void {\n    ev.stopPropagation();\n    this._opened = true;\n    this.toggleAttribute(\"opened\", true);\n  }\n\n  private _handleClose(ev: Event): void {\n    ev.stopPropagation();\n    this._opened = false;\n    this.toggleAttribute(\"opened\", false);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host([own-margin]) {\n        margin-bottom: 5px;\n      }\n      ha-button-menu {\n        display: block;\n        cursor: pointer;\n      }\n      ha-formfield {\n        display: block;\n        padding-right: 16px;\n        padding-inline-end: 16px;\n        padding-inline-start: initial;\n        direction: var(--direction);\n      }\n      ha-textfield {\n        display: block;\n        pointer-events: none;\n      }\n      ha-svg-icon {\n        color: var(--input-dropdown-icon-color);\n        position: absolute;\n        right: 1em;\n        top: 1em;\n        cursor: pointer;\n        inset-inline-end: 1em;\n        inset-inline-start: initial;\n        direction: var(--direction);\n      }\n      :host([opened]) ha-svg-icon {\n        color: var(--primary-color);\n      }\n      :host([opened]) ha-button-menu {\n        --mdc-text-field-idle-line-color: var(--input-hover-line-color);\n        --mdc-text-field-label-ink-color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-form-multi_select\": HaFormMultiSelect;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport '@material/mwc-checkbox/mwc-checkbox.js';\n\nimport {Checkbox} from '@material/mwc-checkbox/mwc-checkbox.js';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {GraphicType, ListItemBase} from './mwc-list-item-base.js';\n\nexport class CheckListItemBase extends ListItemBase {\n  @query('slot') protected override slotElement!: HTMLSlotElement|null;\n  @query('mwc-checkbox') protected checkboxElement!: Checkbox;\n\n  @property({type: Boolean}) left = false;\n  @property({type: String, reflect: true})\n  override graphic: GraphicType = 'control';\n\n  override render() {\n    const checkboxClasses = {\n      'mdc-deprecated-list-item__graphic': this.left,\n      'mdc-deprecated-list-item__meta': !this.left,\n    };\n\n    const text = this.renderText();\n    const graphic = this.graphic && this.graphic !== 'control' && !this.left ?\n        this.renderGraphic() :\n        html``;\n    const meta = this.hasMeta && this.left ? this.renderMeta() : html``;\n    const ripple = this.renderRipple();\n\n    return html`\n      ${ripple}\n      ${graphic}\n      ${this.left ? '' : text}\n      <span class=${classMap(checkboxClasses)}>\n        <mwc-checkbox\n            reducedTouchTarget\n            tabindex=${this.tabindex}\n            .checked=${this.selected}\n            ?disabled=${this.disabled}\n            @change=${this.onChange}>\n        </mwc-checkbox>\n      </span>\n      ${this.left ? text : ''}\n      ${meta}`;\n  }\n\n  protected async onChange(evt: Event) {\n    const checkbox = evt.target as Checkbox;\n    const changeFromProp = this.selected === checkbox.checked;\n\n    if (!changeFromProp) {\n      this._skipPropRequest = true;\n      this.selected = checkbox.checked;\n      await this.updateComplete;\n      this._skipPropRequest = false;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}