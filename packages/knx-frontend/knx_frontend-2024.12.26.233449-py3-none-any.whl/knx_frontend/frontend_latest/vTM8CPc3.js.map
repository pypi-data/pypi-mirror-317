{"version":3,"file":"vTM8CPc3.js","mappings":";AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAMA;;ACDA;AAEA;AACA;AACA;AACA;AACA;;;;AAIA;AAEA;;AAGA;AAGA;;;AAKA;;;;AAuDA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-tts-voice.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-tts-voice-picker.ts"],"sourcesContent":["import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { TTSVoiceSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-tts-voice-picker\";\n\n@customElement(\"ha-selector-tts_voice\")\nexport class HaTTSVoiceSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: TTSVoiceSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ attribute: false }) public context?: {\n    language?: string;\n    engineId?: string;\n  };\n\n  protected render() {\n    return html`<ha-tts-voice-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      .helper=${this.helper}\n      .language=${this.selector.tts_voice?.language || this.context?.language}\n      .engineId=${this.selector.tts_voice?.engineId || this.context?.engineId}\n      .disabled=${this.disabled}\n      .required=${this.required}\n    ></ha-tts-voice-picker>`;\n  }\n\n  static styles = css`\n    ha-tts-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-tts_voice\": HaTTSVoiceSelector;\n  }\n}\n","import type { CSSResultGroup, PropertyValues } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { debounce } from \"../common/util/debounce\";\nimport type { TTSVoice } from \"../data/tts\";\nimport { listTTSVoices } from \"../data/tts\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-list-item\";\nimport \"./ha-select\";\nimport type { HaSelect } from \"./ha-select\";\n\nconst NONE = \"__NONE_OPTION__\";\n\n@customElement(\"ha-tts-voice-picker\")\nexport class HaTTSVoicePicker extends LitElement {\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public engineId?: string;\n\n  @property() public language?: string;\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() _voices?: TTSVoice[] | null;\n\n  @query(\"ha-select\") private _select?: HaSelect;\n\n  protected render() {\n    if (!this._voices) {\n      return nothing;\n    }\n    const value =\n      this.value ?? (this.required ? this._voices[0]?.voice_id : NONE);\n    return html`\n      <ha-select\n        .label=${this.label ||\n        this.hass!.localize(\"ui.components.tts-voice-picker.voice\")}\n        .value=${value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @selected=${this._changed}\n        @closed=${stopPropagation}\n        fixedMenuPosition\n        naturalMenuWidth\n      >\n        ${!this.required\n          ? html`<ha-list-item .value=${NONE}>\n              ${this.hass!.localize(\"ui.components.tts-voice-picker.none\")}\n            </ha-list-item>`\n          : nothing}\n        ${this._voices.map(\n          (voice) =>\n            html`<ha-list-item .value=${voice.voice_id}>\n              ${voice.name}\n            </ha-list-item>`\n        )}\n      </ha-select>\n    `;\n  }\n\n  protected willUpdate(changedProperties: PropertyValues<this>): void {\n    super.willUpdate(changedProperties);\n    if (!this.hasUpdated) {\n      this._updateVoices();\n    } else if (\n      changedProperties.has(\"language\") ||\n      changedProperties.has(\"engineId\")\n    ) {\n      this._debouncedUpdateVoices();\n    }\n  }\n\n  private _debouncedUpdateVoices = debounce(() => this._updateVoices(), 500);\n\n  private async _updateVoices() {\n    if (!this.engineId || !this.language) {\n      this._voices = undefined;\n      return;\n    }\n    this._voices = (\n      await listTTSVoices(this.hass, this.engineId, this.language)\n    ).voices;\n\n    if (!this.value) {\n      return;\n    }\n\n    if (\n      !this._voices ||\n      !this._voices.find((voice) => voice.voice_id === this.value)\n    ) {\n      this.value = undefined;\n      fireEvent(this, \"value-changed\", { value: this.value });\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues<this>) {\n    super.updated(changedProperties);\n    if (\n      changedProperties.has(\"_voices\") &&\n      this._select?.value !== this.value\n    ) {\n      this._select?.layoutOptions();\n      fireEvent(this, \"value-changed\", { value: this._select?.value });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-select {\n        width: 100%;\n      }\n    `;\n  }\n\n  private _changed(ev): void {\n    const target = ev.target as HaSelect;\n    if (\n      !this.hass ||\n      target.value === \"\" ||\n      target.value === this.value ||\n      (this.value === undefined && target.value === NONE)\n    ) {\n      return;\n    }\n    this.value = target.value === NONE ? undefined : target.value;\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-tts-voice-picker\": HaTTSVoicePicker;\n  }\n}\n"],"names":[],"sourceRoot":""}