{"version":3,"file":"m8HSi9RU.js","mappings":";;AAiDA;AACA;;;;AAOA;AACA;;;AAGA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;;;;AAIA;;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;AAMA;AACA;;AAEA;;AAEA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;ACxEA;AAmBA;AAkBA;AAoDA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;;;AAGA;AAEA;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://knx-frontend/./src/dialogs/knx-telegram-info-dialog.ts","webpack://knx-frontend/./src/views/group_monitor.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport { LitElement, nothing, html, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport type { HomeAssistant } from \"@ha/types\";\nimport { createCloseHeading } from \"@ha/components/ha-dialog\";\n\nimport type { KNX } from \"../types/knx\";\nimport type { TelegramDict } from \"../types/websocket\";\nimport { TelegramDictFormatter } from \"../utils/format\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"next-telegram\": undefined;\n    \"previous-telegram\": undefined;\n    \"dialog-close\": undefined;\n  }\n}\n\n@customElement(\"knx-telegram-info-dialog\")\nclass TelegramInfoDialog extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public knx!: KNX;\n\n  @property({ attribute: false }) public index?: number;\n\n  @property({ attribute: false }) public telegram?: TelegramDict;\n\n  @property({ attribute: false }) public disableNext = false;\n\n  @property({ attribute: false }) public disablePrevious = false;\n\n  public closeDialog() {\n    this.telegram = undefined;\n    this.index = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName }, { bubbles: false });\n  }\n\n  protected render() {\n    if (this.telegram == null) {\n      this.closeDialog();\n      return nothing;\n    }\n    return html`<ha-dialog\n      open\n      @closed=${this.closeDialog}\n      .heading=${createCloseHeading(\n        this.hass,\n        this.knx.localize(\"group_monitor_telegram\") + \" \" + this.index,\n      )}\n    >\n      <div class=\"content\">\n        <div class=\"row\">\n          <div>${TelegramDictFormatter.dateWithMilliseconds(this.telegram)}</div>\n          <div>${this.knx.localize(this.telegram.direction)}</div>\n        </div>\n        <div class=\"section\">\n          <h4>${this.knx.localize(\"group_monitor_source\")}</h4>\n          <div class=\"row-inline\">\n            <div>${this.telegram.source}</div>\n            <div>${this.telegram.source_name}</div>\n          </div>\n        </div>\n        <div class=\"section\">\n          <h4>${this.knx.localize(\"group_monitor_destination\")}</h4>\n          <div class=\"row-inline\">\n            <div>${this.telegram.destination}</div>\n            <div>${this.telegram.destination_name}</div>\n          </div>\n        </div>\n        <div class=\"section\">\n          <h4>${this.knx.localize(\"group_monitor_message\")}</h4>\n          <div class=\"row\">\n            <div>${this.telegram.telegramtype}</div>\n            <div><code>${TelegramDictFormatter.dptNameNumber(this.telegram)}</code></div>\n          </div>\n          ${this.telegram.payload != null\n            ? html` <div class=\"row\">\n                <div>${this.knx.localize(\"group_monitor_payload\")}</div>\n                <div><code>${TelegramDictFormatter.payload(this.telegram)}</code></div>\n              </div>`\n            : nothing}\n          ${this.telegram.value != null\n            ? html` <div class=\"row\">\n                <div>${this.knx.localize(\"group_monitor_value\")}</div>\n                <pre><code>${TelegramDictFormatter.valueWithUnit(this.telegram)}</code></pre>\n              </div>`\n            : nothing}\n        </div>\n      </div>\n      <mwc-button\n        slot=\"secondaryAction\"\n        @click=${this.previousTelegram}\n        .disabled=${this.disablePrevious}\n      >\n        ${this.hass.localize(\"ui.common.previous\")}\n      </mwc-button>\n      <mwc-button slot=\"primaryAction\" @click=${this.nextTelegram} .disabled=${this.disableNext}>\n        ${this.hass.localize(\"ui.common.next\")}\n      </mwc-button>\n    </ha-dialog>`;\n  }\n\n  private nextTelegram() {\n    fireEvent(this, \"next-telegram\");\n  }\n\n  private previousTelegram() {\n    fireEvent(this, \"previous-telegram\");\n  }\n\n  static get styles() {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --vertical-align-dialog: center;\n          --dialog-z-index: 20;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* When in fullscreen dialog should be attached to top */\n          ha-dialog {\n            --dialog-surface-margin-top: 0px;\n          }\n        }\n        @media all and (min-width: 600px) and (min-height: 501px) {\n          /* Set the dialog to a fixed size, so it doesnt jump when the content changes size */\n          ha-dialog {\n            --mdc-dialog-min-width: 580px;\n            --mdc-dialog-max-width: 580px;\n            --mdc-dialog-min-height: 70%;\n            --mdc-dialog-max-height: 70%;\n          }\n        }\n\n        .content {\n          display: flex;\n          flex-direction: column;\n          outline: none;\n          flex: 1;\n        }\n\n        h4 {\n          margin-top: 24px;\n          margin-bottom: 12px;\n          border-bottom: 1px solid var(--divider-color);\n          color: var(--secondary-text-color);\n        }\n\n        .section > div {\n          margin-bottom: 12px;\n        }\n        .row {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          flex-wrap: wrap;\n        }\n\n        .row-inline {\n          display: flex;\n          flex-direction: row;\n          gap: 10px;\n        }\n\n        pre {\n          margin-top: 0;\n          margin-bottom: 0;\n        }\n\n        mwc-button {\n          user-select: none;\n          -webkit-user-select: none;\n          -moz-user-select: none;\n          -ms-user-select: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-telegram-info-dialog\": TelegramInfoDialog;\n  }\n}\n","import type { CSSResultGroup, TemplateResult } from \"lit\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\n\nimport { mdiPause, mdiFastForward } from \"@mdi/js\";\nimport memoize from \"memoize-one\";\n\nimport \"@ha/layouts/hass-loading-screen\";\nimport \"@ha/layouts/hass-tabs-subpage-data-table\";\nimport type { HASSDomEvent } from \"@ha/common/dom/fire_event\";\nimport { computeRTLDirection } from \"@ha/common/util/compute_rtl\";\nimport { navigate } from \"@ha/common/navigate\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n  RowClickedEvent,\n} from \"@ha/components/data-table/ha-data-table\";\nimport \"@ha/components/ha-icon-button\";\nimport { haStyle } from \"@ha/resources/styles\";\nimport type { HomeAssistant, Route } from \"@ha/types\";\nimport type { PageNavigation } from \"@ha/layouts/hass-tabs-subpage\";\nimport { subscribeKnxTelegrams, getGroupMonitorInfo } from \"../services/websocket.service\";\nimport type { KNX } from \"../types/knx\";\nimport type { TelegramDict } from \"../types/websocket\";\nimport { TelegramDictFormatter } from \"../utils/format\";\nimport \"../dialogs/knx-telegram-info-dialog\";\nimport { KNXLogger } from \"../tools/knx-logger\";\n\nconst logger = new KNXLogger(\"group_monitor\");\n\n@customElement(\"knx-group-monitor\")\nexport class KNXGroupMonitor extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public knx!: KNX;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Object }) public route?: Route;\n\n  @property({ type: Array, reflect: false }) public tabs!: PageNavigation[];\n\n  @state() private projectLoaded = false;\n\n  @state() private subscribed?: () => void;\n\n  @state() private telegrams: TelegramDict[] = [];\n\n  @state() private rows: DataTableRowData[] = [];\n\n  @state() private _dialogIndex: number | null = null;\n\n  @state() private _pause: boolean = false;\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this.subscribed) {\n      this.subscribed();\n      this.subscribed = undefined;\n    }\n  }\n\n  protected async firstUpdated() {\n    if (!this.subscribed) {\n      getGroupMonitorInfo(this.hass)\n        .then((groupMonitorInfo) => {\n          this.projectLoaded = groupMonitorInfo.project_loaded;\n          this.telegrams = groupMonitorInfo.recent_telegrams;\n          this.rows = this.telegrams.map((telegram, index) => this._telegramToRow(telegram, index));\n        })\n        .catch((err) => {\n          logger.error(\"getGroupMonitorInfo\", err);\n          navigate(\"/knx/error\", { replace: true, data: err });\n        });\n      this.subscribed = await subscribeKnxTelegrams(this.hass, (message) => {\n        this.telegram_callback(message);\n        this.requestUpdate();\n      });\n    }\n  }\n\n  private _columns = memoize(\n    (narrow, projectLoaded, _language): DataTableColumnContainer<DataTableRowData> => ({\n      index: {\n        showNarrow: false,\n        title: \"#\",\n        sortable: true,\n        direction: \"desc\",\n        type: \"numeric\",\n        minWidth: \"68px\", // 5 digits\n        maxWidth: \"68px\",\n      },\n      timestamp: {\n        showNarrow: false,\n        filterable: true,\n        sortable: true,\n        title: this.knx.localize(\"group_monitor_time\"),\n        minWidth: \"110px\",\n        maxWidth: \"110px\",\n      },\n      sourceAddress: {\n        showNarrow: true,\n        filterable: true,\n        sortable: true,\n        title: this.knx.localize(\"group_monitor_source\"),\n        flex: 2,\n        minWidth: \"0\", // prevent horizontal scroll on very narrow screens\n        template: (row) =>\n          projectLoaded\n            ? html`<div>${row.sourceAddress}</div>\n                <div>${row.sourceText}</div>`\n            : row.sourceAddress,\n      },\n      sourceText: {\n        hidden: true,\n        filterable: true,\n        sortable: true,\n        title: this.knx.localize(\"group_monitor_source\"),\n      },\n      destinationAddress: {\n        showNarrow: true,\n        sortable: true,\n        filterable: true,\n        title: this.knx.localize(\"group_monitor_destination\"),\n        flex: 2,\n        minWidth: \"0\", // prevent horizontal scroll on very narrow screens\n        template: (row) =>\n          projectLoaded\n            ? html`<div>${row.destinationAddress}</div>\n                <div>${row.destinationText}</div>`\n            : row.destinationAddress,\n      },\n      destinationText: {\n        showNarrow: true,\n        hidden: true,\n        sortable: true,\n        filterable: true,\n        title: this.knx.localize(\"group_monitor_destination\"),\n      },\n      type: {\n        showNarrow: false,\n        title: this.knx.localize(\"group_monitor_type\"),\n        filterable: true,\n        minWidth: \"155px\", // 155px suits for \"GroupValueResponse\"\n        maxWidth: \"155px\",\n        template: (row) =>\n          html`<div>${row.type}</div>\n            <div>${row.direction}</div>`,\n      },\n      payload: {\n        showNarrow: false,\n        hidden: narrow && projectLoaded,\n        title: this.knx.localize(\"group_monitor_payload\"),\n        filterable: true,\n        type: \"numeric\",\n        minWidth: \"105px\",\n        maxWidth: \"105px\",\n      },\n      value: {\n        showNarrow: true,\n        hidden: !projectLoaded,\n        title: this.knx.localize(\"group_monitor_value\"),\n        filterable: true,\n        flex: 1,\n        minWidth: \"0\", // prevent horizontal scroll on very narrow screens\n      },\n    }),\n  );\n\n  protected telegram_callback(telegram: TelegramDict): void {\n    this.telegrams.push(telegram);\n    if (this._pause) return;\n    const rows = [...this.rows];\n    rows.push(this._telegramToRow(telegram, rows.length));\n    this.rows = rows;\n  }\n\n  protected _telegramToRow(telegram: TelegramDict, index: number): DataTableRowData {\n    const value = TelegramDictFormatter.valueWithUnit(telegram);\n    const payload = TelegramDictFormatter.payload(telegram);\n    return {\n      index: index,\n      destinationAddress: telegram.destination,\n      destinationText: telegram.destination_name,\n      direction: this.knx.localize(telegram.direction),\n      payload: payload,\n      sourceAddress: telegram.source,\n      sourceText: telegram.source_name,\n      timestamp: TelegramDictFormatter.timeWithMilliseconds(telegram),\n      type: telegram.telegramtype,\n      value: !this.narrow\n        ? value\n        : value || payload || (telegram.telegramtype === \"GroupValueRead\" ? \"GroupRead\" : \"\"),\n    };\n  }\n\n  protected render(): TemplateResult | void {\n    if (this.subscribed === undefined) {\n      return html` <hass-loading-screen\n        .message=${this.knx.localize(\"group_monitor_waiting_to_connect\")}\n      >\n      </hass-loading-screen>`;\n    }\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow!}\n        .route=${this.route!}\n        .tabs=${this.tabs}\n        .localizeFunc=${this.knx.localize}\n        .columns=${this._columns(this.narrow, this.projectLoaded, this.hass.language)}\n        .noDataText=${this.knx.localize(\"group_monitor_connected_waiting_telegrams\")}\n        .data=${this.rows}\n        .hasFab=${false}\n        .searchLabel=${this.hass.localize(\"ui.components.data-table.search\")}\n        .dir=${computeRTLDirection(this.hass)}\n        id=\"index\"\n        .clickable=${true}\n        @row-click=${this._rowClicked}\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          .label=${this._pause ? \"Resume\" : \"Pause\"}\n          .path=${this._pause ? mdiFastForward : mdiPause}\n          @click=${this._togglePause}\n        ></ha-icon-button>\n      </hass-tabs-subpage-data-table>\n      ${this._dialogIndex !== null ? this._renderTelegramInfoDialog(this._dialogIndex) : nothing}\n    `;\n  }\n\n  private _togglePause(): void {\n    this._pause = !this._pause;\n    if (!this._pause) {\n      const currentRowCount = this.rows.length;\n      const pauseTelegrams = this.telegrams.slice(currentRowCount);\n      this.rows = this.rows.concat(\n        pauseTelegrams.map((telegram, index) =>\n          this._telegramToRow(telegram, currentRowCount + index),\n        ),\n      );\n    }\n  }\n\n  private _renderTelegramInfoDialog(index: number): TemplateResult {\n    return html` <knx-telegram-info-dialog\n      .hass=${this.hass}\n      .knx=${this.knx}\n      .telegram=${this.telegrams[index]}\n      .index=${index}\n      .disableNext=${index! + 1 >= this.telegrams.length}\n      .disablePrevious=${index <= 0}\n      @next-telegram=${this._dialogNext}\n      @previous-telegram=${this._dialogPrevious}\n      @dialog-closed=${this._dialogClosed}\n    ></knx-telegram-info-dialog>`;\n  }\n\n  private async _rowClicked(ev: HASSDomEvent<RowClickedEvent>): Promise<void> {\n    const telegramIndex: number = Number(ev.detail.id);\n    this._dialogIndex = telegramIndex;\n  }\n\n  private _dialogNext(): void {\n    this._dialogIndex = this._dialogIndex! + 1;\n  }\n\n  private _dialogPrevious(): void {\n    this._dialogIndex = this._dialogIndex! - 1;\n  }\n\n  private _dialogClosed(): void {\n    this._dialogIndex = null;\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-group-monitor\": KNXGroupMonitor;\n  }\n}\n"],"names":[],"sourceRoot":""}