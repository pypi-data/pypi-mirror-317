{"version":3,"file":"WC7lZh3i.js","mappings":";AAkCA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;;;AC6NA;;AAOA;;AAGA;;AAKA;AAGA;;;;;AAOA;;AAIA;;AAIA;;AAIA;;;;AAQA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwRA;;;;;ACrjBA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AAIA;AACA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;AAsGA;;ACvIA;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-labeled-slider.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-control-slider.ts","webpack://knx-frontend/./homeassistant-frontend/src/dialogs/more-info/components/lights/light-color-temp-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-color-temp.ts"],"sourcesContent":["import type { CSSResultGroup } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon\";\nimport \"./ha-input-helper-text\";\nimport \"./ha-slider\";\n\n@customElement(\"ha-labeled-slider\")\nclass HaLabeledSlider extends LitElement {\n  @property({ type: Boolean }) public labeled = false;\n\n  @property() public caption?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ type: Number }) public min = 0;\n\n  @property({ type: Number }) public max = 100;\n\n  @property({ type: Number }) public step = 1;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public extra = false;\n\n  @property() public icon?: string;\n\n  @property({ type: Number }) public value?: number;\n\n  protected render() {\n    return html`\n      <div class=\"title\">${this._getTitle()}</div>\n      <div class=\"extra-container\"><slot name=\"extra\"></slot></div>\n      <div class=\"slider-container\">\n        ${this.icon ? html`<ha-icon icon=${this.icon}></ha-icon>` : nothing}\n        <ha-slider\n          .min=${this.min}\n          .max=${this.max}\n          .step=${this.step}\n          .labeled=${this.labeled}\n          .disabled=${this.disabled}\n          .value=${this.value}\n          @change=${this._inputChanged}\n        ></ha-slider>\n      </div>\n      ${this.helper\n        ? html`<ha-input-helper-text> ${this.helper} </ha-input-helper-text>`\n        : nothing}\n    `;\n  }\n\n  private _getTitle(): string {\n    return `${this.caption}${this.caption && this.required ? \" *\" : \"\"}`;\n  }\n\n  private _inputChanged(ev) {\n    fireEvent(this, \"value-changed\", {\n      value: Number((ev.target as any).value),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n\n      .title {\n        margin: 5px 0 8px;\n        color: var(--primary-text-color);\n      }\n\n      .slider-container {\n        display: flex;\n      }\n\n      ha-icon {\n        margin-top: 8px;\n        color: var(--secondary-text-color);\n      }\n\n      ha-slider {\n        flex-grow: 1;\n        background-image: var(--ha-slider-background);\n        border-radius: 4px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-labeled-slider\": HaLabeledSlider;\n  }\n}\n","import { DIRECTION_ALL, Manager, Pan, Tap } from \"@egjs/hammerjs\";\nimport type { CSSResultGroup, PropertyValues, TemplateResult } from \"lit\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport type { FrontendLocaleData } from \"../data/translation\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { blankBeforeUnit } from \"../common/translations/blank_before_unit\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"slider-moved\": { value?: number };\n  }\n}\n\nconst A11Y_KEY_CODES = new Set([\n  \"ArrowRight\",\n  \"ArrowUp\",\n  \"ArrowLeft\",\n  \"ArrowDown\",\n  \"PageUp\",\n  \"PageDown\",\n  \"Home\",\n  \"End\",\n]);\n\ntype TooltipPosition = \"top\" | \"bottom\" | \"left\" | \"right\";\n\ntype TooltipMode = \"never\" | \"always\" | \"interaction\";\n\ntype SliderMode = \"start\" | \"end\" | \"cursor\";\n\n@customElement(\"ha-control-slider\")\nexport class HaControlSlider extends LitElement {\n  @property({ attribute: false }) public locale?: FrontendLocaleData;\n\n  @property({ type: Boolean, reflect: true })\n  public disabled = false;\n\n  @property()\n  public mode?: SliderMode = \"start\";\n\n  @property({ type: Boolean, reflect: true })\n  public vertical = false;\n\n  @property({ type: Boolean, attribute: \"show-handle\" })\n  public showHandle = false;\n\n  @property({ type: Boolean, attribute: \"inverted\" })\n  public inverted = false;\n\n  @property({ attribute: \"tooltip-position\" })\n  public tooltipPosition?: TooltipPosition;\n\n  @property()\n  public unit?: string;\n\n  @property({ attribute: \"tooltip-mode\" })\n  public tooltipMode: TooltipMode = \"interaction\";\n\n  @property({ attribute: \"touch-action\" })\n  public touchAction?: string;\n\n  @property({ type: Number })\n  public value?: number;\n\n  @property({ type: Number })\n  public step = 1;\n\n  @property({ type: Number })\n  public min = 0;\n\n  @property({ type: Number })\n  public max = 100;\n\n  @state()\n  public pressed = false;\n\n  @state()\n  public tooltipVisible = false;\n\n  private _mc?: HammerManager;\n\n  valueToPercentage(value: number) {\n    const percentage =\n      (this.boundedValue(value) - this.min) / (this.max - this.min);\n    return this.inverted ? 1 - percentage : percentage;\n  }\n\n  percentageToValue(percentage: number) {\n    return (\n      (this.max - this.min) * (this.inverted ? 1 - percentage : percentage) +\n      this.min\n    );\n  }\n\n  steppedValue(value: number) {\n    return Math.round(value / this.step) * this.step;\n  }\n\n  boundedValue(value: number) {\n    return Math.min(Math.max(value, this.min), this.max);\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    this.setupListeners();\n    this.setAttribute(\"role\", \"slider\");\n    if (!this.hasAttribute(\"tabindex\")) {\n      this.setAttribute(\"tabindex\", \"0\");\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    if (changedProps.has(\"value\")) {\n      const valuenow = this.steppedValue(this.value ?? 0);\n      this.setAttribute(\"aria-valuenow\", valuenow.toString());\n      this.setAttribute(\"aria-valuetext\", this._formatValue(valuenow));\n    }\n    if (changedProps.has(\"min\")) {\n      this.setAttribute(\"aria-valuemin\", this.min.toString());\n    }\n    if (changedProps.has(\"max\")) {\n      this.setAttribute(\"aria-valuemax\", this.max.toString());\n    }\n    if (changedProps.has(\"vertical\")) {\n      const orientation = this.vertical ? \"vertical\" : \"horizontal\";\n      this.setAttribute(\"aria-orientation\", orientation);\n    }\n  }\n\n  connectedCallback(): void {\n    super.connectedCallback();\n    this.setupListeners();\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.destroyListeners();\n  }\n\n  @query(\"#slider\")\n  private slider;\n\n  setupListeners() {\n    if (this.slider && !this._mc) {\n      this._mc = new Manager(this.slider, {\n        touchAction: this.touchAction ?? (this.vertical ? \"pan-x\" : \"pan-y\"),\n      });\n      this._mc.add(\n        new Pan({\n          threshold: 10,\n          direction: DIRECTION_ALL,\n          enable: true,\n        })\n      );\n\n      this._mc.add(new Tap({ event: \"singletap\" }));\n\n      let savedValue;\n      this._mc.on(\"panstart\", () => {\n        if (this.disabled) return;\n        this.pressed = true;\n        this._showTooltip();\n        savedValue = this.value;\n      });\n      this._mc.on(\"pancancel\", () => {\n        if (this.disabled) return;\n        this.pressed = false;\n        this._hideTooltip();\n        this.value = savedValue;\n      });\n      this._mc.on(\"panmove\", (e) => {\n        if (this.disabled) return;\n        const percentage = this._getPercentageFromEvent(e);\n        this.value = this.percentageToValue(percentage);\n        const value = this.steppedValue(this.value);\n        fireEvent(this, \"slider-moved\", { value });\n      });\n      this._mc.on(\"panend\", (e) => {\n        if (this.disabled) return;\n        this.pressed = false;\n        this._hideTooltip();\n        const percentage = this._getPercentageFromEvent(e);\n        this.value = this.steppedValue(this.percentageToValue(percentage));\n        fireEvent(this, \"slider-moved\", { value: undefined });\n        fireEvent(this, \"value-changed\", { value: this.value });\n      });\n\n      this._mc.on(\"singletap\", (e) => {\n        if (this.disabled) return;\n        const percentage = this._getPercentageFromEvent(e);\n        this.value = this.steppedValue(this.percentageToValue(percentage));\n        fireEvent(this, \"value-changed\", { value: this.value });\n      });\n\n      this.addEventListener(\"keydown\", this._handleKeyDown);\n      this.addEventListener(\"keyup\", this._handleKeyUp);\n    }\n  }\n\n  destroyListeners() {\n    if (this._mc) {\n      this._mc.destroy();\n      this._mc = undefined;\n    }\n    this.removeEventListener(\"keydown\", this._handleKeyDown);\n    this.removeEventListener(\"keyup\", this._handleKeyUp);\n  }\n\n  private get _tenPercentStep() {\n    return Math.max(this.step, (this.max - this.min) / 10);\n  }\n\n  _showTooltip() {\n    if (this._tooltipTimeout != null) window.clearTimeout(this._tooltipTimeout);\n    this.tooltipVisible = true;\n  }\n\n  _hideTooltip(delay?: number) {\n    if (!delay) {\n      this.tooltipVisible = false;\n      return;\n    }\n    this._tooltipTimeout = window.setTimeout(() => {\n      this.tooltipVisible = false;\n    }, delay);\n  }\n\n  _handleKeyDown(e: KeyboardEvent) {\n    if (!A11Y_KEY_CODES.has(e.code)) return;\n    e.preventDefault();\n    switch (e.code) {\n      case \"ArrowRight\":\n      case \"ArrowUp\":\n        this.value = this.boundedValue((this.value ?? 0) + this.step);\n        break;\n      case \"ArrowLeft\":\n      case \"ArrowDown\":\n        this.value = this.boundedValue((this.value ?? 0) - this.step);\n        break;\n      case \"PageUp\":\n        this.value = this.steppedValue(\n          this.boundedValue((this.value ?? 0) + this._tenPercentStep)\n        );\n        break;\n      case \"PageDown\":\n        this.value = this.steppedValue(\n          this.boundedValue((this.value ?? 0) - this._tenPercentStep)\n        );\n        break;\n      case \"Home\":\n        this.value = this.min;\n        break;\n      case \"End\":\n        this.value = this.max;\n        break;\n    }\n    this._showTooltip();\n    fireEvent(this, \"slider-moved\", { value: this.value });\n  }\n\n  private _tooltipTimeout?: number;\n\n  _handleKeyUp(e: KeyboardEvent) {\n    if (!A11Y_KEY_CODES.has(e.code)) return;\n    e.preventDefault();\n    this._hideTooltip(500);\n    fireEvent(this, \"value-changed\", { value: this.value });\n  }\n\n  private _getPercentageFromEvent = (e: HammerInput) => {\n    if (this.vertical) {\n      const y = e.center.y;\n      const offset = e.target.getBoundingClientRect().top;\n      const total = e.target.clientHeight;\n      return Math.max(Math.min(1, 1 - (y - offset) / total), 0);\n    }\n    const x = e.center.x;\n    const offset = e.target.getBoundingClientRect().left;\n    const total = e.target.clientWidth;\n    return Math.max(Math.min(1, (x - offset) / total), 0);\n  };\n\n  private _formatValue(value: number) {\n    const formattedValue = formatNumber(value, this.locale);\n\n    const formattedUnit = this.unit\n      ? `${blankBeforeUnit(this.unit, this.locale)}${this.unit}`\n      : \"\";\n\n    return `${formattedValue}${formattedUnit}`;\n  }\n\n  private _renderTooltip() {\n    if (this.tooltipMode === \"never\") return nothing;\n\n    const position = this.tooltipPosition ?? (this.vertical ? \"left\" : \"top\");\n\n    const visible =\n      this.tooltipMode === \"always\" ||\n      (this.tooltipVisible && this.tooltipMode === \"interaction\");\n\n    const value = this.steppedValue(this.value ?? 0);\n\n    return html`\n      <span\n        aria-hidden=\"true\"\n        class=\"tooltip ${classMap({\n          visible,\n          [position]: true,\n          [this.mode ?? \"start\"]: true,\n          \"show-handle\": this.showHandle,\n        })}\"\n      >\n        ${this._formatValue(value)}\n      </span>\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div\n        class=\"container${classMap({\n          pressed: this.pressed,\n        })}\"\n        style=${styleMap({\n          \"--value\": `${this.valueToPercentage(this.value ?? 0)}`,\n        })}\n      >\n        <div id=\"slider\" class=\"slider\">\n          <div class=\"slider-track-background\"></div>\n          <slot name=\"background\"></slot>\n          ${this.mode === \"cursor\"\n            ? this.value != null\n              ? html`\n                  <div\n                    class=${classMap({\n                      \"slider-track-cursor\": true,\n                    })}\n                  ></div>\n                `\n              : null\n            : html`\n                <div\n                  class=${classMap({\n                    \"slider-track-bar\": true,\n                    [this.mode ?? \"start\"]: true,\n                    \"show-handle\": this.showHandle,\n                  })}\n                ></div>\n              `}\n        </div>\n        ${this._renderTooltip()}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        --control-slider-color: var(--primary-color);\n        --control-slider-background: var(--disabled-color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-thickness: 40px;\n        --control-slider-border-radius: 10px;\n        --control-slider-tooltip-font-size: 14px;\n        height: var(--control-slider-thickness);\n        width: 100%;\n        border-radius: var(--control-slider-border-radius);\n        outline: none;\n        transition: box-shadow 180ms ease-in-out;\n      }\n      :host(:focus-visible) {\n        box-shadow: 0 0 0 2px var(--control-slider-color);\n      }\n      :host([vertical]) {\n        width: var(--control-slider-thickness);\n        height: 100%;\n      }\n      .container {\n        position: relative;\n        height: 100%;\n        width: 100%;\n        --handle-size: 4px;\n        --handle-margin: calc(var(--control-slider-thickness) / 8);\n      }\n      .tooltip {\n        pointer-events: none;\n        user-select: none;\n        position: absolute;\n        background-color: var(--clear-background-color);\n        color: var(--primary-text-color);\n        font-size: var(--control-slider-tooltip-font-size);\n        border-radius: 0.8em;\n        padding: 0.2em 0.4em;\n        opacity: 0;\n        white-space: nowrap;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n        transition:\n          opacity 180ms ease-in-out,\n          left 180ms ease-in-out,\n          bottom 180ms ease-in-out;\n        --handle-spacing: calc(2 * var(--handle-margin) + var(--handle-size));\n        --slider-tooltip-margin: -4px;\n        --slider-tooltip-range: 100%;\n        --slider-tooltip-offset: 0px;\n        --slider-tooltip-position: calc(\n          min(\n            max(\n              var(--value) * var(--slider-tooltip-range) +\n                var(--slider-tooltip-offset),\n              0%\n            ),\n            100%\n          )\n        );\n      }\n      .tooltip.start {\n        --slider-tooltip-offset: calc(-0.5 * (var(--handle-spacing)));\n      }\n      .tooltip.end {\n        --slider-tooltip-offset: calc(0.5 * (var(--handle-spacing)));\n      }\n      .tooltip.cursor {\n        --slider-tooltip-range: calc(100% - var(--handle-spacing));\n        --slider-tooltip-offset: calc(0.5 * (var(--handle-spacing)));\n      }\n      .tooltip.show-handle {\n        --slider-tooltip-range: calc(100% - var(--handle-spacing));\n        --slider-tooltip-offset: calc(0.5 * (var(--handle-spacing)));\n      }\n      .tooltip.visible {\n        opacity: 1;\n      }\n      .tooltip.top {\n        transform: translate3d(-50%, -100%, 0);\n        top: var(--slider-tooltip-margin);\n        left: 50%;\n      }\n      .tooltip.bottom {\n        transform: translate3d(-50%, 100%, 0);\n        bottom: var(--slider-tooltip-margin);\n        left: 50%;\n      }\n      .tooltip.left {\n        transform: translate3d(-100%, 50%, 0);\n        bottom: 50%;\n        left: var(--slider-tooltip-margin);\n      }\n      .tooltip.right {\n        transform: translate3d(100%, 50%, 0);\n        bottom: 50%;\n        right: var(--slider-tooltip-margin);\n      }\n      :host(:not([vertical])) .tooltip.top,\n      :host(:not([vertical])) .tooltip.bottom {\n        left: var(--slider-tooltip-position);\n      }\n      :host([vertical]) .tooltip.right,\n      :host([vertical]) .tooltip.left {\n        bottom: var(--slider-tooltip-position);\n      }\n      .slider {\n        position: relative;\n        height: 100%;\n        width: 100%;\n        border-radius: var(--control-slider-border-radius);\n        transform: translateZ(0);\n        overflow: hidden;\n        cursor: pointer;\n      }\n      .slider * {\n        pointer-events: none;\n      }\n      .slider .slider-track-background {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n        background: var(--control-slider-background);\n        opacity: var(--control-slider-background-opacity);\n      }\n      ::slotted([slot=\"background\"]) {\n        position: absolute;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n      }\n      .slider .slider-track-bar {\n        --border-radius: var(--control-slider-border-radius);\n        --slider-size: 100%;\n        position: absolute;\n        height: 100%;\n        width: 100%;\n        background-color: var(--control-slider-color);\n        transition:\n          transform 180ms ease-in-out,\n          background-color 180ms ease-in-out;\n      }\n      .slider .slider-track-bar.show-handle {\n        --slider-size: calc(\n          100% - 2 * var(--handle-margin) - var(--handle-size)\n        );\n      }\n      .slider .slider-track-bar::after {\n        display: block;\n        content: \"\";\n        position: absolute;\n        margin: auto;\n        border-radius: var(--handle-size);\n        background-color: white;\n      }\n      .slider .slider-track-bar {\n        top: 0;\n        left: 0;\n        transform: translate3d(\n          calc((var(--value, 0) - 1) * var(--slider-size)),\n          0,\n          0\n        );\n        border-radius: 0 8px 8px 0;\n      }\n      .slider .slider-track-bar:after {\n        top: 0;\n        bottom: 0;\n        right: var(--handle-margin);\n        height: 50%;\n        width: var(--handle-size);\n      }\n      .slider .slider-track-bar.end {\n        right: 0;\n        left: initial;\n        transform: translate3d(\n          calc(var(--value, 0) * var(--slider-size)),\n          0,\n          0\n        );\n        border-radius: 8px 0 0 8px;\n      }\n      .slider .slider-track-bar.end::after {\n        right: initial;\n        left: var(--handle-margin);\n      }\n\n      :host([vertical]) .slider .slider-track-bar {\n        bottom: 0;\n        left: 0;\n        transform: translate3d(\n          0,\n          calc((1 - var(--value, 0)) * var(--slider-size)),\n          0\n        );\n        border-radius: 8px 8px 0 0;\n      }\n      :host([vertical]) .slider .slider-track-bar:after {\n        top: var(--handle-margin);\n        right: 0;\n        left: 0;\n        bottom: initial;\n        width: 50%;\n        height: var(--handle-size);\n      }\n      :host([vertical]) .slider .slider-track-bar.end {\n        top: 0;\n        bottom: initial;\n        transform: translate3d(\n          0,\n          calc((0 - var(--value, 0)) * var(--slider-size)),\n          0\n        );\n        border-radius: 0 0 8px 8px;\n      }\n      :host([vertical]) .slider .slider-track-bar.end::after {\n        top: initial;\n        bottom: var(--handle-margin);\n      }\n\n      .slider .slider-track-cursor:after {\n        display: block;\n        content: \"\";\n        background-color: var(--secondary-text-color);\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        margin: auto;\n        border-radius: var(--handle-size);\n      }\n\n      .slider .slider-track-cursor {\n        --cursor-size: calc(var(--control-slider-thickness) / 4);\n        position: absolute;\n        background-color: white;\n        border-radius: var(--handle-size);\n        transition:\n          left 180ms ease-in-out,\n          bottom 180ms ease-in-out;\n        top: 0;\n        bottom: 0;\n        left: calc(var(--value, 0) * (100% - var(--cursor-size)));\n        width: var(--cursor-size);\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n      }\n      .slider .slider-track-cursor:after {\n        height: 50%;\n        width: var(--handle-size);\n      }\n\n      :host([vertical]) .slider .slider-track-cursor {\n        top: initial;\n        right: 0;\n        left: 0;\n        bottom: calc(var(--value, 0) * (100% - var(--cursor-size)));\n        height: var(--cursor-size);\n        width: 100%;\n      }\n      :host([vertical]) .slider .slider-track-cursor:after {\n        height: var(--handle-size);\n        width: 50%;\n      }\n      .pressed .tooltip {\n        transition: opacity 180ms ease-in-out;\n      }\n      .pressed .slider-track-bar,\n      .pressed .slider-track-cursor {\n        transition: none;\n      }\n      :host(:disabled) .slider {\n        cursor: not-allowed;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-control-slider\": HaControlSlider;\n  }\n}\n","import type { CSSResultGroup, PropertyValues } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { rgb2hex } from \"../../../../common/color/convert-color\";\nimport {\n  DEFAULT_MAX_KELVIN,\n  DEFAULT_MIN_KELVIN,\n  temperature2rgb,\n} from \"../../../../common/color/convert-light-color\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stateColorCss } from \"../../../../common/entity/state_color\";\nimport { throttle } from \"../../../../common/util/throttle\";\nimport \"../../../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../../../data/entity\";\nimport type { LightColor, LightEntity } from \"../../../../data/light\";\nimport { LightColorMode } from \"../../../../data/light\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../../../data/entity_attributes\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"color-changed\": LightColor;\n    \"color-hovered\": LightColor | undefined;\n  }\n}\n\nexport const generateColorTemperatureGradient = (min: number, max: number) => {\n  const count = 10;\n\n  const gradient: [number, string][] = [];\n\n  const step = (max - min) / count;\n  const percentageStep = 1 / count;\n\n  for (let i = 0; i < count + 1; i++) {\n    const value = min + step * i;\n\n    const hex = rgb2hex(temperature2rgb(value));\n    gradient.push([percentageStep * i, hex]);\n  }\n\n  return gradient\n    .map(([stop, color]) => `${color} ${(stop as number) * 100}%`)\n    .join(\", \");\n};\n\n@customElement(\"light-color-temp-picker\")\nclass LightColorTempPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: LightEntity;\n\n  @state() private _ctPickerValue?: number;\n\n  protected render() {\n    if (!this.stateObj) {\n      return nothing;\n    }\n\n    const minKelvin =\n      this.stateObj.attributes.min_color_temp_kelvin ?? DEFAULT_MIN_KELVIN;\n    const maxKelvin =\n      this.stateObj.attributes.max_color_temp_kelvin ?? DEFAULT_MAX_KELVIN;\n\n    const gradient = this._generateTemperatureGradient(minKelvin!, maxKelvin);\n    const color = stateColorCss(this.stateObj);\n\n    return html`\n      <ha-control-slider\n        touch-action=\"none\"\n        inverted\n        vertical\n        .value=${this._ctPickerValue}\n        .min=${minKelvin}\n        .max=${maxKelvin}\n        mode=\"cursor\"\n        @value-changed=${this._ctColorChanged}\n        @slider-moved=${this._ctColorCursorMoved}\n        .ariaLabel=${this.hass.localize(\n          \"ui.dialogs.more_info_control.light.color_temp\"\n        )}\n        style=${styleMap({\n          \"--control-slider-color\": color,\n          \"--gradient\": gradient,\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n        .unit=${DOMAIN_ATTRIBUTES_UNITS.light.color_temp_kelvin}\n        .locale=${this.hass.locale}\n      >\n      </ha-control-slider>\n    `;\n  }\n\n  private _generateTemperatureGradient = memoizeOne(\n    (min: number, max: number) => generateColorTemperatureGradient(min, max)\n  );\n\n  public _updateSliderValues() {\n    const stateObj = this.stateObj;\n\n    if (stateObj.state === \"on\") {\n      this._ctPickerValue =\n        stateObj.attributes.color_mode === LightColorMode.COLOR_TEMP\n          ? stateObj.attributes.color_temp_kelvin\n          : undefined;\n    } else {\n      this._ctPickerValue = undefined;\n    }\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n\n    if (!changedProps.has(\"stateObj\")) {\n      return;\n    }\n\n    this._updateSliderValues();\n  }\n\n  private _ctColorCursorMoved(ev: CustomEvent) {\n    const ct = ev.detail.value;\n\n    if (isNaN(ct) || this._ctPickerValue === ct) {\n      return;\n    }\n\n    this._ctPickerValue = ct;\n\n    fireEvent(this, \"color-hovered\", {\n      color_temp_kelvin: ct,\n    });\n\n    this._throttleUpdateColorTemp();\n  }\n\n  private _throttleUpdateColorTemp = throttle(() => {\n    this._updateColorTemp();\n  }, 500);\n\n  private _ctColorChanged(ev: CustomEvent) {\n    const ct = ev.detail.value;\n\n    fireEvent(this, \"color-hovered\", undefined);\n\n    if (isNaN(ct) || this._ctPickerValue === ct) {\n      return;\n    }\n\n    this._ctPickerValue = ct;\n\n    this._updateColorTemp();\n  }\n\n  private _updateColorTemp() {\n    const color_temp_kelvin = this._ctPickerValue!;\n\n    this._applyColor({ color_temp_kelvin });\n  }\n\n  private _applyColor(color: LightColor, params?: Record<string, any>) {\n    fireEvent(this, \"color-changed\", color);\n    this.hass.callService(\"light\", \"turn_on\", {\n      entity_id: this.stateObj!.entity_id,\n      ...color,\n      ...params,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        :host {\n          display: flex;\n          flex-direction: column;\n        }\n\n        ha-control-slider {\n          height: 45vh;\n          max-height: 320px;\n          min-height: 200px;\n          --control-slider-thickness: 130px;\n          --control-slider-border-radius: 36px;\n          --control-slider-color: var(--primary-color);\n          --control-slider-background: -webkit-linear-gradient(\n            top,\n            var(--gradient)\n          );\n          --control-slider-tooltip-font-size: 20px;\n          --control-slider-background-opacity: 1;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"light-color-temp-picker\": LightColorTempPicker;\n  }\n}\n","import { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { ColorTempSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-labeled-slider\";\nimport { generateColorTemperatureGradient } from \"../../dialogs/more-info/components/lights/light-color-temp-picker\";\nimport {\n  DEFAULT_MAX_KELVIN,\n  DEFAULT_MIN_KELVIN,\n  mired2kelvin,\n} from \"../../common/color/convert-light-color\";\n\n@customElement(\"ha-selector-color_temp\")\nexport class HaColorTempSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: ColorTempSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    let min: number;\n    let max: number;\n\n    switch (this.selector.color_temp?.unit) {\n      case \"kelvin\":\n        min = this.selector.color_temp?.min ?? DEFAULT_MIN_KELVIN;\n        max = this.selector.color_temp?.max ?? DEFAULT_MAX_KELVIN;\n        break;\n      case \"mired\":\n      default:\n        min =\n          this.selector.color_temp?.min ??\n          this.selector.color_temp?.min_mireds ??\n          153;\n        max =\n          this.selector.color_temp?.max ??\n          this.selector.color_temp?.max_mireds ??\n          500;\n        break;\n    }\n    const gradient = this._generateTemperatureGradient(\n      this.selector.color_temp?.unit ?? \"mired\",\n      min,\n      max\n    );\n\n    return html`\n      <ha-labeled-slider\n        style=${styleMap({\n          \"--ha-slider-background\": `linear-gradient( to var(--float-end), ${gradient})`,\n        })}\n        labeled\n        icon=\"hass:thermometer\"\n        .caption=${this.label || \"\"}\n        .min=${min}\n        .max=${max}\n        .value=${this.value}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .required=${this.required}\n        @value-changed=${this._valueChanged}\n      ></ha-labeled-slider>\n    `;\n  }\n\n  private _generateTemperatureGradient = memoizeOne(\n    (unit: \"kelvin\" | \"mired\", min: number, max: number) => {\n      let gradient;\n\n      switch (unit) {\n        case \"kelvin\":\n          gradient = generateColorTemperatureGradient(min, max);\n          break;\n        case \"mired\":\n          gradient = generateColorTemperatureGradient(\n            mired2kelvin(min),\n            mired2kelvin(max)\n          );\n      }\n\n      return gradient;\n    }\n  );\n\n  private _valueChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", {\n      value: Number((ev.detail as any).value),\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-color_temp\": HaColorTempSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}