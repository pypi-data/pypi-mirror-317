{"version":3,"file":"yThbOs1K.js","mappings":";;AA2CA;;AAEA;AACA;AAGA;;AA8RA;AACA;;;;AAIA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;;;AAIA;AC7RA;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAIA;;;;AAmDA;;ACjDA;AACA;AACA;AACA;;AAEA;AAGA;AAGA;AACA;;AAjCA;;AAEA;AACA;AACA;AACA;;AAEA;AAGA;AAGA;AACA;;AAsBA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floor-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-floors-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-floor.ts"],"sourcesContent":["import type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { PropertyValues, TemplateResult } from \"lit\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport type { ScorableTextItem } from \"../common/string/filter/sequence-matching\";\nimport { fuzzyFilterSort } from \"../common/string/filter/sequence-matching\";\nimport type { AreaRegistryEntry } from \"../data/area_registry\";\nimport { updateAreaRegistryEntry } from \"../data/area_registry\";\nimport type {\n  DeviceEntityDisplayLookup,\n  DeviceRegistryEntry,\n} from \"../data/device_registry\";\nimport { getDeviceEntityDisplayLookup } from \"../data/device_registry\";\nimport type { EntityRegistryDisplayEntry } from \"../data/entity_registry\";\nimport type { FloorRegistryEntry } from \"../data/floor_registry\";\nimport {\n  createFloorRegistryEntry,\n  getFloorAreaLookup,\n} from \"../data/floor_registry\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { showFloorRegistryDetailDialog } from \"../panels/config/areas/show-dialog-floor-registry-detail\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-floor-icon\";\nimport \"./ha-icon-button\";\nimport \"./ha-list-item\";\n\ntype ScorableFloorRegistryEntry = ScorableTextItem & FloorRegistryEntry;\n\nconst ADD_NEW_ID = \"___ADD_NEW___\";\nconst NO_FLOORS_ID = \"___NO_FLOORS___\";\nconst ADD_NEW_SUGGESTION_ID = \"___ADD_NEW_SUGGESTION___\";\n\nconst rowRenderer: ComboBoxLitRenderer<FloorRegistryEntry> = (item) =>\n  html`<ha-list-item\n    graphic=\"icon\"\n    class=${classMap({ \"add-new\": item.floor_id === ADD_NEW_ID })}\n  >\n    <ha-floor-icon slot=\"graphic\" .floor=${item}></ha-floor-icon>\n    ${item.name}\n  </ha-list-item>`;\n\n@customElement(\"ha-floor-picker\")\nexport class HaFloorPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd = false;\n\n  /**\n   * Show only floors with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no floors with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only floors with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * List of floors to be excluded.\n   * @type {Array}\n   * @attr exclude-floors\n   */\n  @property({ type: Array, attribute: \"exclude-floor\" })\n  public excludeFloors?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: (entity: HassEntity) => boolean;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @state() private _opened?: boolean;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  private _suggestion?: string;\n\n  private _init = false;\n\n  public async open() {\n    await this.updateComplete;\n    await this.comboBox?.open();\n  }\n\n  public async focus() {\n    await this.updateComplete;\n    await this.comboBox?.focus();\n  }\n\n  private _getFloors = memoizeOne(\n    (\n      floors: FloorRegistryEntry[],\n      areas: AreaRegistryEntry[],\n      devices: DeviceRegistryEntry[],\n      entities: EntityRegistryDisplayEntry[],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      deviceFilter: this[\"deviceFilter\"],\n      entityFilter: this[\"entityFilter\"],\n      noAdd: this[\"noAdd\"],\n      excludeFloors: this[\"excludeFloors\"]\n    ): FloorRegistryEntry[] => {\n      let deviceEntityLookup: DeviceEntityDisplayLookup = {};\n      let inputDevices: DeviceRegistryEntry[] | undefined;\n      let inputEntities: EntityRegistryDisplayEntry[] | undefined;\n\n      if (\n        includeDomains ||\n        excludeDomains ||\n        includeDeviceClasses ||\n        deviceFilter ||\n        entityFilter\n      ) {\n        deviceEntityLookup = getDeviceEntityDisplayLookup(entities);\n        inputDevices = devices;\n        inputEntities = entities.filter((entity) => entity.area_id);\n\n        if (includeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) =>\n              includeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter((entity) =>\n            includeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (excludeDomains) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return true;\n            }\n            return entities.every(\n              (entity) =>\n                !excludeDomains.includes(computeDomain(entity.entity_id))\n            );\n          });\n          inputEntities = inputEntities!.filter(\n            (entity) =>\n              !excludeDomains.includes(computeDomain(entity.entity_id))\n          );\n        }\n\n        if (includeDeviceClasses) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return (\n                stateObj.attributes.device_class &&\n                includeDeviceClasses.includes(stateObj.attributes.device_class)\n              );\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            return (\n              stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class)\n            );\n          });\n        }\n\n        if (deviceFilter) {\n          inputDevices = inputDevices!.filter((device) =>\n            deviceFilter!(device)\n          );\n        }\n\n        if (entityFilter) {\n          inputDevices = inputDevices!.filter((device) => {\n            const devEntities = deviceEntityLookup[device.id];\n            if (!devEntities || !devEntities.length) {\n              return false;\n            }\n            return deviceEntityLookup[device.id].some((entity) => {\n              const stateObj = this.hass.states[entity.entity_id];\n              if (!stateObj) {\n                return false;\n              }\n              return entityFilter(stateObj);\n            });\n          });\n          inputEntities = inputEntities!.filter((entity) => {\n            const stateObj = this.hass.states[entity.entity_id];\n            if (!stateObj) {\n              return false;\n            }\n            return entityFilter!(stateObj);\n          });\n        }\n      }\n\n      let outputFloors = floors;\n\n      let areaIds: string[] | undefined;\n\n      if (inputDevices) {\n        areaIds = inputDevices\n          .filter((device) => device.area_id)\n          .map((device) => device.area_id!);\n      }\n\n      if (inputEntities) {\n        areaIds = (areaIds ?? []).concat(\n          inputEntities\n            .filter((entity) => entity.area_id)\n            .map((entity) => entity.area_id!)\n        );\n      }\n\n      if (areaIds) {\n        const floorAreaLookup = getFloorAreaLookup(areas);\n        outputFloors = outputFloors.filter((floor) =>\n          floorAreaLookup[floor.floor_id]?.some((area) =>\n            areaIds!.includes(area.area_id)\n          )\n        );\n      }\n\n      if (excludeFloors) {\n        outputFloors = outputFloors.filter(\n          (floor) => !excludeFloors!.includes(floor.floor_id)\n        );\n      }\n\n      if (!outputFloors.length) {\n        outputFloors = [\n          {\n            floor_id: NO_FLOORS_ID,\n            name: this.hass.localize(\"ui.components.floor-picker.no_floors\"),\n            icon: null,\n            level: null,\n            aliases: [],\n            created_at: 0,\n            modified_at: 0,\n          },\n        ];\n      }\n\n      return noAdd\n        ? outputFloors\n        : [\n            ...outputFloors,\n            {\n              floor_id: ADD_NEW_ID,\n              name: this.hass.localize(\"ui.components.floor-picker.add_new\"),\n              icon: \"mdi:plus\",\n              level: null,\n              aliases: [],\n              created_at: 0,\n              modified_at: 0,\n            },\n          ];\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      (!this._init && this.hass) ||\n      (this._init && changedProps.has(\"_opened\") && this._opened)\n    ) {\n      this._init = true;\n      const floors = this._getFloors(\n        Object.values(this.hass.floors),\n        Object.values(this.hass.areas),\n        Object.values(this.hass.devices),\n        Object.values(this.hass.entities),\n        this.includeDomains,\n        this.excludeDomains,\n        this.includeDeviceClasses,\n        this.deviceFilter,\n        this.entityFilter,\n        this.noAdd,\n        this.excludeFloors\n      ).map((floor) => ({\n        ...floor,\n        strings: [floor.floor_id, floor.name, ...floor.aliases],\n      }));\n      this.comboBox.items = floors;\n      this.comboBox.filteredItems = floors;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .helper=${this.helper}\n        item-value-path=\"floor_id\"\n        item-id-path=\"floor_id\"\n        item-label-path=\"name\"\n        .value=${this._value}\n        .disabled=${this.disabled}\n        .required=${this.required}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.floor-picker.floor\")\n          : this.label}\n        .placeholder=${this.placeholder\n          ? this.hass.floors[this.placeholder]?.name\n          : undefined}\n        .renderer=${rowRenderer}\n        @filter-changed=${this._filterChanged}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._floorChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const target = ev.target as HaComboBox;\n    const filterString = ev.detail.value;\n    if (!filterString) {\n      this.comboBox.filteredItems = this.comboBox.items;\n      return;\n    }\n\n    const filteredItems = fuzzyFilterSort<ScorableFloorRegistryEntry>(\n      filterString,\n      target.items?.filter(\n        (item) => ![NO_FLOORS_ID, ADD_NEW_ID].includes(item.label_id)\n      ) || []\n    );\n    if (filteredItems.length === 0) {\n      if (this.noAdd) {\n        this.comboBox.filteredItems = [\n          {\n            floor_id: NO_FLOORS_ID,\n            name: this.hass.localize(\"ui.components.floor-picker.no_match\"),\n            icon: null,\n            level: null,\n            aliases: [],\n            created_at: 0,\n            modified_at: 0,\n          },\n        ] as FloorRegistryEntry[];\n      } else {\n        this._suggestion = filterString;\n        this.comboBox.filteredItems = [\n          {\n            floor_id: ADD_NEW_SUGGESTION_ID,\n            name: this.hass.localize(\n              \"ui.components.floor-picker.add_new_sugestion\",\n              { name: this._suggestion }\n            ),\n            icon: \"mdi:plus\",\n            level: null,\n            aliases: [],\n            created_at: 0,\n            modified_at: 0,\n          },\n        ] as FloorRegistryEntry[];\n      }\n    } else {\n      this.comboBox.filteredItems = filteredItems;\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: ValueChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _floorChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    let newValue = ev.detail.value;\n\n    if (newValue === NO_FLOORS_ID) {\n      newValue = \"\";\n      this.comboBox.setInputValue(\"\");\n      return;\n    }\n\n    if (![ADD_NEW_SUGGESTION_ID, ADD_NEW_ID].includes(newValue)) {\n      if (newValue !== this._value) {\n        this._setValue(newValue);\n      }\n      return;\n    }\n\n    (ev.target as any).value = this._value;\n\n    this.hass.loadFragmentTranslation(\"config\");\n\n    showFloorRegistryDetailDialog(this, {\n      suggestedName: newValue === ADD_NEW_SUGGESTION_ID ? this._suggestion : \"\",\n      createEntry: async (values, addedAreas) => {\n        try {\n          const floor = await createFloorRegistryEntry(this.hass, values);\n          addedAreas.forEach((areaId) => {\n            updateAreaRegistryEntry(this.hass, areaId, {\n              floor_id: floor.floor_id,\n            });\n          });\n          const floors = [...Object.values(this.hass.floors), floor];\n          this.comboBox.filteredItems = this._getFloors(\n            floors,\n            Object.values(this.hass.areas)!,\n            Object.values(this.hass.devices)!,\n            Object.values(this.hass.entities)!,\n            this.includeDomains,\n            this.excludeDomains,\n            this.includeDeviceClasses,\n            this.deviceFilter,\n            this.entityFilter,\n            this.noAdd,\n            this.excludeFloors\n          );\n          await this.updateComplete;\n          await this.comboBox.updateComplete;\n          this._setValue(floor.floor_id);\n        } catch (err: any) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\n              \"ui.components.floor-picker.failed_create_floor\"\n            ),\n            text: err.message,\n          });\n        }\n      },\n    });\n\n    this._suggestion = undefined;\n    this.comboBox.setInputValue(\"\");\n  }\n\n  private _setValue(value?: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floor-picker\": HaFloorPicker;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { SubscribeMixin } from \"../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../types\";\nimport type { HaDevicePickerDeviceFilterFunc } from \"./device/ha-device-picker\";\nimport \"./ha-floor-picker\";\n\n@customElement(\"ha-floors-picker\")\nexport class HaFloorsPicker extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property() public helper?: string;\n\n  @property() public placeholder?: string;\n\n  @property({ type: Boolean, attribute: \"no-add\" })\n  public noAdd = false;\n\n  /**\n   * Show only floors with entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no floors with entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only floors with entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  @property({ attribute: false })\n  public deviceFilter?: HaDevicePickerDeviceFilterFunc;\n\n  @property({ attribute: false })\n  public entityFilter?: (entity: HassEntity) => boolean;\n\n  @property({ attribute: \"picked-floor-label\" })\n  public pickedFloorLabel?: string;\n\n  @property({ attribute: \"pick-floor-label\" })\n  public pickFloorLabel?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const currentFloors = this._currentFloors;\n    return html`\n      ${currentFloors.map(\n        (floor) => html`\n          <div>\n            <ha-floor-picker\n              .curValue=${floor}\n              .noAdd=${this.noAdd}\n              .hass=${this.hass}\n              .value=${floor}\n              .label=${this.pickedFloorLabel}\n              .includeDomains=${this.includeDomains}\n              .excludeDomains=${this.excludeDomains}\n              .includeDeviceClasses=${this.includeDeviceClasses}\n              .deviceFilter=${this.deviceFilter}\n              .entityFilter=${this.entityFilter}\n              .disabled=${this.disabled}\n              @value-changed=${this._floorChanged}\n            ></ha-floor-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-floor-picker\n          .noAdd=${this.noAdd}\n          .hass=${this.hass}\n          .label=${this.pickFloorLabel}\n          .helper=${this.helper}\n          .includeDomains=${this.includeDomains}\n          .excludeDomains=${this.excludeDomains}\n          .includeDeviceClasses=${this.includeDeviceClasses}\n          .deviceFilter=${this.deviceFilter}\n          .entityFilter=${this.entityFilter}\n          .disabled=${this.disabled}\n          .placeholder=${this.placeholder}\n          .required=${this.required && !currentFloors.length}\n          @value-changed=${this._addFloor}\n          .excludeFloors=${currentFloors}\n        ></ha-floor-picker>\n      </div>\n    `;\n  }\n\n  private get _currentFloors(): string[] {\n    return this.value || [];\n  }\n\n  private async _updateFloors(floors) {\n    this.value = floors;\n\n    fireEvent(this, \"value-changed\", {\n      value: floors,\n    });\n  }\n\n  private _floorChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const curValue = (ev.currentTarget as any).curValue;\n    const newValue = ev.detail.value;\n    if (newValue === curValue) {\n      return;\n    }\n    const currentFloors = this._currentFloors;\n    if (!newValue || currentFloors.includes(newValue)) {\n      this._updateFloors(currentFloors.filter((ent) => ent !== curValue));\n      return;\n    }\n    this._updateFloors(\n      currentFloors.map((ent) => (ent === curValue ? newValue : ent))\n    );\n  }\n\n  private _addFloor(ev: CustomEvent) {\n    ev.stopPropagation();\n\n    const toAdd = ev.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (ev.currentTarget as any).value = \"\";\n    const currentFloors = this._currentFloors;\n    if (currentFloors.includes(toAdd)) {\n      return;\n    }\n\n    this._updateFloors([...currentFloors, toAdd]);\n  }\n\n  static override styles = css`\n    div {\n      margin-top: 8px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-floors-picker\": HaFloorsPicker;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport type { PropertyValues } from \"lit\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport type { DeviceRegistryEntry } from \"../../data/device_registry\";\nimport { getDeviceIntegrationLookup } from \"../../data/device_registry\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { EntitySources } from \"../../data/entity_sources\";\nimport { fetchEntitySourcesWithCache } from \"../../data/entity_sources\";\nimport type { FloorSelector } from \"../../data/selector\";\nimport type { ConfigEntry } from \"../../data/config_entries\";\nimport { getConfigEntries } from \"../../data/config_entries\";\nimport {\n  filterSelectorDevices,\n  filterSelectorEntities,\n} from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-floor-picker\";\nimport \"../ha-floors-picker\";\n\n@customElement(\"ha-selector-floor\")\nexport class HaFloorSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: FloorSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @state() private _entitySources?: EntitySources;\n\n  @state() private _configEntries?: ConfigEntry[];\n\n  private _deviceIntegrationLookup = memoizeOne(getDeviceIntegrationLookup);\n\n  private _hasIntegration(selector: FloorSelector) {\n    return (\n      (selector.floor?.entity &&\n        ensureArray(selector.floor.entity).some(\n          (filter) => filter.integration\n        )) ||\n      (selector.floor?.device &&\n        ensureArray(selector.floor.device).some((device) => device.integration))\n    );\n  }\n\n  protected willUpdate(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"selector\") && this.value !== undefined) {\n      if (this.selector.floor?.multiple && !Array.isArray(this.value)) {\n        this.value = [this.value];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      } else if (!this.selector.floor?.multiple && Array.isArray(this.value)) {\n        this.value = this.value[0];\n        fireEvent(this, \"value-changed\", { value: this.value });\n      }\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (\n      changedProperties.has(\"selector\") &&\n      this._hasIntegration(this.selector) &&\n      !this._entitySources\n    ) {\n      fetchEntitySourcesWithCache(this.hass).then((sources) => {\n        this._entitySources = sources;\n      });\n    }\n    if (!this._configEntries && this._hasIntegration(this.selector)) {\n      this._configEntries = [];\n      getConfigEntries(this.hass).then((entries) => {\n        this._configEntries = entries;\n      });\n    }\n  }\n\n  protected render() {\n    if (this._hasIntegration(this.selector) && !this._entitySources) {\n      return nothing;\n    }\n\n    if (!this.selector.floor?.multiple) {\n      return html`\n        <ha-floor-picker\n          .hass=${this.hass}\n          .value=${this.value}\n          .label=${this.label}\n          .helper=${this.helper}\n          no-add\n          .deviceFilter=${this.selector.floor?.device\n            ? this._filterDevices\n            : undefined}\n          .entityFilter=${this.selector.floor?.entity\n            ? this._filterEntities\n            : undefined}\n          .disabled=${this.disabled}\n          .required=${this.required}\n        ></ha-floor-picker>\n      `;\n    }\n\n    return html`\n      <ha-floors-picker\n        .hass=${this.hass}\n        .value=${this.value}\n        .helper=${this.helper}\n        .pickFloorLabel=${this.label}\n        no-add\n        .deviceFilter=${this.selector.floor?.device\n          ? this._filterDevices\n          : undefined}\n        .entityFilter=${this.selector.floor?.entity\n          ? this._filterEntities\n          : undefined}\n        .disabled=${this.disabled}\n        .required=${this.required}\n      ></ha-floors-picker>\n    `;\n  }\n\n  private _filterEntities = (entity: HassEntity): boolean => {\n    if (!this.selector.floor?.entity) {\n      return true;\n    }\n\n    return ensureArray(this.selector.floor.entity).some((filter) =>\n      filterSelectorEntities(filter, entity, this._entitySources)\n    );\n  };\n\n  private _filterDevices = (device: DeviceRegistryEntry): boolean => {\n    if (!this.selector.floor?.device) {\n      return true;\n    }\n\n    const deviceIntegrations = this._entitySources\n      ? this._deviceIntegrationLookup(\n          this._entitySources,\n          Object.values(this.hass.entities),\n          Object.values(this.hass.devices),\n          this._configEntries\n        )\n      : undefined;\n\n    return ensureArray(this.selector.floor.device).some((filter) =>\n      filterSelectorDevices(filter, device, deviceIntegrations)\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-floor\": HaFloorSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}