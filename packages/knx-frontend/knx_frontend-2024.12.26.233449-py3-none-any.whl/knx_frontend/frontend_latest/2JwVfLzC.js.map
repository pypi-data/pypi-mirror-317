{"version":3,"file":"2JwVfLzC.js","mappings":";AAgBA;AACA;AACA;;;AAIA;AACA;AAEA;;AA2CA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;AAjBA;ACxCA;AACA;AACA;AACA;AACA;AACA;;AAGA;;;;AAMA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-addon-picker.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-addon.ts"],"sourcesContent":["import type { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stringCompare } from \"../common/string/compare\";\nimport type { HassioAddonInfo } from \"../data/hassio/addon\";\nimport { fetchHassioAddonsInfo } from \"../data/hassio/addon\";\nimport type { HomeAssistant, ValueChangedEvent } from \"../types\";\nimport \"./ha-alert\";\nimport \"./ha-combo-box\";\nimport type { HaComboBox } from \"./ha-combo-box\";\nimport \"./ha-list-item\";\n\nconst rowRenderer: ComboBoxLitRenderer<HassioAddonInfo> = (item) =>\n  html`<ha-list-item twoline graphic=\"icon\">\n    <span>${item.name}</span>\n    <span slot=\"secondary\">${item.slug}</span>\n    ${item.icon\n      ? html`<img\n          alt=\"\"\n          slot=\"graphic\"\n          .src=\"/api/hassio/addons/${item.slug}/icon\"\n        />`\n      : \"\"}\n  </ha-list-item>`;\n\n@customElement(\"ha-addon-picker\")\nclass HaAddonPicker extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property() public label?: string;\n\n  @property() public value = \"\";\n\n  @property() public helper?: string;\n\n  @state() private _addons?: HassioAddonInfo[];\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @query(\"ha-combo-box\") private _comboBox!: HaComboBox;\n\n  @state() private _error?: string;\n\n  public open() {\n    this._comboBox?.open();\n  }\n\n  public focus() {\n    this._comboBox?.focus();\n  }\n\n  protected firstUpdated() {\n    this._getAddons();\n  }\n\n  protected render() {\n    if (this._error) {\n      return html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`;\n    }\n    if (!this._addons) {\n      return nothing;\n    }\n    return html`\n      <ha-combo-box\n        .hass=${this.hass}\n        .label=${this.label === undefined && this.hass\n          ? this.hass.localize(\"ui.components.addon-picker.addon\")\n          : this.label}\n        .value=${this._value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .renderer=${rowRenderer}\n        .items=${this._addons}\n        item-value-path=\"slug\"\n        item-id-path=\"slug\"\n        item-label-path=\"name\"\n        @value-changed=${this._addonChanged}\n      ></ha-combo-box>\n    `;\n  }\n\n  private async _getAddons() {\n    try {\n      if (isComponentLoaded(this.hass, \"hassio\")) {\n        const addonsInfo = await fetchHassioAddonsInfo(this.hass);\n        this._addons = addonsInfo.addons\n          .filter((addon) => addon.version)\n          .sort((a, b) =>\n            stringCompare(a.name, b.name, this.hass.locale.language)\n          );\n      } else {\n        this._error = this.hass.localize(\n          \"ui.components.addon-picker.error.no_supervisor\"\n        );\n      }\n    } catch (err: any) {\n      this._error = this.hass.localize(\n        \"ui.components.addon-picker.error.fetch_addons\"\n      );\n    }\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _addonChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-addon-picker\": HaAddonPicker;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport type { AddonSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-addon-picker\";\n\n@customElement(\"ha-selector-addon\")\nexport class HaAddonSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: AddonSelector;\n\n  @property() public value?: any;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  protected render() {\n    return html`<ha-addon-picker\n      .hass=${this.hass}\n      .value=${this.value}\n      .label=${this.label}\n      .helper=${this.helper}\n      .disabled=${this.disabled}\n      .required=${this.required}\n      allow-custom-entity\n    ></ha-addon-picker>`;\n  }\n\n  static styles = css`\n    ha-addon-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-addon\": HaAddonSelector;\n  }\n}\n"],"names":[],"sourceRoot":""}