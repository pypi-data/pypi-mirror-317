{"version":3,"file":"93UiVEUv.js","mappings":";;;AAqFA;AACA;;;;;AAMA;;;AAGA;;AAQA;;;;;AAQA;;AA/GA;;AAoHA;AAEA;;;;AAIA;;AAEA;AAMA;AACA;;;AAGA;;;;AAMA;;AAEA;AACA;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;AA+CA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/dialogs/area-filter/area-filter-dialog.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list\";\nimport { mdiDrag, mdiEye, mdiEyeOff } from \"@mdi/js\";\nimport type { CSSResultGroup } from \"lit\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { AreaFilterValue } from \"../../components/ha-area-filter\";\nimport \"../../components/ha-button\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-list-item\";\nimport \"../../components/ha-sortable\";\nimport { areaCompare } from \"../../data/area_registry\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport type { HomeAssistant } from \"../../types\";\nimport type { HassDialog } from \"../make-dialog-manager\";\nimport type { AreaFilterDialogParams } from \"./show-area-filter-dialog\";\n\n@customElement(\"dialog-area-filter\")\nexport class DialogAreaFilter\n  extends LitElement\n  implements HassDialog<AreaFilterDialogParams>\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _dialogParams?: AreaFilterDialogParams;\n\n  @state() private _hidden: string[] = [];\n\n  @state() private _areas: string[] = [];\n\n  public showDialog(dialogParams: AreaFilterDialogParams): void {\n    this._dialogParams = dialogParams;\n    this._hidden = dialogParams.initialValue?.hidden ?? [];\n    const order = dialogParams.initialValue?.order ?? [];\n    const allAreas = Object.keys(this.hass!.areas);\n    this._areas = allAreas.concat().sort(areaCompare(this.hass!.areas, order));\n  }\n\n  public closeDialog(): void {\n    this._dialogParams = undefined;\n    this._hidden = [];\n    this._areas = [];\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private _submit(): void {\n    const order = this._areas.filter((area) => !this._hidden.includes(area));\n    const value: AreaFilterValue = {\n      hidden: this._hidden,\n      order,\n    };\n    this._dialogParams?.submit?.(value);\n    this.closeDialog();\n  }\n\n  private _cancel(): void {\n    this._dialogParams?.cancel?.();\n    this.closeDialog();\n  }\n\n  private _areaMoved(ev: CustomEvent): void {\n    ev.stopPropagation();\n    const { oldIndex, newIndex } = ev.detail;\n\n    const areas = this._areas.concat();\n\n    const option = areas.splice(oldIndex, 1)[0];\n    areas.splice(newIndex, 0, option);\n\n    this._areas = areas;\n  }\n\n  protected render() {\n    if (!this._dialogParams || !this.hass) {\n      return nothing;\n    }\n\n    const allAreas = this._areas;\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._cancel}\n        .heading=${this._dialogParams.title ??\n        this.hass.localize(\"ui.components.area-filter.title\")}\n      >\n        <ha-sortable\n          draggable-selector=\".draggable\"\n          handle-selector=\".handle\"\n          @item-moved=${this._areaMoved}\n        >\n          <mwc-list class=\"areas\">\n            ${repeat(\n              allAreas,\n              (area) => area,\n              (area, _idx) => {\n                const isVisible = !this._hidden.includes(area);\n                const name = this.hass!.areas[area]?.name || area;\n                return html`\n                  <ha-list-item\n                    class=${classMap({\n                      hidden: !isVisible,\n                      draggable: isVisible,\n                    })}\n                    hasMeta\n                    graphic=\"icon\"\n                    noninteractive\n                  >\n                    ${isVisible\n                      ? html`<ha-svg-icon\n                          class=\"handle\"\n                          .path=${mdiDrag}\n                          slot=\"graphic\"\n                        ></ha-svg-icon>`\n                      : nothing}\n                    ${name}\n                    <ha-icon-button\n                      tabindex=\"0\"\n                      class=\"action\"\n                      .path=${isVisible ? mdiEye : mdiEyeOff}\n                      slot=\"meta\"\n                      .label=${this.hass!.localize(\n                        `ui.components.area-filter.${\n                          isVisible ? \"hide\" : \"show\"\n                        }`,\n                        { area: name }\n                      )}\n                      .area=${area}\n                      @click=${this._toggle}\n                    ></ha-icon-button>\n                  </ha-list-item>\n                `;\n              }\n            )}\n          </mwc-list>\n        </ha-sortable>\n        <ha-button slot=\"secondaryAction\" dialogAction=\"cancel\">\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </ha-button>\n        <ha-button @click=${this._submit} slot=\"primaryAction\">\n          ${this.hass.localize(\"ui.common.submit\")}\n        </ha-button>\n      </ha-dialog>\n    `;\n  }\n\n  _toggle(ev) {\n    const area = ev.target.area;\n    const hidden = [...(this._hidden ?? [])];\n    if (hidden.includes(area)) {\n      hidden.splice(hidden.indexOf(area), 1);\n    } else {\n      hidden.push(area);\n    }\n    this._hidden = hidden;\n    const nonHiddenAreas = this._areas.filter(\n      (ar) => !this._hidden.includes(ar)\n    );\n    const hiddenAreas = this._areas.filter((ar) => this._hidden.includes(ar));\n    this._areas = [...nonHiddenAreas, ...hiddenAreas];\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          /* Place above other dialogs */\n          --dialog-z-index: 104;\n          --dialog-content-padding: 0;\n        }\n        ha-list-item {\n          overflow: visible;\n        }\n        .hidden {\n          color: var(--disabled-text-color);\n        }\n        .handle {\n          cursor: move; /* fallback if grab cursor is unsupported */\n          cursor: grab;\n        }\n        .actions {\n          display: flex;\n          flex-direction: row;\n        }\n        ha-icon-button {\n          display: block;\n          margin: -12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-area-filter\": DialogAreaFilter;\n  }\n}\n"],"names":[],"sourceRoot":""}