{"version":3,"file":"p51odqrB.js","mappings":";;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;AACA;;AAEA;;AAIA;;ACXA;;AAGA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-selector/ha-selector-icon.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-state-icon.ts"],"sourcesContent":["import { html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { entityIcon } from \"../../data/icons\";\nimport type { IconSelector } from \"../../data/selector\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"../ha-icon-picker\";\nimport \"../ha-state-icon\";\n\n@customElement(\"ha-selector-icon\")\nexport class HaIconSelector extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public selector!: IconSelector;\n\n  @property() public value?: string;\n\n  @property() public label?: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean, reflect: true }) public disabled = false;\n\n  @property({ type: Boolean }) public required = true;\n\n  @property({ attribute: false }) public context?: {\n    icon_entity?: string;\n  };\n\n  protected render() {\n    const iconEntity = this.context?.icon_entity;\n\n    const stateObj = iconEntity ? this.hass.states[iconEntity] : undefined;\n\n    const placeholder =\n      this.selector.icon?.placeholder ||\n      stateObj?.attributes.icon ||\n      (stateObj && until(entityIcon(this.hass, stateObj)));\n\n    return html`\n      <ha-icon-picker\n        .hass=${this.hass}\n        .label=${this.label}\n        .value=${this.value}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        .helper=${this.helper}\n        .placeholder=${this.selector.icon?.placeholder ?? placeholder}\n        @value-changed=${this._valueChanged}\n      >\n        ${!placeholder && stateObj\n          ? html`\n              <ha-state-icon\n                slot=\"fallback\"\n                .hass=${this.hass}\n                .stateObj=${stateObj}\n              ></ha-state-icon>\n            `\n          : nothing}\n      </ha-icon-picker>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    fireEvent(this, \"value-changed\", { value: ev.detail.value });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-selector-icon\": HaIconSelector;\n  }\n}\n","import type { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { until } from \"lit/directives/until\";\nimport { DEFAULT_DOMAIN_ICON, FIXED_DOMAIN_ICONS } from \"../common/const\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { entityIcon } from \"../data/icons\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public stateValue?: string;\n\n  @property() public icon?: string;\n\n  protected render() {\n    const overrideIcon =\n      this.icon ||\n      (this.stateObj && this.hass?.entities[this.stateObj.entity_id]?.icon) ||\n      this.stateObj?.attributes.icon;\n    if (overrideIcon) {\n      return html`<ha-icon .icon=${overrideIcon}></ha-icon>`;\n    }\n    if (!this.stateObj) {\n      return nothing;\n    }\n    if (!this.hass) {\n      return this._renderFallback();\n    }\n    const icon = entityIcon(this.hass, this.stateObj, this.stateValue).then(\n      (icn) => {\n        if (icn) {\n          return html`<ha-icon .icon=${icn}></ha-icon>`;\n        }\n        return this._renderFallback();\n      }\n    );\n    return html`${until(icon)}`;\n  }\n\n  private _renderFallback() {\n    const domain = computeStateDomain(this.stateObj!);\n\n    return html`\n      <ha-svg-icon\n        .path=${FIXED_DOMAIN_ICONS[domain] || DEFAULT_DOMAIN_ICON}\n      ></ha-svg-icon>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n"],"names":[],"sourceRoot":""}