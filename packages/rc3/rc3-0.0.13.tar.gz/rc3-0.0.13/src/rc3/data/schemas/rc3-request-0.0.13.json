{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "https://cdn.statically.io/gh/gswilcox01/rc3/v0.0.13/src/rc3/data/schemas/rc3-request-0.0.13.json",
    "title": "rc3 request",
    "description": "RC request information",
    "type": "object",
    "properties": {
        "$schema": {
            "description": "The JSON schema to use for validation",
            "type": "string"
        },
        "comment": {
            "description": "A comment to provide documentation for this request",
            "type": "string"
        },
        "method": {
            "description": "The HTTP method to use for this request",
            "type": "string",
            "enum": ["GET", "POST", "PUT", "PATCH", "DELETE", "HEAD", "OPTIONS"]
        },
        "url": {
            "description": "The URL to use for this request",
            "type": "string"
        },
        "params": {
            "description": "The query parameters to send with this request",
            "$ref": "#/$defs/nvp"
        },
        "form_data": {
            "description": "Form x-www-form-urlencoded data to pass in the request body",
            "$ref": "#/$defs/nvp"
        },
        "auth": {
            "$ref": "https://json.schemastore.org/rc3-auth-0.0.3.json"
        },
        "headers": {
            "description": "The HTTP headers to send with this request",
            "$ref": "#/$defs/nvp"
        },
        "body": {
            "description": "The body of the request",
            "type" : "object",
            "properties": {
                "text" : { "type": "string"},
                "json" : {
                    "anyOf": [
                        { "type": "string"},
                        { "type": "object" },
                        { "type": "array" }
                    ]
                }
            },
            "additionalProperties": false
        },
        "save_responses": {
            "description": "Whether to save .response files in the same dir as the .request file",
            "type": "boolean"
        },
        "extract": {
            "description": "A list of values to extract from the response",
            "type": "array",
            "items": {
                "$ref": "#/$defs/extract"
            }
        }
    },
    "additionalProperties": false,
    "$defs": {
        "nvp": {
            "type" : "object",
            "properties": {
                "name": {"type": "string"}
            },
            "additionalProperties": {"type": "string"}
        },
        "extract": {
            "description": "JSON node, or Text pattern (with regex group) to extract from response",
            "type" : "object",
            "properties": {
                "json_path" : {
                    "description": "A JSON Path expression to extract a single field from JSON",
                    "type": "string"
                },
                "text_pattern" : {
                    "description": "A Python regex pattern with a single REGEX GROUP to be extracted from the response",
                    "type": "string"
                },
                "from" : {
                    "description": "Where to extract from, default is response.body, optionaly verbose response",
                    "type": "string",
                    "enum": ["body", "response"]
                },
                "to" : {
                    "description": "Where to store the extracted value",
                    "type": "string",
                    "enum": ["current", "global", "stdout", "response", "keyring"]
                },
                "var" : {
                    "description": "Var name used to store the extracted value",
                    "type": "string"
                }
            },
            "additionalProperties": false
        }
    }
}
