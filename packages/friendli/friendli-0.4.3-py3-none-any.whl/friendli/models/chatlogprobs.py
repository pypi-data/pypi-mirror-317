"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from friendli.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class ChatLogprobsTopLogprobsTypedDict(TypedDict):
    token: NotRequired[str]
    r"""The token."""
    logprob: NotRequired[float]
    r"""The log probability of this token."""
    bytes: NotRequired[Nullable[List[int]]]
    r"""A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token."""


class ChatLogprobsTopLogprobs(BaseModel):
    token: Optional[str] = None
    r"""The token."""

    logprob: Optional[float] = None
    r"""The log probability of this token."""

    bytes: OptionalNullable[List[int]] = UNSET
    r"""A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["token", "logprob", "bytes"]
        nullable_fields = ["bytes"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ContentTypedDict(TypedDict):
    token: NotRequired[str]
    r"""The token."""
    logprob: NotRequired[float]
    r"""The log probability of this token."""
    bytes: NotRequired[Nullable[List[int]]]
    r"""A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token."""
    top_logprobs: NotRequired[List[ChatLogprobsTopLogprobsTypedDict]]
    r"""List of the most likely tokens and their log probability, at this token position."""


class Content(BaseModel):
    token: Optional[str] = None
    r"""The token."""

    logprob: Optional[float] = None
    r"""The log probability of this token."""

    bytes: OptionalNullable[List[int]] = UNSET
    r"""A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token."""

    top_logprobs: Optional[List[ChatLogprobsTopLogprobs]] = None
    r"""List of the most likely tokens and their log probability, at this token position."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["token", "logprob", "bytes", "top_logprobs"]
        nullable_fields = ["bytes"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ChatLogprobsTypedDict(TypedDict):
    r"""Log probability information for the choice."""

    content: NotRequired[Nullable[List[ContentTypedDict]]]
    r"""A list of message content tokens with log probability information."""


class ChatLogprobs(BaseModel):
    r"""Log probability information for the choice."""

    content: OptionalNullable[List[Content]] = UNSET
    r"""A list of message content tokens with log probability information."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["content"]
        nullable_fields = ["content"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
