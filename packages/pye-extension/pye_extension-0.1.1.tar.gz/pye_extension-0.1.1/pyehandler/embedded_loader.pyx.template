# pyehandler/embedded_loader.pyx.template
# cython: language_level=3
from cpython.bytes cimport PyBytes_FromStringAndSize
from libc.stdlib cimport malloc, free
import marshal
from cryptography.fernet import Fernet

cdef bytes OBFUSCATED_KEY = b"{obfuscated_key}"

cdef class PyeLoader:
    cdef object fernet
    
    def __cinit__(self, key_file=None):  
        cdef int key_length = 32
        cdef char* key_buffer = <char*>malloc(key_length)
        if key_buffer is NULL:
            raise MemoryError()
        try:
            for i in range(key_length):
                key_buffer[i] = <char>(OBFUSCATED_KEY[i] ^ 0xAA)
            key = PyBytes_FromStringAndSize(key_buffer, key_length)
            self.fernet = Fernet(key)
        finally:
            if key_buffer != NULL:
                free(key_buffer)
    
    def get_code(self, path):
        return self.execute_pye(path)
                
    def execute_pye(self, str filename):
        with open(filename, 'rb') as f:
            encrypted = f.read()
        decrypted = self.fernet.decrypt(encrypted)
        return compile(decrypted, filename, 'exec')

    def get_data(self, path):
        with open(path, 'rb') as f:
            return f.read()

    def get_source(self, path):
        return None

    def get_filename(self, path):
        return path