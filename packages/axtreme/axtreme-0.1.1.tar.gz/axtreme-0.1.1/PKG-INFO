Metadata-Version: 2.4
Name: axtreme
Version: 0.1.1
Summary: A development library for the RaPiD project
Project-URL: Homepage, https://github.com/dnv-opensource/axtreme
Project-URL: Documentation, https://dnv-opensource.github.io/axtreme/README.html
Project-URL: Repository, https://github.com/dnv-opensource/axtreme.git
Project-URL: Issues, https://github.com/dnv-opensource/axtreme/issues
Project-URL: Changelog, https://github.com/dnv-opensource/axtreme/blob/main/CHANGELOG.md
Author-email: Sebastian Winter <sebastian.winter@dnv.com>, Kristoffer Skare <kristoffer.skare@dnv.com>, Magnus Kristiansen <magnus.kristiansen@dnv.com>
Maintainer-email: Claas Rostock <claas.rostock@dnv.com>, Jorge Luis Mendez <jorge.luis.mendez@dnv.com>
License: MIT License
        
        Copyright (c) 2024 [DNV](https://www.dnv.com) [open source](https://github.com/dnv-opensource)
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
License-File: LICENSE
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.11
Requires-Dist: ax-platform[mysql]==0.3.7
Requires-Dist: dataclasses-json>=0.6.7
Requires-Dist: filterpy>=1.4.5
Requires-Dist: gitpython>=3.1.43
Requires-Dist: matplotlib>=3.9
Requires-Dist: numba>=0.60.0
Requires-Dist: numpy<2.0,>=1.26
Requires-Dist: statsmodels>=0.14.4
Provides-Extra: cuda
Requires-Dist: torch==2.4.1+cu124; extra == 'cuda'
Description-Content-Type: text/markdown

[![pypi](https://img.shields.io/pypi/v/axtreme.svg?color=blue)](https://pypi.python.org/pypi/axtreme)
[![versions](https://img.shields.io/pypi/pyversions/axtreme.svg?color=blue)](https://pypi.python.org/pypi/axtreme)
[![license](https://img.shields.io/pypi/l/axtreme.svg)](https://github.com/dnv-opensource/axtreme/blob/main/LICENSE)
![ci](https://img.shields.io/github/actions/workflow/status/dnv-opensource/axtreme/.github%2Fworkflows%2Fnightly_build.yml?label=ci)
[![docs](https://img.shields.io/github/actions/workflow/status/dnv-opensource/axtreme/.github%2Fworkflows%2Fpush_to_release.yml?label=docs)][axtreme_docs]

# axtreme
Development repo for the RaPiD project with extensions for Ax and BoTorch.

## Repo Structure
* `src/`: Main package directory
* `tests/`: Test directory
* `examples/`: Examples and demos
* `tutorials/`: Tutorial notebooks

## Development Setup

### 1. Install uv
This project uses `uv` as package manager.
If you haven't already, install [uv](https://docs.astral.sh/uv), preferably using it's ["Standalone installer"](https://docs.astral.sh/uv/getting-started/installation/#__tabbed_1_2) method: <br>
..on Windows:
```sh
powershell -ExecutionPolicy ByPass -c "irm https://astral.sh/uv/install.ps1 | iex"
```
..on MacOS and Linux:
```sh
curl -LsSf https://astral.sh/uv/install.sh | sh
```
(see [docs.astral.sh/uv](https://docs.astral.sh/uv/getting-started/installation/) for all / alternative installation methods.)

Once installed, you can update `uv` to its latest version, anytime, by running:
```sh
uv self update
```

### 2. Install Python
This project requires Python 3.11 or later. <br>
If you don't already have a compatible version installed on your machine, the probably most comfortable way to install Python is through `uv`:
```sh
uv python install
```
This will install the latest stable version of Python into the uv Python directory, i.e. as a uv-managed version of Python.

Alternatively, and if you want a standalone version of Python on your machine, you can install Python either via `winget`:
```sh
winget install --id Python.Python
```
or you can download and install Python from the [python.org](https://www.python.org/downloads/) website.

### 3. Clone the repository
Clone the axtreme repository into your local development directory:
```sh
git clone https://github.com/dnv-opensource/axtreme path/to/your/dev/axtreme
```
Change into the project directory after cloning:
```sh
cd axtreme
```

### 4. Install dependencies
Run `uv sync` to create a virtual environment and install all project dependencies into it:
```sh
uv sync
```
> **Note**: Using `--no-dev` will omit installing development dependencies.

> **Note**: `uv` will create a new virtual environment called `.venv` in the project root directory when running
> `uv sync` for the first time. Optionally, you can create your own using e.g. `uv venv`, before running
> `uv sync`.

### 5. (Optional) Install CUDA support
Run `uv sync` with option `--extra cuda` to in addition install torch with CUDA support:
```sh
uv sync --extra cuda
```
> **Note**: The exact version of `torch` that is installed by default depends on the system you are using. E.g., Linux
> will install the CUDA version by default, while Windows and macOS will install the CPU version.


Alternatively, you can manually install torch with CUDA support.
_Note 1_: Do this preferably _after_ running `uv sync`. That way you ensure a virtual environment exists, which is a prerequisite before you install torch with CUDA support using below `uv pip install` command.

To manually install torch with CUDA support, generate a `uv pip install` command matching your local machine's operating system using the wizard on the official [PyTorch website](https://pytorch.org/get-started/locally/).
_Note_: As we use `uv` as package manager, remember to replace `pip` in the command generated by the wizard with `uv pip`.

If you are on Windows, the resulting `uv pip install` command will most likely look something like this:
```sh
uv pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu124
```

_Hint:_ If you are unsure which cuda version to indicate in above `uv pip install .. /cuXXX` command, you can use the shell command `nvidia-smi` on your local system to find out the cuda version supported by the current graphics driver installed on your system. When then generating the `uv pip install` command with the wizard from the [PyTorch website](https://pytorch.org/get-started/locally/), select the cuda version that matches the major version of what your graphics driver supports (major version must match, minor version may deviate).


### 6. (Optional) Activate the virtual environment
When using `uv`, there is in almost all cases no longer a need to manually activate the virtual environment. <br>
`uv` will find the `.venv` virtual environment in the working directory or any parent directory, and activate it on the fly whenever you run a command via `uv` inside your project folder structure:
```sh
uv run <command>
```

However, you still _can_ manually activate the virtual environment if needed.
When developing in an IDE, for instance, this can in some cases be necessary depending on your IDE settings.
To manually activate the virtual environment, run one of the "known" legacy commands: <br>
..on Windows:
```sh
.venv\Scripts\activate.bat
```
..on Linux:
```sh
source .venv/bin/activate
```

### 7. Install pre-commit hooks
The `.pre-commit-config.yaml` file in the project root directory contains a configuration for pre-commit hooks.
To install the pre-commit hooks defined therein in your local git repository, run:
```sh
uv run pre-commit install
```

All pre-commit hooks configured in `.pre-commit-config.yaml` will now run each time you commit changes.

pre-commit can also manually be invoked, at anytime, using:
```sh
uv run pre-commit run --all-files
```

To skip the pre-commit validation on commits (e.g. when intentionally committing broken code), run:
```sh
uv run git commit -m <MSG> --no-verify
```

To update the hooks configured in `.pre-commit-config.yaml` to their newest versions, run:
```sh
uv run pre-commit autoupdate
```

### 8. Test that the installation works
To test that the installation works, run pytest in the project root folder:
```sh
uv run pytest
```

You should now be ready to start developing!

## Development Tools
You should familiarize yourself with the following tools used in this project. The tools can be configured in the `pyproject.toml` file;
* ruff (linting + formatting)
* mypy (static type checking)
* pytest (unit testing)
* pre-commit (code quality checks and fixes on commit)

A brief overview of the tools is provided below:

### ruff Formatter
Format the code according to the formatting rules in the `pyproject.toml` file:
```sh
uv run ruff format
```

### ruff Linter
Check the code for issues according to the linting rules in the `pyproject.toml` file:
```sh
uv run ruff check
```
Fix any issues that can be fixed automatically:
```sh
uv run ruff check --fix
```

### mypy
Perform static type checking on source code:
```sh
uv run mypy
```

### pytest
Run all tests (with coverage) using:
```sh
uv run pytest
```
Generate a coverage report in addition to running the tests:
```sh
uv run pytest --cov=rapid --cov-branch --cov-report=json --cov-report=term-missing
```

## Documentation

See axtreme's [documentation][axtreme_docs] on GitHub pages.

## Notes on Design Decisions

### Imports
We are breaking this rule, and often import classes etc. This follows the approach taken in packages such as `pytorch` `botorch` etc.
#### Definition
[Google code standard](https://google.github.io/styleguide/pyguide.html#22-imports) suggests:
> "Use import statements for packages and modules only, not for individual types, classes, or functions"
#### pros
* often package with similar names (e.g utils), but the actual method required is clear diferentiated.
* Less verbose
#### cons
* Breaking some recommended practice, not sure what they impact will be.

### Numpy vs. Tensors
* Numpy: Working with ax/in general
* Torch: working inside or touching "Botorch Layer", or anywhere need gpu or grad
#### pros
* If work mostly with tensor need to constantly convert them to numpy when winteracting with ax, plot etc.
#### cons
* numpy and tensors have slightly different interfaces
* Means we don't have one default way of working

## Meta

Copyright (c) 2024 [DNV](https://www.dnv.com) AS. All rights reserved.

Sebastian Winter - sebastian.winter@dnv.com

Kristoffer Skare - kristoffer.skare@dnv.com

Magnus Kristiansen - magnus.kristiansen@dnv.com

Distributed under the MIT license. See [LICENSE](LICENSE.md) for more information.

[https://github.com/dnv-opensource/axtreme](https://github.com/dnv-opensource/axtreme)

## Contributing

1. Fork it (<https://github.com/dnv-opensource/axtreme/fork>) (Note: this is currently disabled for this repo. For DNV internal development, continue with the next step.)
2. Create an issue in your GitHub repo
3. Create your branch based on the issue number and type (`git checkout -b issue-name`)
4. Evaluate and stage the changes you want to commit (`git add -i`)
5. Commit your changes (`git commit -am 'place a descriptive commit message here'`)
6. Push to the branch (`git push origin issue-name`)
7. Create a new Pull Request in GitHub

For your contribution, please make sure you follow the [STYLEGUIDE](STYLEGUIDE.md) before creating the Pull Request.

<!-- Markdown link & img dfn's -->
[axtreme_docs]: https://dnv-opensource.github.io/axtreme/README.html
