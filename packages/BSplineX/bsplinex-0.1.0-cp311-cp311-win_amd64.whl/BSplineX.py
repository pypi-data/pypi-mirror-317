# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BSplineXpy
else:
    import _BSplineXpy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BSplineXpy.delete_SwigPyIterator

    def value(self):
        return _BSplineXpy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BSplineXpy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BSplineXpy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BSplineXpy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BSplineXpy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BSplineXpy.SwigPyIterator_copy(self)

    def next(self):
        return _BSplineXpy.SwigPyIterator_next(self)

    def __next__(self):
        return _BSplineXpy.SwigPyIterator___next__(self)

    def previous(self):
        return _BSplineXpy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BSplineXpy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BSplineXpy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BSplineXpy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BSplineXpy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BSplineXpy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BSplineXpy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BSplineXpy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BSplineXpy:
_BSplineXpy.SwigPyIterator_swigregister(SwigPyIterator)
class OpenUniform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSplineXpy.OpenUniform_swiginit(self, _BSplineXpy.new_OpenUniform(*args))
    __swig_destroy__ = _BSplineXpy.delete_OpenUniform

    def evaluate(self, value):
        return _BSplineXpy.OpenUniform_evaluate(self, value)

    def basis(self, value):
        return _BSplineXpy.OpenUniform_basis(self, value)

    def fit(self, x, y):
        return _BSplineXpy.OpenUniform_fit(self, x, y)

    def get_control_points(self):
        return _BSplineXpy.OpenUniform_get_control_points(self)

# Register OpenUniform in _BSplineXpy:
_BSplineXpy.OpenUniform_swigregister(OpenUniform)
cvar = _BSplineXpy.cvar
DENSE_MAX_COL = cvar.DENSE_MAX_COL


def open_uniform(*args):
    return _BSplineXpy.open_uniform(*args)
class OpenUniformConstant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSplineXpy.OpenUniformConstant_swiginit(self, _BSplineXpy.new_OpenUniformConstant(*args))
    __swig_destroy__ = _BSplineXpy.delete_OpenUniformConstant

    def evaluate(self, value):
        return _BSplineXpy.OpenUniformConstant_evaluate(self, value)

    def basis(self, value):
        return _BSplineXpy.OpenUniformConstant_basis(self, value)

    def fit(self, x, y):
        return _BSplineXpy.OpenUniformConstant_fit(self, x, y)

    def get_control_points(self):
        return _BSplineXpy.OpenUniformConstant_get_control_points(self)

# Register OpenUniformConstant in _BSplineXpy:
_BSplineXpy.OpenUniformConstant_swigregister(OpenUniformConstant)

def open_uniform_constant(*args):
    return _BSplineXpy.open_uniform_constant(*args)
class OpenNonUniform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSplineXpy.OpenNonUniform_swiginit(self, _BSplineXpy.new_OpenNonUniform(*args))
    __swig_destroy__ = _BSplineXpy.delete_OpenNonUniform

    def evaluate(self, value):
        return _BSplineXpy.OpenNonUniform_evaluate(self, value)

    def basis(self, value):
        return _BSplineXpy.OpenNonUniform_basis(self, value)

    def fit(self, x, y):
        return _BSplineXpy.OpenNonUniform_fit(self, x, y)

    def get_control_points(self):
        return _BSplineXpy.OpenNonUniform_get_control_points(self)

# Register OpenNonUniform in _BSplineXpy:
_BSplineXpy.OpenNonUniform_swigregister(OpenNonUniform)

def open_nonuniform(*args):
    return _BSplineXpy.open_nonuniform(*args)
class OpenNonUniformConstant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSplineXpy.OpenNonUniformConstant_swiginit(self, _BSplineXpy.new_OpenNonUniformConstant(*args))
    __swig_destroy__ = _BSplineXpy.delete_OpenNonUniformConstant

    def evaluate(self, value):
        return _BSplineXpy.OpenNonUniformConstant_evaluate(self, value)

    def basis(self, value):
        return _BSplineXpy.OpenNonUniformConstant_basis(self, value)

    def fit(self, x, y):
        return _BSplineXpy.OpenNonUniformConstant_fit(self, x, y)

    def get_control_points(self):
        return _BSplineXpy.OpenNonUniformConstant_get_control_points(self)

# Register OpenNonUniformConstant in _BSplineXpy:
_BSplineXpy.OpenNonUniformConstant_swigregister(OpenNonUniformConstant)

def open_nonuniform_constant(*args):
    return _BSplineXpy.open_nonuniform_constant(*args)
class ClampedUniform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSplineXpy.ClampedUniform_swiginit(self, _BSplineXpy.new_ClampedUniform(*args))
    __swig_destroy__ = _BSplineXpy.delete_ClampedUniform

    def evaluate(self, value):
        return _BSplineXpy.ClampedUniform_evaluate(self, value)

    def basis(self, value):
        return _BSplineXpy.ClampedUniform_basis(self, value)

    def fit(self, x, y):
        return _BSplineXpy.ClampedUniform_fit(self, x, y)

    def get_control_points(self):
        return _BSplineXpy.ClampedUniform_get_control_points(self)

# Register ClampedUniform in _BSplineXpy:
_BSplineXpy.ClampedUniform_swigregister(ClampedUniform)

def clamped_uniform(*args):
    return _BSplineXpy.clamped_uniform(*args)
class ClampedUniformConstant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSplineXpy.ClampedUniformConstant_swiginit(self, _BSplineXpy.new_ClampedUniformConstant(*args))
    __swig_destroy__ = _BSplineXpy.delete_ClampedUniformConstant

    def evaluate(self, value):
        return _BSplineXpy.ClampedUniformConstant_evaluate(self, value)

    def basis(self, value):
        return _BSplineXpy.ClampedUniformConstant_basis(self, value)

    def fit(self, x, y):
        return _BSplineXpy.ClampedUniformConstant_fit(self, x, y)

    def get_control_points(self):
        return _BSplineXpy.ClampedUniformConstant_get_control_points(self)

# Register ClampedUniformConstant in _BSplineXpy:
_BSplineXpy.ClampedUniformConstant_swigregister(ClampedUniformConstant)

def clamped_uniform_constant(*args):
    return _BSplineXpy.clamped_uniform_constant(*args)
class ClampedNonUniform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSplineXpy.ClampedNonUniform_swiginit(self, _BSplineXpy.new_ClampedNonUniform(*args))
    __swig_destroy__ = _BSplineXpy.delete_ClampedNonUniform

    def evaluate(self, value):
        return _BSplineXpy.ClampedNonUniform_evaluate(self, value)

    def basis(self, value):
        return _BSplineXpy.ClampedNonUniform_basis(self, value)

    def fit(self, x, y):
        return _BSplineXpy.ClampedNonUniform_fit(self, x, y)

    def get_control_points(self):
        return _BSplineXpy.ClampedNonUniform_get_control_points(self)

# Register ClampedNonUniform in _BSplineXpy:
_BSplineXpy.ClampedNonUniform_swigregister(ClampedNonUniform)

def clamped_nonuniform(*args):
    return _BSplineXpy.clamped_nonuniform(*args)
class ClampedNonUniformConstant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSplineXpy.ClampedNonUniformConstant_swiginit(self, _BSplineXpy.new_ClampedNonUniformConstant(*args))
    __swig_destroy__ = _BSplineXpy.delete_ClampedNonUniformConstant

    def evaluate(self, value):
        return _BSplineXpy.ClampedNonUniformConstant_evaluate(self, value)

    def basis(self, value):
        return _BSplineXpy.ClampedNonUniformConstant_basis(self, value)

    def fit(self, x, y):
        return _BSplineXpy.ClampedNonUniformConstant_fit(self, x, y)

    def get_control_points(self):
        return _BSplineXpy.ClampedNonUniformConstant_get_control_points(self)

# Register ClampedNonUniformConstant in _BSplineXpy:
_BSplineXpy.ClampedNonUniformConstant_swigregister(ClampedNonUniformConstant)

def clamped_nonuniform_constant(*args):
    return _BSplineXpy.clamped_nonuniform_constant(*args)
class PeriodicUniform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSplineXpy.PeriodicUniform_swiginit(self, _BSplineXpy.new_PeriodicUniform(*args))
    __swig_destroy__ = _BSplineXpy.delete_PeriodicUniform

    def evaluate(self, value):
        return _BSplineXpy.PeriodicUniform_evaluate(self, value)

    def basis(self, value):
        return _BSplineXpy.PeriodicUniform_basis(self, value)

    def fit(self, x, y):
        return _BSplineXpy.PeriodicUniform_fit(self, x, y)

    def get_control_points(self):
        return _BSplineXpy.PeriodicUniform_get_control_points(self)

# Register PeriodicUniform in _BSplineXpy:
_BSplineXpy.PeriodicUniform_swigregister(PeriodicUniform)

def periodic_uniform(*args):
    return _BSplineXpy.periodic_uniform(*args)
class PeriodicNonUniform(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BSplineXpy.PeriodicNonUniform_swiginit(self, _BSplineXpy.new_PeriodicNonUniform(*args))
    __swig_destroy__ = _BSplineXpy.delete_PeriodicNonUniform

    def evaluate(self, value):
        return _BSplineXpy.PeriodicNonUniform_evaluate(self, value)

    def basis(self, value):
        return _BSplineXpy.PeriodicNonUniform_basis(self, value)

    def fit(self, x, y):
        return _BSplineXpy.PeriodicNonUniform_fit(self, x, y)

    def get_control_points(self):
        return _BSplineXpy.PeriodicNonUniform_get_control_points(self)

# Register PeriodicNonUniform in _BSplineXpy:
_BSplineXpy.PeriodicNonUniform_swigregister(PeriodicNonUniform)

def periodic_nonuniform(*args):
    return _BSplineXpy.periodic_nonuniform(*args)

