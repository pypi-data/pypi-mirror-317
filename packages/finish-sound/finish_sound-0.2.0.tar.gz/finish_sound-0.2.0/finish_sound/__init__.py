import pkg_resources
import random
from IPython.display import Audio, display, Javascript
import os
from gtts import gTTS

class CustomSound:
    """
    A class to represent a custom sound that can be generated using text-to-speech.
    Automatically generates the audio file when text is set.
    """
    def __init__(self, text="Your code is finished running", output_dir=".", filename="custom_sound.mp3", accent="com.au"):
        self._text = text
        self.output_dir = output_dir
        self.filename = filename
        self.accent = accent  # Default accent is set to 'com.au'
        self.audio_file = os.path.join(self.output_dir, self.filename)
        self._generate_tts()  # Generate audio upon initialization

    @property
    def text(self):
        return self._text

    @text.setter
    def text(self, new_text):
        self._text = new_text
        self._generate_tts()  # Regenerate audio when text is updated

    @property
    def accent(self):
        return self._accent

    @accent.setter
    def accent(self, new_accent):
        self._accent = new_accent
        self._generate_tts()  # Regenerate audio when accent is updated

    def _generate_tts(self):
        """
        Generates a TTS audio file for the text and saves it to the specified location.
        """
        tts = gTTS(self._text, tld=self.accent)
        tts.save(self.audio_file)


def play_custom_sound(sound_obj):
    """
    Plays the custom sound generated by a CustomSound object.

    Args:
        sound_obj (CustomSound): The custom sound object.
    """
    if not os.path.exists(sound_obj.audio_file):
        raise FileNotFoundError(f"Audio file '{sound_obj.audio_file}' not found. Ensure the TTS generation succeeded.")

    # Play the audio file
    audio = Audio(sound_obj.audio_file)
    display(audio)
    display(Javascript('document.querySelector("audio").play()'))


def play_finish_sound_notebook(sound_name=None):
    """
    Plays a specified finish sound or a random finish sound from the package's resources using IPython.display.Audio in Colab.
    Automatically plays the sound using JavaScript.

    Args:
        sound_name (str): Optional. Name of the specific sound file (with extension) to play.
    """
    # List all files in the 'sounds' directory
    sound_files = pkg_resources.resource_listdir("finish_sound", "sounds")

    # Filter out only .mp3 files
    mp3_files = [file for file in sound_files if file.endswith(".mp3")]

    # Determine the sound file to play
    if sound_name and sound_name in mp3_files:
        selected_sound = sound_name
    else:
        if sound_name:
            print(f"Specified sound '{sound_name}' not found. Playing a random sound instead.")
        selected_sound = random.choice(mp3_files)

    # Get the full path to the selected sound file
    sound_file = pkg_resources.resource_filename("finish_sound", f"sounds/{selected_sound}")

    # Create the audio object
    audio = Audio(sound_file)

    # Display the audio player and play it automatically using JavaScript
    display(audio)
    display(Javascript('document.querySelector("audio").play()'))




def play_finish_sound():
    """
    Plays a random finish sound from the package's resources.
    """
    # List all files in the 'sounds' directory
    sound_files = pkg_resources.resource_listdir("finish_sound", "sounds")
    
    # Filter out only .mp3 files
    mp3_files = [file for file in sound_files if file.endswith(".mp3")]
    
    # Select a random file from the list
    random_sound = random.choice(mp3_files)
    
    # Get the full path to the randomly selected sound file
    sound_file = pkg_resources.resource_filename(
        "finish_sound", f"sounds/{random_sound}"
    )
    
    # print(f"Code finished. Playing sound: {random_sound}")
    playsound(sound_file)
