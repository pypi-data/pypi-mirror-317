[project]
name = "taskme"
version = "0.0.1-a1"
description = "Create tasks in your project management tools when you write TODO comments"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "mikko", email = "mbayabo@gmail.com" }
]
requires-python = ">=3.10,<3.13"
dependencies = [
    "pydantic>=2.10.4",
    "typer>=0.15.1",
]
keywords = [
  "automation",
  "todo",
  "project",
  "management",
  "task",
  "issue",
  "comment",
]
classifiers = [
  # https://pypi.org/classifiers/
  "Development Status :: 1 - Planning",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
Repository = "https://github.com/mikkothegeeko/taskme"
Documentation = "https://mikkothegeeko.github.io/taskme/"
Changelog = "https://github.com/mikkothegeeko/taskme/blob/main/CHANGELOG.md"

[project.scripts]
taskme = "taskme:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
default-groups = ["dev"]

[dependency-groups]
test = [
    "coverage>=7.6.9",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.25.0",
    "pytest-cov>=6.0.0",
    "pytest-html>=4.1.1",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.3.1",
    "pytest-xdist>=3.6.1",
]
lint = [
    "pyright>=1.1.391",
    "ruff>=0.8.4",
]
qa = [
    "bandit>=1.8.0",
    "radon>=6.0.1",
]
dev = [
    { include-group = "lint" },
    { include-group = "test" },
    "debugpy>=1.8.11",
    "python-dotenv>=1.0.1",
]
docs = [
    "mkdocs-material>=9.5.49",
    "mkdocs>=1.6.1",
    "sphinx>=8.1.3",
]

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]
# Same as Black.
line-length = 120
indent-width = 4

# Assume Python 3.9
target-version = "py39"


[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "D",
    "UP",
    "YTT",
    "ANN",
    "B",
    "A",
    "COM",
    "C4",
    "DTZ",
    "ISC",
    "ICN",
    "INP",
    "PIE",
    "PT",
    "RET",
    "SIM",
    "TID",
    "ARG",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "RUF",
]
ignore = [
    "D105",
    "D107",
    "D203",
    "D212",
    "UP006",
    "UP007",
    "ANN101",
    "ANN102",
    "D400",
    "D406",
    "D407",
    "PLC1901",
    "UP035",
]
unfixable = ["F401", "F841"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint.per-file-ignores]
"test_*.py" = ["ANN001", "ANN002", "ANN003", "D101", "D103"]
