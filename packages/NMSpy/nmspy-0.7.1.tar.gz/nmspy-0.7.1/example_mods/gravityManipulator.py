import logging
from dataclasses import dataclass

from pymhf.core.hooking import on_key_pressed
from pymhf.core.mod_loader import ModState
from nmspy import NMSMod
from pymhf.core.calling import call_function
from pymhf.gui import FLOAT
import nmspy.data.functions.hooks as hooks

# A quick mod used to change the gravity multiplier on all planets simultaneously, utilizing pyMHF's auto-gui.

logger = logging.getLogger("GravMod")


@dataclass
class gravModState(ModState):
    # A special class inheriting from ModState which persists between mod Hot Reloads, allowing mod developers
    # to cache pointers, values etc.
    gravity: int = 1
    planetAddresses: list[int] = []


class gravityManipulator(NMSMod):
    # General "Nice To Have"s
    __author__ = "ThatBomberBoi"
    __description__ = "Gravity Manipulator"
    __version__ = "0.2"
    __NMSPY_required_version__ = "0.7.0"
    
    # Create an instance of the persistant ModState Class in your mod class.
    state = gravModState()

    def __init__(self):
        super().__init__()
        self.should_print = False

    # Used to define a Float Type with a label in the Mod GUI, autogenerated by pyMHF.
    @property
    @FLOAT("Gravity Multiplier:")
    def gravMult(self):
        return self.state.gravity

    # Used to actually update the persisted value with the one input by the user in the GUI.
    @gravMult.setter
    def gravMult(self, value):
        self.state.gravity = value 

    # Functions are hooked by specifying the function to be hooked from the list of in game functions
    # available. You can specify whether you want your detour to run either before or after the original
    # function as shown below.
    @hooks.cGcPlanet.SetupRegionMap.after
    def onRegionMap(self, this):
        # Include each in-game function's arguments seperately in the function, or use *args to get all
        # arguments without knowing them prior.
        # In this case we know that the argument is `this` which is a pointer to the instance of `cGcPlanet`
        # which is automatically passed into this function by the game.
        logger.info(f"Generated A Planet!")
        self.state.planetAddresses.append(this)
        logger.debug(f"Found {len(self.state.planetAddresses)} Planets So Far")

    @on_key_pressed("o")
    def modifyGravity(self):
        for ptr in self.state.planetAddresses:
            # Call an in-game function directly from your mod code.
            # You will need to provide the arguments for the in-game function
            call_function("cGcPlanet::UpdateGravity", ptr, self.state.gravity)
        logger.info(f"Set Planetary Gravity Multiplier To {self.state.gravity} For All Planets") 
