{% macro _dbt_osmosis_compare_queries(a_query, b_query, primary_key=None) -%}
{{
    return(
        adapter.dispatch("_dbt_osmosis_compare_queries")(
            a_query, b_query, primary_key
        )
    )
}}
{%- endmacro %}

{% macro default___dbt_osmosis_compare_queries(a_query, b_query, primary_key=None) %}

with

    a as ({{ a_query }}),

    b as ({{ b_query }}),

    a_intersect_b as (select * from a {{ dbt_utils.intersect() }} select * from b),

    a_except_b as (select * from a {{ dbt_utils.except() }} select * from b),

    b_except_a as (select * from b {{ dbt_utils.except() }} select * from a),

    all_records as (

        select *, true as in_a, true as in_b
        from a_intersect_b

        union all

        select *, true as in_a, false as in_b
        from a_except_b

        union all

        select *, false as in_a, true as in_b
        from b_except_a

    )

select *
from all_records
where not (in_a and in_b)
order by {{ primary_key ~ ", " if primary_key is not none }} in_a desc, in_b desc

{% endmacro %}

    -- -
    {% macro _dbt_osmosis_compare_queries_agg(a_query, b_query, primary_key=None) -%}
    {{
        return(
            adapter.dispatch("_dbt_osmosis_compare_queries_agg")(
                a_query, b_query, primary_key
            )
        )
    }}
    {%- endmacro %}

{% macro default___dbt_osmosis_compare_queries_agg(
    a_query, b_query, primary_key=None
) %}

with

    a as ({{ a_query }}),

    b as ({{ b_query }}),

    a_intersect_b as (select * from a {{ dbt_utils.intersect() }} select * from b),

    a_except_b as (select * from a {{ dbt_utils.except() }} select * from b),

    b_except_a as (select * from b {{ dbt_utils.except() }} select * from a),

    all_records as (

        select *, true as in_a, true as in_b
        from a_intersect_b

        union all

        select *, true as in_a, false as in_b
        from a_except_b

        union all

        select *, false as in_a, true as in_b
        from b_except_a

    ),

    summary_stats as (
        select in_a, in_b, count(*) as count from all_records group by 1, 2
    )

select *, round(100.0 * count / sum(count) over (), 2) as percent_of_total

from summary_stats
order by in_a desc, in_b desc

{% endmacro %}

    -- -
    {% macro _dbt_osmosis_pop_columns(columns, columns_to_pop) %}
    {% set popped_columns = [] %}

    {% for column in columns %}
    {% if column.name | lower not in columns_to_pop | lower %}
    {% do popped_columns.append(column) %}
    {% endif %}
    {% endfor %}

    {{ return(popped_columns) }}
    {% endmacro %}

    -- -
    {% macro _dbt_osmosis_compare_relations(
    a_relation, b_relation, exclude_columns=[], primary_key=none
) %}

    {%- set a_columns = adapter.get_columns_in_relation(a_relation) -%}

    {% set check_columns = _dbt_osmosis_pop_columns(a_columns, exclude_columns) %}

    {% set check_cols_csv = check_columns | map(attribute="quoted") | join(", ") %}

{% set a_query %}
select
    {{ check_cols_csv }}
    {% if primary_key is none %}, {{ hash(check_cols_csv) }} as _pk{% endif %}

from {{ a_relation }}
{% endset %}

{% set b_query %}
select
    {{ check_cols_csv }}
    {% if primary_key is none %}, {{ hash(check_cols_csv) }} as _pk{% endif %}

from {{ b_relation }}
{% endset %}

    {{ _dbt_osmosis_compare_queries(a_query, b_query, primary_key or "_pk") }}

    {% endmacro %}

    -- -
    {% macro _dbt_osmosis_compare_relations_agg(
    a_relation, b_relation, exclude_columns=[], primary_key=none
) %}

    {%- set a_columns = adapter.get_columns_in_relation(a_relation) -%}

    {% set check_columns = _dbt_osmosis_pop_columns(a_columns, exclude_columns) %}

    {% set check_cols_csv = check_columns | map(attribute="quoted") | join(", ") %}

{% set a_query %}
select
    {{ check_cols_csv }}
    {% if primary_key is none %}, {{ hash(check_cols_csv) }} as _pk{% endif %}

from {{ a_relation }}
{% endset %}

{% set b_query %}
select
    {{ check_cols_csv }}
    {% if primary_key is none %}, {{ hash(check_cols_csv) }} as _pk{% endif %}

from {{ b_relation }}
{% endset %}

    {{ _dbt_osmosis_compare_queries_agg(a_query, b_query, primary_key or "_pk") }}

    {% endmacro %}

    -- -
    {% macro _dbt_osmosis_compare_relation_columns(a_relation, b_relation) %}
    {{
        return(
            adapter.dispatch("_dbt_osmosis_compare_relation_columns")(
                a_relation, b_relation
            )
        )
    }}
    {% endmacro %}

{% macro default___dbt_osmosis_compare_relation_columns(a_relation, b_relation) %}

with

    a_cols as ({{ get_columns_in_relation_sql_dosmo(a_relation) }}),

    b_cols as ({{ get_columns_in_relation_sql_dosmo(b_relation) }})

select
    column_name,
    a_cols.ordinal_position as a_ordinal_position,
    b_cols.ordinal_position as b_ordinal_position,
    a_cols.data_type as a_data_type,
    b_cols.data_type as b_data_type,
    coalesce(
        a_cols.ordinal_position = b_cols.ordinal_position, false
    ) as has_ordinal_position_match,
    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match
from a_cols
full outer join b_cols using (column_name)
order by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)

{% endmacro %}

    -- -
    {% macro get_columns_in_relation_sql_dosmo(relation) %}

    {{ adapter.dispatch("get_columns_in_relation_sql_dosmo")(relation) }}

    {% endmacro %}

{% macro redshift__get_columns_in_relation_sql_dosmo(relation) %}
{#-
See https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/redshift/dbt/include/redshift/macros/adapters.sql#L71
Edited to include ordinal_position
-#}
with

    bound_views as (
        select
            ordinal_position,
            table_schema,
            column_name,
            data_type,
            character_maximum_length,
            numeric_precision,
            numeric_scale

        from information_schema."columns"
        where table_name = '{{ relation.identifier }}'
    ),

    unbound_views as (
        select
            ordinal_position,
            view_schema,
            col_name,
            case
                when col_type ilike 'character varying%'
                then 'character varying'
                when col_type ilike 'numeric%'
                then 'numeric'
                else col_type
            end as col_type,
            case
                when col_type like 'character%'
                then nullif(regexp_substr(col_type, '[0-9]+'), '')::int
                else null
            end as character_maximum_length,
            case
                when col_type like 'numeric%'
                then
                    nullif(
                        split_part(regexp_substr(col_type, '[0-9,]+'), ',', 1), ''
                    )::int
                else null
            end as numeric_precision,
            case
                when col_type like 'numeric%'
                then
                    nullif(
                        split_part(regexp_substr(col_type, '[0-9,]+'), ',', 2), ''
                    )::int
                else null
            end as numeric_scale

        from
            pg_get_late_binding_view_cols()
            cols(
                view_schema name,
                view_name name,
                col_name name,
                col_type varchar,
                ordinal_position int
            )
        where view_name = '{{ relation.identifier }}'
    ),

    unioned as (
        select *
        from bound_views
        union all
        select *
        from unbound_views
    )

select *

from unioned
{% if relation.schema %} where table_schema = '{{ relation.schema }}' {% endif %}
order by ordinal_position

{% endmacro %}

{% macro snowflake__get_columns_in_relation_sql_dosmo(relation) %}
{#-
From: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48
Edited to include ordinal_position
-#}
select
    ordinal_position,
    column_name,
    data_type,
    character_maximum_length,
    numeric_precision,
    numeric_scale

from {{ relation.information_schema("columns") }}

where
    table_name ilike '{{ relation.identifier }}'
    {% if relation.schema %} and table_schema ilike '{{ relation.schema }}' {% endif %}
    {% if relation.database %}
    and table_catalog ilike '{{ relation.database }}'
    {% endif %}
order by ordinal_position
{% endmacro %}

{% macro postgres__get_columns_in_relation_sql_dosmo(relation) %}
{#-
From: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32
Edited to include ordinal_position
-#}
select
    ordinal_position,
    column_name,
    data_type,
    character_maximum_length,
    numeric_precision,
    numeric_scale

from {{ relation.information_schema("columns") }}
where
    table_name = '{{ relation.identifier }}'
    {% if relation.schema %} and table_schema = '{{ relation.schema }}' {% endif %}
order by ordinal_position
{% endmacro %}


{% macro bigquery__get_columns_in_relation_sql_dosmo(relation) %}

select ordinal_position, column_name, data_type

from `{{ relation.database }}`.`{{ relation.schema }}`.information_schema.columns
where table_name = '{{ relation.identifier }}'

{% endmacro %}

    -- -
    {% macro _dbt_osmosis_compare_column_values(
    a_query, b_query, primary_key, column_to_compare
) -%}
    {{
        return(
            adapter.dispatch("_dbt_osmosis_compare_column_values")(
                a_query, b_query, primary_key, column_to_compare
            )
        )
    }}
    {%- endmacro %}

{% macro default___dbt_osmosis_compare_column_values(
    a_query, b_query, primary_key, column_to_compare
) -%}
with

    a_query as ({{ a_query }}),

    b_query as ({{ b_query }}),

    joined as (
        select
            coalesce(
                a_query.{{ primary_key }}, b_query.{{ primary_key }}
            ) as {{ primary_key }},
            a_query.{{ column_to_compare }} as a_query_value,
            b_query.{{ column_to_compare }} as b_query_value,
            case
                when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }}
                then '✅: perfect match'
                when
                    a_query.{{ column_to_compare }} is null
                    and b_query.{{ column_to_compare }} is null
                then '✅: both are null'
                when a_query.{{ primary_key }} is null
                then '🤷: ‍missing from a'
                when b_query.{{ primary_key }} is null
                then '🤷: missing from b'
                when a_query.{{ column_to_compare }} is null
                then '🤷: value is null in a only'
                when b_query.{{ column_to_compare }} is null
                then '🤷: value is null in b only'
                when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }}
                then '🙅: ‍values do not match'
                else 'unknown'  -- this should never happen
            end as match_status,
            case
                when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }}
                then 0
                when
                    a_query.{{ column_to_compare }} is null
                    and b_query.{{ column_to_compare }} is null
                then 1
                when a_query.{{ primary_key }} is null
                then 2
                when b_query.{{ primary_key }} is null
                then 3
                when a_query.{{ column_to_compare }} is null
                then 4
                when b_query.{{ column_to_compare }} is null
                then 5
                when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }}
                then 6
                else 7  -- this should never happen
            end as match_order

        from a_query

        full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}
    ),

    aggregated as (
        select
            '{{ column_to_compare }}' as column_name,
            match_status,
            match_order,
            count(*) as count_records
        from joined

        group by column_name, match_status, match_order
    )

select
    column_name,
    match_status,
    count_records,
    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total

from aggregated

order by match_order

{% endmacro %}
