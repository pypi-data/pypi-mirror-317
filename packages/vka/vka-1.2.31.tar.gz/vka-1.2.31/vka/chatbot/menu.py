# -*- coding: utf-8 -*-
# flake8: noqa
from typing import Optional

from vka import Keyboard, Button

# TODO –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ


def any_button(): ...
def back_button(): ...


class CreatorMenu:
    def __init__(self, menu_commands: list, command: str, func_obj):
        self.command = command
        self.func_obj = func_obj
        self.__menu_commands__ = menu_commands
        self.__menu_commands__.append(
            {'command': command, 'func_obj': func_obj, 'button': []}
        )
        self.index = [
            self.__menu_commands__.index(i) for i in self.__menu_commands__
            if i['command'] == self.command
        ][0]
        self.__menu_commands__[self.index]['menu'] = []

    def add_menu(
            self, command: str, icon: str,
            category: Optional[str] = None,
            subcategory: Optional[str] = None,
    ):
        self.__menu_commands__[self.index]['menu'].append(
            {
                'command': command,
                'category': category,
                'subcategory': subcategory,
                'icon': icon,
                'button': [],
            }
        )

    def keyboard_generation(
        self
    ):
        for i in self.__menu_commands__:
            if i['button']:
                keyboard = Keyboard(
                    inline=True
                )
                for j in self.__menu_commands__[self.index]['menu']:
                    if j['category'] is not None and \
                            j['category'] is None:
                        keyboard.add(
                            Button.callback(j['icon']).secondary().on_called(
                                self.func_obj, args=j['category']
                            ),
                        )
                if len(keyboard.scheme["buttons"]) == 3:
                    keyboard.new_line()

        for i in self.__menu_commands__[self.index]['menu']:
            if not i['button']:
                keyboard = Keyboard(
                    inline=True
                )
                for j in self.__menu_commands__[self.index]['menu']:
                    if i['category'] == j['subcategory'] and \
                            j['category'] is not None \
                            and i['category'] is not None:
                        keyboard.add(
                            Button.callback(j['icon']).secondary().on_called(
                                self.func_obj, args=j['category']
                            ),
                        )
                if len(keyboard.scheme["buttons"]) == 3:
                    keyboard.new_line()
                if keyboard.scheme["buttons"] != [[]]:
                    keyboard.add(
                        Button.callback('‚¨ÖÔ∏è').secondary().on_called(
                            back_button, args=i['category']
                        ),
                    )
                i['button'] = keyboard if (
                        keyboard.scheme["buttons"] != [[]]) \
                    else []


# m = CreatorMenu([], '–º–∞–≥–∞–∑–∏–Ω', func_obj=any_button)
# m.add_menu(command='—Ç–æ–≤–∞—Ä—ã', category='store', icon='üß≥')
# m.add_menu(command='–∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫', category='history_buy', icon='üõç')
# m.add_menu(command='–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏', category='active_buy', icon='üõí')
# m.add_menu(command='–≤–∏–ø', category='vip', icon='üíé', subcategory='store')
# m.add_menu(command='–∞—Ä–µ–Ω–¥–∞', category='rent', icon='üìÉ', subcategory='store')
# m.add_menu(
#     command='1 –¥–µ–Ω—å - 1—Ä\n7 –¥–Ω–µ–π - 10—Ä\n30 –¥–Ω–µ–π - 50—Ä',
#     icon='', subcategory='vip'
# )
# m.add_menu(
#     command='30 –¥–Ω–µ–π - 100—Ä',
#     icon='', subcategory='rent'
# )
#
# m.keyboard_generation()
