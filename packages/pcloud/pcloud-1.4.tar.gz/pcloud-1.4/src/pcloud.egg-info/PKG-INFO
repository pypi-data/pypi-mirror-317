Metadata-Version: 2.1
Name: pcloud
Version: 1.4
Summary: A client library for pCloud
Home-page: https://pypi.python.org/pypi/pcloud
Author: Tom Gross
Author-email: itconsense@gmail.com
License: MIT
Keywords: Python pCloud REST
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: Environment :: Other Environment
Classifier: Environment :: Web Environment
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Operating System :: OS Independent
Classifier: License :: OSI Approved :: MIT License
Classifier: Topic :: Software Development :: Libraries :: Python Modules
License-File: LICENSE
Requires-Dist: requests
Requires-Dist: requests-toolbelt
Requires-Dist: wheel>=0.45.1
Requires-Dist: setuptools>=75.6.0
Provides-Extra: pyfs
Requires-Dist: fs; extra == "pyfs"

==============================================================================
pcloud - A Python API client for pCloud
==============================================================================

.. image:: https://github.com/tomgross/pcloud/actions/workflows/pcloud-test.yml/badge.svg
    :target: https://github.com/tomgross/pcloud/actions

This Python **(Version >= 3.6 only!)** library provides a Python API to the pCloud storage.

Features
========

- Can be used as a library
- Provides a PyFileSystem implementation

Examples
========

Usage of API
------------

 >>> from pcloud import PyCloud
 >>> pc = PyCloud('email@example.com', 'SecretPassword')
 >>> pc.listfolder(folderid=0)

Use alternate endpoints (*API calls have to be made to the correct API host name depending were the user has been
registered â€“ api.pcloud.com for United States and eapi.pcloud.com for Europe.*)

 >>> from pcloud import PyCloud
 >>> pc = PyCloud('email@example.com', 'SecretPassword', endpoint="eapi")
 >>> pc.listfolder(folderid=0)

PyCloud also provides an API method to retrieve the nearest API server, which gives
you a speed gain for some API operations. To use PyCloud with this feature create
the PyCloud-object with the *nearest* endpoint parameter:

 >>> from pcloud import PyCloud
 >>> pc = PyCloud('email@example.com', 'SecretPassword', endpoint="nearest")
 >>> pc.listfolder(folderid=0)

OAuth 2.0 authentication
------------------------

To use OAuth 2.0 authentication you need to create an App in pCloud (https://docs.pcloud.com/my_apps/).

Add the following redirect URI http://localhost:65432/
(Make sure port 65432 is available on your machine. Otherwise you need to adjust the `PORT` in oauth2.py)

Note! To see the redirect URI in the settings of pCloud you have to log out and log in again.

Once you finished adding the app and setting the redirect URI you are ready to use
OAuth 2.0 with PyCloud on your machine. For the communication with pCloud PyCloud uses the
builtin `webserver`-module. This means you need a real browser on your system available.

 >>> from pcloud import PyCloud
 >>> pc = PyCloud.oauth2_authorize(client_id="XYZ", client_secret="abc123")
 >>> pc.listfolder(folderid=0)

Headless mode
+++++++++++++

OAuth 2.0 is designed to use a browser for the authentication flow. Nevertheless Selenium
can be used to automate this process. For an example see the `pycloud_oauth2`-fixture in `test_oauth2.py`.
This method will not integrated as main functionality, since there are too many dependencies.
You can use it as example for your usecase.

Uploading files
---------------

a) from filenames:

  >>> pc.uploadfile(files=['/full/path/to/image1.jpg', '/Users/tom/another/image.png'],
  ...     path='/path-to-pcloud-dir')

b) from data:

  >>> import io
  >>> from PIL import Image
  >>> img = Image.open('image.jpg', 'r')
  >>> bio = io.BytesIO()
  >>> img.save(bio, format='jpeg')
  >>> pc.uploadfile(data=bio.getvalue(), filename="image.jpg", path='/path-to-pcloud-dir')

Usage of PyFilesystem with opener

  >>> from fs import opener
  >>> opener.open_fs('pcloud://email%40example.com:SecretPassword@/')
  <pCloudFS>

Copying files from Linux to pCloud using PyFilesystem

  >>> from fs import opener, copy
  >>> with opener.open_fs('pcloud://email%40example.com:SecretPassword@/') as pcloud_fs:
  >>>    with opener.open_fs('/opt/data_to_copy') as linux_fs:
  >>>        copy.copy_file(src_fs=linux_fs,
  >>>                       src_path='database.sqlite3',
  >>>                       dst_fs=pcloud_fs,
  >>>                       dst_path='/backup/server/database.sqlite3')

Copy directory from Linux to pCloud using PyFilesystem

  >>> from fs import opener, copy
  >>> with opener.open_fs('pcloud://email%40example.com:SecretPassword@/') as pcloud_fs:
  >>>    with opener.open_fs('/opt/data_to_copy') as linux_fs:
  >>>        copy.copy_dir(src_fs=linux_fs,
  >>>                      src_path='database/',
  >>>                      dst_fs=pcloud_fs,
  >>>                      dst_path='/backup/database/')

Further Documentation
=====================

Implements the pCloud API found at https://docs.pcloud.com/


Installation
============

 $ pip install pcloud

Installation with PyFilesystem support

 $ bin/pip install pcloud[pyfs]

on zsh (Mac):

 $ bin/pip install "pcloud[pyfs]"


Development
===========

For testing purposes a mock server is provided. To use this mock server
you need to add a file with the same name as the method + the `.json` suffix
in the tests/data directory (like `getdigest.json`).
The file contains the expected JSON result.

Contribute
==========

- Issue Tracker: https://github.com/tomgross/pcloud/issues
- Source Code: https://github.com/tomgross/pcloud

License
=======

The project is licensed under MIT (see LICENSE).


Contributors
============

- Tom Gross, itconsense@gmail.com
- Massimo Vannucci (blasterspike)
- Yennick Schepers (yennicks)
- olokelo
- qo4on


Changelog
=========

1.4 (2024-12-29)
----------------

- Update (testing) dependencies [tomgross]
- Run tests on Python 3.9-3.13 [tomgross]
- Allow `eapi` with fs.opener #85 [tomgross]


1.3 (2024-03-01)
----------------

- Reimplement pyfs integration [tomgross]
- Update (test) dependencies and run tests only on Python 3.8-3.12 [tomgross]
- Added more API methods [tomgross]


1.2 (2023-06-24)
----------------

- Add `CONTRIBUTING` guideline and update `CODE_OF_CONDUCT` document [tomgross]
- Add Sonarcloud checker and report test coverage [tomgross]
- Add test for listtokens endpoint [tomgross]
- Changed repo name to https://github.com/tomgross/pcloud/ to be consistent (https://github.com/tomgross/pcloud/issues/70) [tomgross]
- Implement `sharefolder`-endpoint [tomgross]
- Replace ``cgi.FieldStorage`` by ``multipart`` avoiding
  the ``cgi`` module deprecated by Python 3.11. [tomgross]

1.1 (2022-11-14)
----------------

- Fix upload with int folderid #63 [tomgross]
- Add pytest timeout and update testing dependencies [tomgross]
- Implement `copyfile` and `downloadfileasync` methods [tomgross]
- Implement `setlanguage`, `getfeedback`, `diff` & `getfilehistory` methods [tomgross]


1.0 (2022-02-02)
----------------

- ðŸŽ‰ Release unchanged as 1.0 ðŸŽ‰

1.0b2 (2021-12-17)
------------------

- Build wheel package [tomgross]
- Fix file upload with oauth [giust]
- Automated test for OAuth [tomgross]
- Documented headless OAuth [tomgross]

1.0b1 (2021-11-26)
------------------

- Python 3.10 compatibility and dependency updates
- Change port of test server 5000 -> 5023
- Add *getpubzip* API method (https://github.com/tomgross/pcloud/issues/51)
- Allow uploading BIG files by using MultipartEncoder of requests_toolbelt
  (https://github.com/tomgross/pcloud/issues/25, https://github.com/tomgross/pcloud/issues/44)
- Log login process
  [tomgross]

1.0a10 (2021-07-11)
-------------------

- State and test Python 3.9 support [tomgross]
- OAuth 2.0 implementation [tomgross]
- Implement more general methods [tomgross]
- Implement get nearest api server [tomgross]

1.0a9 (2021-01-22)
------------------

- Missing variable in output in case a directory already exists
- Changed errors raised for makedirs
- Do not raise an errors.DirectoryExists when recreate = True
- Added examples to README
  [blasterspike]

- Fix parameter of downloadlink method
  [tomgross]

- Add more details on authentication error
  [yennicks]

- Add new stats endpoint
  [AgusRumayor]

- Add methods for archiving
  [olokelo]

- Add token expire parameter
  [olekelo]

- Start implementing trash methods
  [qo4on, tomgross]

- Add support for alternate endpoints
  [tomgross]

- Add Contributors and fix README ReST Syntax

1.0a8 (2020-02-21)
------------------

- Fix upload of multiple files from paths
  [tomgross]

- Document uploading of files
  [tomgross]

1.0a7 (2020-02-20)
------------------

- Add new API method `createfolderifnotexists` #19
  [Arkoniak, tomgross]

- Fix duplication of data transfer on file upload #17
  [blasterspike, tomgross]

- Consistently use MIT licences
  [tomgross]

1.0a6 (2019-01-18)
------------------

- Fix error while using makedirs from PyFilesystem with recreate=True
  [blasterspike]

1.0a5 (2018-10-22)
------------------

- Fix error while using makedirs from PyFilesystem
  https://github.com/tomgross/pcloud/issues/10
  [blasterspike]

- Test and claim Python 3.7 compatibility
  [tomgross]

1.0a4 (2017-10-29)
------------------

- Fix error with duplicate files parameter #3
  [tomgross]

- Fix upload of data
  [tomgross]

- Do flake8 checks
  [tomgross]


1.0a3 (2017-10-07)
------------------

- Test API with py.test
  [tomgross]

- Support for PyFileSystem
  [tomgross]

- Support for file operations
  [tomgross]

1.0a2 (2017-05-21)
------------------

- Rename to pcloud
  [tomgross]


1.0a1 (2017-05-21)
------------------

- Initial release.
  [tomgross]
