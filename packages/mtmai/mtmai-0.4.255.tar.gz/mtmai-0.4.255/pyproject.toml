[tool.poetry]
name = "mtmai"
version = "0.4.255"
description = ""
authors = ["John Smith <john@example.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "mtmai" }]

[tool.poetry.scripts]
mtmai = "mtmai.__main__:main"

[tool.poetry-dynamic-versioning]
enable = false

style = "pep440"
vcs = "git"
bump = true
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- else -%}
        {{ serialize_pep440(base, stage, revision, dev=distance) }}
    {%- endif -%}
"""

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
fastapi = ">=0.104.1"
pydantic = ">=2.5.1"
sqlmodel = "^0.0.21"
openai = ">=1.3.3"
python-dotenv = ">=1.0.0"
python-multipart = ">=0.0.6"
pydantic-settings = "^2.4.0"
langchain-core = "^0.3.6"
langgraph = ">=0.2.59"
aiofiles = "^23.1.0"
syncer = "^2.0.3"
asyncer = "^0.0.7"
filetype = "^1.2.0"
python-socketio = "^5.11.0"
lazify = "^0.4.0"
tomli = "^2.0.1"
packaging = "^23.1"
docling = "^2.12.0"
# streamlit = "^1.39.0"
nest_asyncio = "^1.5.6"
nanoid = "^2.0.0"
httpx = "^0.27.0"
httpx-sse = ">=0.4.0"
orjson = ">=3.10.1"
psycopg = { extras = ["binary", "pool"], version = "^3.1.13" }
# alembic = "^1.12.1"
python-jose = { extras = ["cryptography"], version = "^3.3.0" }
cachetools = "^5.3.2"
aioboto3 = "^12.0.0"
commentjson = "^0.9.0"
asyncache = "^0.3.1"
structlog = "^23.2.0"
plotly = "^5.18.0"
clipboard = "^0.0.4"
curlify = "^2.2.1"
# numexpr = "^2.10.1"
pyjwt = "^2.9.0"
passlib = "^1.7.4"
json_repair = "^0.25.2"
starlette-context = "^0.3.6"
ddtrace = "^2.15.2"
markdown = "^3.6"
jinja2 = "^3.1.4"
uptrace = "^1.22.0"
langgraph-checkpoint-postgres = "^2.0.9"
email-validator = "^2.2.0"
emails = "^0.6"
pgvector = "^0.3.4"
wikipedia = "^1.4.0"
beautifulsoup4 = ">=4.12.2"
literalai = "0.0.607"
python-logging-loki = "^0.3.1"
google-auth-oauthlib = "^1.2.1"
moviepy = "^1.0.3"
tenacity = "^9.0.0"
playwright = "^1.46.0"
selenium = "^4.24.0"
commandline-config = "^2.2.3"
openpyxl = "^3.1.5"
ddddocr = "^1.5.5"
colorlog = "^6.7.0"
undetected-chromedriver = "^3.5.5"
pymysql = "^1.1.1"
duckduckgo-search = "^6.2.11"
sqlalchemy = "^2.0.34"
asyncpg = "^0.29.0"
# open-interpreter = "^0.4.2"
python-slugify = "^8.0.4"
langchain-openai = "^0.2.1"
langchain-community = "^0.3.1"
pygithub = "^2.4.0"
watchfiles = "^0.24.0"
deepdiff = "^8.0.1"
appdirs = "^1.4.4"
jsonref = "^1.1.0"
pyvis = "^0.3.2"
instructor = "^1.6.4"
prefect = "^3.0.4"
aiocache = "^0.12.3"
camelcasing = "^0.1.3"
jieba = "^0.42.1"
tembo-pgmq-python = { extras = ["async"], version = "^0.9.0" }
phidata = "^2.5.33"
yfinance = "^0.2.46"
psycopg2-binary = "^2.9.10"
crawl4ai = "^0.3.72"
tldextract = "^5.1.2"
websockets = "^12.0"
requests-toolbelt = "^1.0.0"
# supabase = "^2.4.3"
aioredlock = "^0.7.3"
# redis = "^5.0.3"
aiohttp = "^3.8.5"
# toml = "^0.10.2"
uvicorn = { extras = ["standard"], version = "^0.24.0.post1" }
litellm = "^1.42.0"
bs4 = "^0.0.1"
webdriver-manager = "^4.0.1"
pre-commit = "^3.5.0"
pillow = "^10.1.0"
typer = ">=0.12.5"
types-toml = "^0.10.8.7"
fpdf = "^1.7.2"
stripe = "^9.7.0"
#pynsq = "^0.9.1"
mtmaisdk = "^0.4.245"
mcp = "^1.0.0"
g4f = {extras = ["all"], version = "^0.3.7.6"}
groq = "^0.12.0"
crewai-tools = "^0.17.0"
crewai = "^0.86.0"
mem0ai = "^0.1.34"


[tool.poetry.group.dev.dependencies]
pre-commit = "^3.6.2"
types-passlib = "^1.7.7.20240106"
build = "^1.2.1"
twine = "^5.1.1"
debugpy = "^1.8.5"
pylint = "^3.2.6"
jupyter = "^1.0.0"
nbconvert = "^7.16.3"
poethepoet = "^0.26.0"
pyright = "^1.1.371"
ruff = "^0.5.2"
semversioner = "^2.0.3"
playwright = ">=1.39.0"
md2pdf = ">=1.0.1"
jinja2 = ">=3.1.2"

# datashaper = "^0.0.49"
markdown = ">=3.5.1"
colorama = "^0.4.6"
environs = "^11.0.0"
uvicorn = ">=0.24.0.post1"
# htmldocx = "^0.0.6"
python-docx = "^1.1.0"
# types-beautifulsoup4 = "^0.5.14"
# types-Pillow = "^10.0.1"
lxml = { version = ">=4.9.2", extras = ["html_clean"] }

isort = "^5.13.2"
mypy = "^1.4.1"
flake8 = "^6.0.0"
types-requests = "^2.31.0.2"
watchdog = "^3.0.0"
mock = "^5.1.0"
autoflake = "^2.2.0"
pydevd-pycharm = "^233.6745.319"
ipython = "^8.17.2"
streamlit = "^1.28.1"
ipykernel = "^6.26.0"
notebook = "^7.0.6"
freezegun = "^1.2.2"
snoop = "^0.4.3"
rich = { extras = ["jupyter"], version = "^13.7.0" }
clipboard = "^0.0.4"

# unstructured = "^0.15.0"
# tiktoken = ">=0.7.0"
# json-repair = "^0.25.3"
# json5 = "^0.9.25"
# duckduckgo-search = "^6.2.1"
# tavily-python = ">=0.2.8"
# arxiv = ">=2.0.0"
# PyMuPDF = ">=1.23.6"
# aiofiles = ">=23.2.1"
# requests = ">=2.31.0"
# langserve = {extras = ["all"], version = "^0.2.2"}
# crewai = "^0.41.1"
# crewai-tools = "^0.4.26"

[tool.poetry.group.tests.dependencies]
pytest = "^8.3.2"
coverage = "^7.6.0"
pytest-asyncio = "^0.23.8"
pytest-cov = "^5.0.0"
openai = "^1.11.1"
tenacity = "^9.0.0"
plotly = "^5.18.0"
slack_bolt = "^1.18.1"
discord = "^2.3.2"
botbuilder-core = "^4.15.0"
aiosqlite = "^0.20.0"

# toml = "^0.10.2"
[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.poe.tasks]
_sort_imports = "ruff check --select I --fix . --preview"
_format_code = "ruff format  . --preview"
_ruff_check = 'ruff check . --preview'
_pyright = "pyright"
_convert_local_search_nb = 'jupyter nbconvert --output-dir=docsite/posts/query/notebooks/ --output="{notebook_name}_nb" --template=docsite/nbdocsite_template --to markdown examples_notebooks/local_search.ipynb'
_convert_global_search_nb = 'jupyter nbconvert --output-dir=docsite/posts/query/notebooks/ --output="{notebook_name}_nb" --template=docsite/nbdocsite_template --to markdown examples_notebooks/global_search.ipynb'
_semversioner_release = "semversioner release"
_semversioner_changelog = "semversioner changelog > CHANGELOG.md"
_semversioner_update_toml_version = "update-toml update --path tool.poetry.version --value \"$(semversioner current-version)\" pyproject.toml"
coverage_report = 'coverage report --omit "**/tests/**" --show-missing'
check_format = 'ruff format . --check --preview'
fix = "ruff  --preview check --fix ."
fix_unsafe = "ruff check --preview --fix --unsafe-fixes ."

_test_all = "coverage run -m pytest ./tests"
test_unit = "pytest ./tests/unit"
test_integration = "pytest ./tests/integration"
test_smoke = "pytest ./tests/smoke"
index = "python -m graphrag.index"
query = "python -m graphrag.query"
prompt_tune = "python -m graphrag.prompt_tune"
# Pass in a test pattern
test_only = "pytest -s -k"
watch_tests = "ptw --onfail 'notify-send Test Failed' --runner 'poetry run pytest'"
# publish = "python -m mtmai release"
# init = "python -m mtmai init"
# clean = "python -m mtmai clean"


[[tool.poe.tasks.release]]
sequence = [
    '_semversioner_release',
    '_semversioner_changelog',
    '_semversioner_update_toml_version',
]
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.convert_docsite_notebooks]]
sequence = ['_convert_local_search_nb', '_convert_global_search_nb']
ignore_fail = 'return_non_zero'


[[tool.poe.tasks.format]]
sequence = ['_sort_imports', '_format_code']
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.check]]
sequence = ['check_format', '_ruff_check', '_pyright']
ignore_fail = 'return_non_zero'

[[tool.poe.tasks.test]]
sequence = ['_test_all', 'coverage_report']
ignore_fail = 'return_non_zero'

[tool.ruff]

target-version = "py312"
extend-include = ["*.ipynb"]
exclude = [
    "alembic",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "alembic/env.py",
]


[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 20

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]
plugins = "sqlalchemy.ext.mypy.plugin"


[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG001", # unused arguments in functions

    "E4",
    "E7",
    "E9",
    "W291",
    "YTT",
    "T10",
    "ICN",
    "INP",
    "Q",
    "RSE",
    "SLOT",
    "INT",
    "FLY",
    "LOG",
    "C90",
    "T20",
    "D",
    "RET",
    "PD",
    "N",
    "PIE",
    "SIM",
    "S",
    "G",
    "ERA",
    "ASYNC",
    "TID",
    "UP",
    "SLF",
    "BLE",
    "C4",
    "I",
    "F",
    "A",
    "ARG",
    "PTH",
    "RUF",
    "B",
    "TCH",
    "DTZ",
    "PYI",
    "PT",
    "EM",
    "TRY",
    "PERF",
    "CPY",
    # "FBT", # use named arguments for boolean flags
    # "TD", # todos
    # "FIX", # fixme
    # "FURB" # preview rules
    # ANN # Type annotations, re-enable when we get bandwidth
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raising exceptions without from e, for HTTPException
    # Deprecated Rules
    "ANN101",
    "ANN102",
    # Conflicts with interface argument checking
    "ARG002",
    "ANN204",
    # TODO: Inspect these pandas rules for validity
    "PD002", # prevents inplace=True
    # TODO RE-Enable when we get bandwidth
    "PERF203", # Needs restructuring of errors, we should bail-out on first error
    "C901",    # needs refactoring to remove cyclomatic complexity
    "D100",
    "D101",
    "D102",
    "D103",
    "D106",
    "D205",
    "D200",
    "T201",    # 允许print 语句
    "D400",
    "D401",
    "D104",
    "ERA001",  # 允许临时注释的代码块,
    "RET504",
    "RET505",  # 允许非必要的else
    "N806",    # 允许 camelCase 变量名
    "N815",
    "S101",
]


[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S", "D", "ANN", "T201", "ASYNC", "ARG", "PTH", "TRY"]
"*_test.py" = ["S", "D", "ANN", "T201", "ASYNC", "ARG", "PTH", "TRY"]
"test_*.py" = ["S", "D", "ANN", "T201", "ASYNC", "ARG", "PTH", "TRY"]
"examples/*" = ["S", "D", "ANN", "T201", "PTH", "TRY", "PERF"]
"graphrag/index/config/*" = ["TCH"]
"*.ipynb" = ["T201"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["input", "id", "bytes"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"


# https://github.com/microsoft/pyright/blob/9f81564a4685ff5c55edd3959f9b39030f590b2f/docs/configuration.md#sample-pyprojecttoml-file
[tool.pyright]
include = ["mtmai", "tests", "examples", "examples_notebooks"]
exclude = ["**/node_modules", "**/__pycache__"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
timeout = 600


[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true


# tool.ruff]
