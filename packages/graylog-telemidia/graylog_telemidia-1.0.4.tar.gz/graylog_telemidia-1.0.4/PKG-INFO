Metadata-Version: 2.1
Name: graylog_telemidia
Version: 1.0.4
Summary: Este pacote fornece uma interface simples e eficiente para enviar mensagens de log para o Graylog, seguindo o padrão utilizado pela Telemidia.
Home-page: https://github.com/telemidia-isp/graylog-telemidia-py
Author: Thales Casa Grande de Lima
Author-email: cor@telemidia.net.br
License: UNKNOWN
Description: # graylog-telemidia-py
        
        Uma abstração da biblioteca [**graypy**](https://github.com/severb/graypy).
        
        ## Sobre
        
        Este pacote fornece uma interface simples e eficiente para enviar mensagens de log para o Graylog, seguindo o padrão utilizado pela Telemidia.
        
        ## Instalação
        
        Para instalar a biblioteca, utilize o pip:
        
        ```bash
        pip install graylog-telemidia
        ```
        
        ## Inicialização
        
        Para inicializar a biblioteca, você deve configurar as informações do Graylog. Existem duas abordagens para realizar essa configuração:
        
        ### 1. Configuração via dicionário
        
        Você pode configurar a biblioteca utilizando um dicionário. Veja um exemplo abaixo:
        
        ```python
        from graylog_telemidia import GraylogTelemidia
        
        GRAYLOG_CONFIG = {
            "server": "graylog-datanode.myserver.com",
            "inputPort": 12201,
            "appName": "my-app", # Nome que será exibido no campo "facility" do Graylog
            "environment": "PROD" # Pode ser "PROD" ou "DEV"
        } # Todos os parâmetros são obrigatórios
        
        graylog = GraylogTelemidia(GRAYLOG_CONFIG)
        ```
        ### 2. Configuração via variáveis de ambiente
        
        Como alternativa, você pode definir a configuração através de variáveis de ambiente. As variáveis necessárias são:
        
        * GRAYLOG_SERVER
        * GRAYLOG_INPUT_PORT
        * GRAYLOG_APP_NAME
        * GRAYLOG_ENVIRONMENT
        
        Neste caso, o objeto pode ser inicializado sem a necessidade de passar um parâmetro de configuração:
        
        ```python
        graylog = GraylogTelemidia()
        ```
        
        ## Utilização
        
        A biblioteca permite o envio de mensagens de log de forma simples e eficiente. Veja alguns exemplos de uso:
        
        ### Enviar uma mensagem simples
        
        ```python
        graylog.error('Ocorreu um erro horrível!')
        ```
        
        ### Informações adicionais
        
        Para enriquecer as mensagens de log, você pode adicionar informações adicionais. Isso é útil para fornecer contexto sobre o erro:
        
        ```python
        user_info = {
            "isUserAuthenticated": True,
            "isUserAdmin": False,
        }
        graylog.error('Ocorreu um erro horrível!', user_info)
        ```
        
        ### Traceback
        
        É possível registrar o traceback de erros ou exceções. Para isso, basta passar o objeto de erro:
        
        ```python
        try:
            raise Exception('Ocorreu um erro horrível!')
        except Exception as e:
            graylog.error(e)
        ```
        
        Você também pode personalizar a mensagem do erro, mantendo a mensagem original visível no Graylog:
        
        ```python
        try:
            raise Exception('Ocorreu um erro horrível!')
        except Exception as e:
            graylog.error('Ocorreu um erro em foo bar', e)
        ```
        
        ### Combinação de informações
        
        Também é possível enviar múltiplos parâmetros, permitindo um contexto mais detalhado:
        
        ```python
        try:
            raise Exception('Ocorreu um erro horrível!')
        except Exception as e:
            user_info = {
                "isUserAuthenticated": True,
                "isUserAdmin": False,
            }
            graylog.error('Ocorreu um erro em foo bar', e, user_info)
        ```
        
        ## Métodos suportados
        
        A biblioteca suporta diversos métodos para registrar logs, cada um correspondente a um nível de severidade no Graylog. Os métodos disponíveis são:
        
        Método | Nível Graylog
        --- | ---
        critical | 2
        error | 3
        warning | 4
        info | 6
        debug | 7
        
        ## Licença
        Este projeto está licenciado sob a Licença MIT.
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
