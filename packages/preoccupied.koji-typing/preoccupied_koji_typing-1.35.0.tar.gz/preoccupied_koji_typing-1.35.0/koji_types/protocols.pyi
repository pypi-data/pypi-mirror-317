# This library is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This library is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this library; if not, see <http://www.gnu.org/licenses/>.


"""
Koji Types - Client Session Protocol method declarations

:author: Christopher O'Brien <obriencj@gmail.com>
:license: GPL v3
"""
from . import ArchiveFileInfo, ArchiveID, ArchiveInfo, ATypeID, ATypeInfo, BuildSpecifier, BuildID, BuildLogs, BuildInfo, BuildNVR, BuildrootID, BuildrootInfo, BuildrootState, BuildState, BTypeInfo, ChangelogEntry, ChannelID, ChannelInfo, ChecksumType, CGID, CGInfo, CGInitInfo, Data, ExternalRepoID, ExternalRepoInfo, EventID, EventInfo, FaultInfo, FilterOptions, HostID, HostInfo, Identifier, ListTasksOptions, MavenInfo, NamedID, NotificationID, OldNew, PackageID, PackageInfo, PermID, PermInfo, POMInfo, QueryOptions, RepoID, RepoInfo, RepoOptions, RepoState, RPMDepType, RPMDepInfo, RPMFileInfo, RPMID, RPMInfo, RPMNVRA, RPMSignature, RPMSigTag, SearchResult, SessionInfo, TagBuildInfo, TagGroupID, TagGroupInfo, TagID, TagInfo, TagInheritance, TagExternalRepos, TagPackageInfo, TagPackageSimple, TargetID, TargetInfo, TaskID, TaskInfo, UserGroup, UserID, UserInfo, UserStatus, UserType, WinInfo
from .arch import Arch
from datetime import datetime
from koji import VirtualCall
from typing import Any, Dict, List, Literal, NoReturn, Optional, Tuple, Union, overload

class ClientSession:

    def CGImport(self, metadata: Union[str, Data], directory: str, token: Optional[str]=None) -> BuildInfo:
        ...

    def CGInitBuild(self, cg: str, data: Data) -> CGInitInfo:
        ...

    def CGRefundBuild(self, cg: str, build_id: BuildID, token: str, state: BuildState=BuildState.FAILED) -> None:
        ...

    def addArchiveType(self, name: str, description: str, extensions: str, compression_type: Optional[str]=None) -> None:
        ...

    def addBType(self, name: str) -> None:
        ...

    def addChannel(self, channel_name: str, description: Optional[str]=None) -> ChannelID:
        ...

    def addExternalRepoToTag(self, tag_info: Union[str, TagID], repo_info: Union[str, ExternalRepoID], priority: int, merge_mode: str='koji', arches: Optional[List[Arch]]=None) -> None:
        ...

    def addExternalRPM(self, rpminfo: Data, external_repo: Union[str, ExternalRepoID], strict: bool=True) -> None:
        ...

    def addGroupMember(self, group: Union[str, UserID], user: Union[str, UserID], strict: bool=True) -> None:
        ...

    def addHost(self, hostname: str, arches: List[Arch], krb_principal: Optional[str]=None, force: bool=False) -> HostID:
        ...

    def addHostToChannel(self, hostname: Union[str, HostID], channel_name: str, create: bool=False, force: bool=False) -> None:
        ...

    def addRPMSig(self, an_rpm: str, data: bytes) -> None:
        ...

    def addUserKrbPrincipal(self, user: Union[str, UserID], krb_principal: str) -> int:
        ...

    def addVolume(self, name: str, strict: bool=True) -> NamedID:
        ...

    def applyVolumePolicy(self, build: BuildSpecifier, strict: bool=False) -> None:
        ...

    def assignTask(self, task_id: TaskID, host: str, force: bool=False, override: bool=False) -> bool:
        ...

    def build(self, src: str, target: str, opts: Optional[Data]=None, priority: Optional[int]=None, channel: Optional[str]=None) -> int:
        ...

    def buildImage(self, name: str, version: str, arch: Arch, target: str, ksfile: str, img_type: str, opts: Optional[Data]=None, priority: Optional[int]=None) -> int:
        ...

    def buildImageIndirection(self, opts: Optional[Data]=None, priority: Optional[int]=None) -> TaskID:
        ...

    def buildImageOz(self, name: str, version: str, arches: List[Arch], target: str, inst_tree: str, opts: Optional[Data]=None, priority: Optional[int]=None) -> TaskID:
        ...

    def buildReferences(self, build: BuildID, limit: Optional[int]=None, lazy: bool=False) -> Data:
        ...

    def cancelBuild(self, buildID: BuildID, strict: bool=False) -> bool:
        ...

    def cancelTask(self, task_id: TaskID, recurse: bool=True) -> None:
        ...

    def cancelTaskChildren(self, task_id: TaskID) -> None:
        ...

    def cancelTaskFull(self, task_id: TaskID, strict: bool=True) -> None:
        ...

    def chainBuild(self, srcs: List[str], target: str, opts: Optional[Data]=None, priority: Optional[int]=None, channel: Optional[str]=None) -> int:
        ...

    def chainMaven(self, builds: List[Data], target: str, opts: Optional[Data]=None, priority: Optional[int]=None, channel: str='maven') -> int:
        ...

    def changeBuildVolume(self, build: Union[str, BuildID], volume: str, strict: bool=True) -> None:
        ...

    def checkTagAccess(self, tag_id: Union[str, TagID], user_id: Union[str, UserID, None]=None) -> Tuple[bool, bool, str]:
        ...

    def checkTagPackage(self, tag: Union[str, TagID], pkg: Union[str, PackageID]) -> bool:
        ...

    def checkUpload(self, path: str, name: str, verify: Optional[ChecksumType]=None, tail: Optional[int]=None, volume: Optional[str]=None) -> Data:
        ...

    def count(self, methodName: str, *args: Any, **kw: Any) -> int:
        ...

    @overload
    def countAndFilterResults(self, methodName: str, *args, filterOpts: FilterOptions, **kw) -> Tuple[int, List[Data]]:
        ...

    @overload
    def countAndFilterResults(self, methodName: str, *args, **kw) -> Tuple[int, List[Data]]:
        ...

    def createBuildTarget(self, name: str, build_tag: Union[str, TagID], dest_tag: Union[str, TagID]) -> None:
        ...

    def createEmptyBuild(self, name: str, version: str, release: str, epoch: str, owner: Union[str, UserID, None]=None, draft: bool=False) -> BuildID:
        ...

    def createExternalRepo(self, name: str, url: str) -> ExternalRepoInfo:
        ...

    def createImageBuild(self, build_info: BuildSpecifier) -> None:
        ...

    def createMavenBuild(self, build_info: BuildSpecifier, maven_info: MavenInfo) -> None:
        ...

    def createNotification(self, user_id: UserID, package_id: PackageID, tag_id: TagID, success_only: bool) -> None:
        ...

    def createNotificationBlock(self, user_id: UserID, package_id: Optional[PackageID]=None, tag_id: Optional[TagID]=None) -> None:
        ...

    def createTag(self, name: str, parent: Optional[Union[str, TagID]]=None, arches: Optional[str]=None, perm: Optional[str]=None, locked: bool=False, maven_support: bool=False, maven_include_all: bool=False, extra: Optional[Dict[str, str]]=None) -> TagID:
        ...

    def createUser(self, username: str, status: Optional[UserStatus]=None, krb_principal: Optional[str]=None) -> UserID:
        ...

    def createWinBuild(self, build_info: BuildSpecifier, win_info: WinInfo) -> None:
        ...

    def deleteBuild(self, build: BuildSpecifier, strict: bool=True, min_ref_age: int=604800) -> bool:
        ...

    def deleteBuildTarget(self, buildTargetInfo: Union[str, TargetID]) -> None:
        ...

    def deleteExternalRepo(self, info: Union[str, ExternalRepoID]) -> None:
        ...

    def deleteNotification(self, id: int) -> None:
        ...

    def deleteNotificationBlock(self, id: int) -> None:
        ...

    def deleteRPMSig(self, rpminfo: Union[str, RPMID, RPMNVRA], sigkey: Optional[str]=None, all_sigs: bool=False) -> None:
        ...

    def deleteTag(self, tagInfo: Union[str, TagID]) -> None:
        ...

    def disableChannel(self, channelname: Union[str, ChannelID], comment: Optional[str]=None) -> None:
        ...

    def disableHost(self, hostname: Union[str, HostID]) -> None:
        ...

    def disableUser(self, username: Union[str, UserID]) -> None:
        ...

    def distRepo(self, tag: Union[str, TagID], keys: List[str], **task_opts) -> TaskID:
        ...

    def downloadTaskOutput(self, taskID: TaskID, fileName: str, offset: int=0, size: int=-1, volume: Optional[str]=None) -> str:
        ...

    def dropGroupMember(self, group: Union[str, UserID], user: Union[str, UserID]) -> None:
        ...

    def echo(self, *args) -> List:
        ...

    def editBuildTarget(self, buildTargetInfo: Union[str, TargetID], name: str, build_tag: Union[str, TagID], dest_tag: Union[str, TagID]) -> None:
        ...

    def editChannel(self, channelInfo: Union[str, ChannelID], **kw) -> bool:
        ...

    def editExternalRepo(self, info: Union[str, ExternalRepoID], name: Optional[str]=None, url: Optional[str]=None) -> None:
        ...

    def editHost(self, hostInfo: Union[str, HostID], **kw) -> bool:
        ...

    def editPermission(self, permission: Union[str, PermID], description: str) -> None:
        ...

    def editTag(self, tagInfo: Union[str, TagID], name: Optional[str], arches: Optional[str], locked: Optional[bool], permissionID: Optional[PermID], extra: Optional[Dict[str, str]]=None) -> None:
        ...

    def editTag2(self, tagInfo: Union[str, TagID], **kwargs) -> None:
        ...

    def editTagExternalRepo(self, tag_info: Union[str, TagID], repo_info: Union[str, ExternalRepoID], priority: Optional[int]=None, merge_mode: Optional[str]=None, arches: Optional[str]=None) -> bool:
        ...

    def editUser(self, userInfo: Union[str, UserID], name: Optional[str]=None, krb_principal_mappings: Optional[List[OldNew]]=None) -> None:
        ...

    def enableChannel(self, channelname: str, comment: Optional[str]=None) -> None:
        ...

    def enableHost(self, hostname: str) -> None:
        ...

    def enableUser(self, username: Union[str, UserID]) -> None:
        ...

    def error(self) -> NoReturn:
        ...

    def evalPolicy(self, name: str, data: Data) -> str:
        ...

    def fault(self) -> NoReturn:
        ...

    @overload
    def filterResults(self, methodName: str, *args, filterOpts: FilterOptions, **kw) -> List[Data]:
        ...

    @overload
    def filterResults(self, methodName: str, *args, **kw) -> List[Data]:
        ...

    def findBuildID(self, X: BuildSpecifier, strict: bool=False) -> Optional[BuildID]:
        ...

    def freeTask(self, task_id: TaskID) -> None:
        ...

    def getActiveRepos(self) -> List[RepoInfo]:
        ...

    def getAllArches(self) -> List[Arch]:
        ...

    def getAllPerms(self) -> List[PermInfo]:
        ...

    def getAPIVersion(self) -> int:
        ...

    def getArchive(self, archive_id: ArchiveID, strict: bool=False) -> Optional[ArchiveInfo]:
        ...

    def getArchiveFile(self, archive_id: ArchiveID, filename: str, strict: bool=False) -> Optional[ArchiveFileInfo]:
        ...

    def getArchiveType(self, filename: Optional[str]=None, type_name: Optional[str]=None, type_id: Optional[ATypeID]=None, strict: bool=False) -> Optional[ATypeInfo]:
        ...

    def getArchiveTypes(self) -> List[ATypeInfo]:
        ...

    def getAverageBuildDuration(self, package: Union[str, PackageID], age: Optional[int]=None) -> Optional[float]:
        ...

    def getBuild(self, buildInfo: BuildSpecifier, strict: bool=False) -> Optional[BuildInfo]:
        ...

    def getBuildConfig(self, tag: Union[str, TagID], event: Optional[EventID]=None) -> TagInfo:
        ...

    def getBuildLogs(self, build: BuildSpecifier) -> BuildLogs:
        ...

    def getBuildNotification(self, id: int, strict: bool=False) -> Optional[Data]:
        ...

    def getBuildNotificationBlock(self, id: int, strict: bool=False) -> Optional[Data]:
        ...

    def getBuildNotificationBlocks(self, userID: Union[str, UserID, None]=None) -> Data:
        ...

    def getBuildNotifications(self, userID: Union[str, UserID, None]=None) -> Data:
        ...

    def getBuildroot(self, buildrootID: BuildrootID, strict: bool=False) -> Optional[BuildrootInfo]:
        ...

    def getBuildrootListing(self, id: BuildrootID) -> List[RPMInfo]:
        ...

    def getBuildTarget(self, info: Union[str, TargetID], event: Optional[EventID]=None, strict: bool=False) -> Optional[TargetInfo]:
        ...

    def getBuildTargets(self, info: Union[str, TargetID, None]=None, event: Optional[EventID]=None, buildTagID: Union[str, TagID, TagInfo, None]=None, destTagID: Union[str, TagID, TagInfo, None]=None, queryOpts: Optional[QueryOptions]=None) -> List[TargetInfo]:
        ...

    def getBuildType(self, buildInfo: BuildSpecifier, strict: bool=False) -> Dict[str, dict]:
        ...

    def getChangelogEntries(self, buildID: Optional[int]=None, taskID: Optional[int]=None, filepath: Optional[str]=None, author: Optional[str]=None, before: Union[datetime, str, int, None]=None, after: Union[datetime, str, int, None]=None, queryOpts: Optional[QueryOptions]=None, strict: bool=False) -> List[ChangelogEntry]:
        ...

    def getChannel(self, channelInfo: Union[str, ChannelID], strict: bool=False) -> ChannelInfo:
        ...

    @overload
    def getEvent(self, id: EventID) -> Optional[EventInfo]:
        ...

    @overload
    def getEvent(self, id: EventID, strict: Literal[True]) -> EventInfo:
        ...

    @overload
    def getEvent(self, id: EventID, strict: bool=False) -> Optional[EventInfo]:
        ...

    def getExternalRepo(self, info: Union[str, ExternalRepoID], strict: bool=False, event: Optional[EventID]=None) -> ExternalRepoInfo:
        ...

    def getExternalRepoList(self, tag_info: Union[str, TagID], event: Optional[EventID]=None) -> TagExternalRepos:
        ...

    def getFullInheritance(self, tag: Union[str, TagID], event: Optional[EventID]=None, reverse: bool=False) -> TagInheritance:
        ...

    def getGroupMembers(self, group: Union[str, UserID]) -> List[UserInfo]:
        ...

    def getHost(self, hostInfo: Union[str, HostID], strict: bool=False, event: Optional[EventID]=None) -> HostInfo:
        ...

    def getImageArchive(self, archive_id: ArchiveID, strict: bool=False) -> Optional[ArchiveInfo]:
        ...

    def getImageBuild(self, buildInfo: BuildSpecifier, strict: bool=False) -> Optional[Dict[str, BuildID]]:
        ...

    def getInheritanceData(self, tag: Union[str, TagID], event: Optional[EventID]=None) -> TagInheritance:
        ...

    def getKojiVersion(self) -> str:
        ...

    @overload
    def getLastEvent(self, before: Union[int, float, None]=None) -> EventInfo:
        ...

    @overload
    def getLastEvent(self, before: Union[int, float, None]=None, strict: bool=True) -> EventInfo:
        ...

    @overload
    def getLastHostUpdate(self, hostID: HostID) -> Union[str, None]:
        ...

    @overload
    def getLastHostUpdate(self, hostID: HostID, ts: Literal[False]) -> Union[str, None]:
        ...

    @overload
    def getLastHostUpdate(self, hostID: HostID, ts: Literal[True]) -> Union[float, None]:
        ...

    @overload
    def getLastHostUpdate(self, hostID: HostID, ts: bool=False) -> Union[str, float, None]:
        ...

    @overload
    def getLatestBuilds(self, tag: Union[str, TagID], event: Optional[EventID]=None, package: Optional[str]=None, type: Optional[str]=None) -> List[TagBuildInfo]:
        ...

    @overload
    def getLatestBuilds(self, tag: Union[str, TagID], event: Optional[EventID]=None, package: Optional[str]=None, type: Optional[str]=None, draft: Optional[bool]=None) -> List[TagBuildInfo]:
        ...

    def getLatestMavenArchives(self, tag: Union[int, str], event: Optional[int]=None, inherit: bool=True) -> List[ArchiveInfo]:
        ...

    @overload
    def getLatestRPMS(self, tag: Union[str, TagID], package: Optional[str]=None, arch: Union[Arch, List[Arch], None]=None, event: Optional[EventID]=None, rpmsigs: bool=False, type: Optional[str]=None) -> Tuple[List[RPMInfo], List[BuildInfo]]:
        ...

    @overload
    def getLatestRPMS(self, tag: Union[str, TagID], package: Optional[str]=None, arch: Union[Arch, List[Arch], None]=None, event: Optional[EventID]=None, rpmsigs: bool=False, type: Optional[str]=None, draft: Optional[bool]=None) -> Tuple[List[RPMInfo], List[BuildInfo]]:
        ...

    def getLoggedInUser(self) -> UserInfo:
        ...

    def getMavenArchive(self, archive_id: ArchiveID, strict: bool=False) -> ArchiveInfo:
        ...

    def getMavenBuild(self, buildInfo: Union[str, BuildID], strict: bool=False) -> Data:
        ...

    def getNextRelease(self, build_info: BuildNVR, incr: int=1) -> str:
        ...

    def getPackage(self, info: Union[str, PackageID], strict: bool=False, create: bool=False) -> Optional[NamedID]:
        ...

    def getPackageConfig(self, tag: Union[str, TagID], pkg: Union[str, PackageID], event: Optional[EventID]=None) -> Optional[TagPackageInfo]:
        ...

    def getPackageID(self, name: str, strict: bool=False) -> Optional[PackageID]:
        ...

    def getPerms(self) -> List[str]:
        ...

    @overload
    def getRepo(self, tag: Union[str, TagID], state: Optional[RepoState]=None, event: Optional[EventID]=None, dist: bool=False) -> RepoInfo:
        ...

    @overload
    def getRepo(self, tag: Union[str, TagID], state: Optional[RepoState]=None, event: Optional[EventID]=None, dist: bool=False, min_event: Optional[EventID]=None) -> RepoInfo:
        ...

    @overload
    def getRPM(self, rpminfo: Union[str, RPMID, RPMNVRA], strict: bool=False) -> Optional[RPMInfo]:
        ...

    @overload
    def getRPM(self, rpminfo: Union[str, RPMID, RPMNVRA], strict: bool=False, *, multi: Literal[False]) -> Optional[RPMInfo]:
        ...

    @overload
    def getRPM(self, rpminfo: Union[str, RPMID, RPMNVRA], strict: bool=False, *, multi: Literal[True]) -> List[RPMInfo]:
        ...

    @overload
    def getRPM(self, rpminfo: Union[str, RPMID, RPMNVRA], strict: bool=False, multi: bool=False) -> Union[RPMInfo, List[RPMInfo], None]:
        ...

    def getRPMChecksums(self, rpm_id: RPMID, checksum_types: Optional[List[ChecksumType]]=None, cacheonly: bool=False) -> Dict[ChecksumType, str]:
        ...

    def getRPMDeps(self, rpmID: RPMID, depType: Optional[RPMDepType]=None, queryOpts: Optional[QueryOptions]=None, strict: bool=False) -> List[RPMDepInfo]:
        ...

    def getRPMFile(self, rpmID: RPMID, filename: str, strict: bool=False) -> Optional[RPMFileInfo]:
        ...

    @overload
    def getRPMHeaders(self, rpmID: Optional[RPMID]=None, taskID: Optional[TaskID]=None, filepath: Optional[str]=None, headers: Optional[List[str]]=None) -> Data:
        ...

    @overload
    def getRPMHeaders(self, rpmID: Optional[RPMID]=None, taskID: Optional[TaskID]=None, filepath: Optional[str]=None, headers: Optional[List[str]]=None, strict: Optional[bool]=False) -> Data:
        ...

    def getSessionInfo(self, details: bool=False, user_id: Optional[UserID]=None) -> Union[None, SessionInfo, List[SessionInfo]]:
        ...

    def getTag(self, tagInfo: Union[str, TagID], strict: bool=False, event: Optional[EventID]=None, blocked: bool=False) -> Optional[TagInfo]:
        ...

    def getTagID(self, info: Union[str, TagID, Data], strict: bool=False, create: bool=False) -> Optional[TagID]:
        ...

    def getTagExternalRepos(self, tag_info: Union[str, TagID, None]=None, repo_info: Union[str, ExternalRepoID, None]=None, event: Optional[EventID]=None) -> TagExternalRepos:
        ...

    def getTagGroups(self, tag: Union[str, TagID], event: Optional[EventID]=None, inherit: bool=True, incl_pkgs: bool=True, incl_reqs: bool=True, incl_blocked: bool=False) -> List[TagGroupInfo]:
        ...

    def getTaskChildren(self, task_id: TaskID, request: Optional[bool]=False, strict: Optional[bool]=False) -> List[TaskInfo]:
        ...

    def getTaskDescendents(self, task_id: TaskID, request: bool=False) -> Dict[str, List[TaskInfo]]:
        ...

    @overload
    def getTaskInfo(self, task_id: List[TaskID], request: bool=False, strict: bool=False) -> List[TaskInfo]:
        ...

    @overload
    def getTaskInfo(self, task_id: TaskID, request: bool=False, strict: bool=False) -> TaskInfo:
        ...

    def getTaskRequest(self, taskId: TaskID) -> Data:
        ...

    def getTaskResult(self, taskId: TaskID, raise_fault: bool=True) -> Any:
        ...

    @overload
    def getUser(self, userInfo: Union[str, UserID, None]=None, strict: bool=False, krb_princs: bool=True) -> UserInfo:
        ...

    @overload
    def getUser(self, userInfo: Union[str, UserID, None]=None, strict: bool=False, krb_princs: bool=True, groups: bool=False) -> UserInfo:
        ...

    def getUserGroups(self, user: Union[int, str]) -> List[UserGroup]:
        ...

    @overload
    def getUserPerms(self, userID: Union[str, UserID, None]=None) -> List[str]:
        ...

    @overload
    def getUserPerms(self, userID: Union[str, UserID, None]=None, with_groups: bool=True) -> List[str]:
        ...

    def getUserPermsInheritance(self, userID: Union[str, UserID]) -> Dict[str, List[str]]:
        ...

    def getVolume(self, volume: str, strict: bool=False) -> Optional[NamedID]:
        ...

    def getWinArchive(self, archive_id: ArchiveID, strict: bool=False) -> ArchiveInfo:
        ...

    def getWinBuild(self, buildInfo: Union[str, BuildID], strict: bool=False) -> Data:
        ...

    def grantCGAccess(self, user: Union[str, UserID], cg: Union[str, CGID], create: bool=False) -> None:
        ...

    def grantPermission(self, userinfo: Union[str, UserID], permission: Union[str, PermID], create: bool=False, description: Optional[str]=None) -> None:
        ...

    def groupListAdd(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], block: bool=False, force: bool=False, **opts) -> None:
        ...

    def groupListBlock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID]) -> None:
        ...

    def groupListRemove(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], force: bool=False) -> None:
        ...

    def groupListUnblock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID]) -> None:
        ...

    def groupPackageListAdd(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], pkg_name: str, block: bool=False, force: bool=False, **opts) -> None:
        ...

    def groupPackageListBlock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], pkg_name: str) -> None:
        ...

    def groupPackageListRemove(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], pkg_name: str) -> None:
        ...

    def groupPackageListUnblock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], pkg_name: str) -> None:
        ...

    def groupReqListAdd(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], reqinfo: str, block: bool=False, force: bool=False, **opts) -> None:
        ...

    def groupReqListBlock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], reqinfo: str) -> None:
        ...

    def groupReqListRemove(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], reqinfo: str, force: Optional[bool]=None) -> None:
        ...

    def groupReqListUnblock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], reqinfo: str) -> None:
        ...

    def hasPerm(self, perm: str, strict: bool=False) -> bool:
        ...

    def hello(self, *args) -> str:
        ...

    def importArchive(self, filepath: str, buildinfo: BuildInfo, type: str, typeInfo: Data) -> ArchiveInfo:
        ...

    def importRPM(self, path: str, basename: str) -> RPMInfo:
        ...

    def listArchives(self, buildID: Optional[BuildID]=None, buildrootID: Optional[BuildrootID]=None, componentBuildrootID: Optional[BuildrootID]=None, hostID: Optional[HostID]=None, type: Optional[str]=None, filename: Optional[str]=None, size: Optional[int]=None, checksum: Optional[str]=None, checksum_type: Optional[ChecksumType]=None, typeInfo: Optional[Data]=None, queryOpts: Optional[QueryOptions]=None, imageID: Optional[int]=None, archiveID: Optional[ArchiveID]=None, strict: bool=False) -> List[ArchiveInfo]:
        ...

    def listArchiveFiles(self, archive_id: ArchiveID, queryOpts: Optional[QueryOptions]=None, strict: bool=False) -> List[ArchiveFileInfo]:
        ...

    def listBTypes(self, query: Optional[NamedID]=None, queryOpts: Optional[QueryOptions]=None) -> List[BTypeInfo]:
        ...

    def listBuildRPMs(self, build: BuildSpecifier) -> List[RPMInfo]:
        ...

    def listBuildroots(self, hostID: Optional[HostID]=None, tagID: Optional[TagID]=None, state: Union[BuildrootState, List[BuildrootState], None]=None, rpmID: Optional[RPMID]=None, archiveID: Optional[ArchiveID]=None, taskID: Optional[TaskID]=None, buildrootID: Optional[BuildrootID]=None, repoID: Optional[RepoID]=None, queryOpts: Optional[QueryOptions]=None) -> List[BuildrootInfo]:
        ...

    def listBuilds(self, packageID: Optional[PackageID]=None, userID: Optional[UserID]=None, taskID: Optional[TaskID]=None, prefix: Optional[str]=None, state: Optional[BuildState]=None, volumeID: Optional[int]=None, source: Optional[str]=None, createdBefore: Optional[str]=None, createdAfter: Optional[str]=None, completeBefore: Optional[str]=None, completeAfter: Optional[str]=None, type: Optional[str]=None, typeInfo: Optional[Dict]=None, queryOpts: Optional[QueryOptions]=None, pattern: Optional[str]=None, cgID: Optional[CGID]=None, draft: Optional[bool]=None) -> List[BuildInfo]:
        ...

    def listCGs(self) -> Dict[str, CGInfo]:
        ...

    def listChannels(self, hostID: Optional[HostID]=None, event: Optional[EventID]=None, enabled: Optional[bool]=None) -> List[ChannelInfo]:
        ...

    def listExternalRepos(self, info: Union[str, ExternalRepoID, None]=None, url: Optional[str]=None, event: Optional[EventID]=None, queryOpts: Optional[QueryOptions]=None) -> List[ExternalRepoInfo]:
        ...

    def listHosts(self, arches: Optional[List[str]]=None, channelID: Optional[ChannelID]=None, ready: Optional[bool]=None, enabled: Optional[bool]=None, userID: Optional[UserID]=None, queryOpts: Optional[QueryOptions]=None) -> List[HostInfo]:
        ...

    def listPackages(self, tagID: Optional[TagID]=None, userID: Optional[UserID]=None, pkgID: Optional[PackageID]=None, prefix: Optional[str]=None, inherited: bool=False, with_dups: bool=False, event: Optional[EventID]=None, queryOpts: Optional[QueryOptions]=None, with_owners: bool=True, with_blocked: bool=True) -> List[TagPackageInfo]:
        ...

    def listPackagesSimple(self, prefix: Optional[str]=None, queryOpts: Optional[QueryOptions]=None) -> List[TagPackageSimple]:
        ...

    def listRPMFiles(self, rpmID: RPMID, queryOpts: Optional[QueryOptions]=None) -> List[RPMFileInfo]:
        ...

    def listRPMs(self, buildID: Optional[BuildID]=None, buildrootID: Optional[BuildrootID]=None, imageID: Optional[int]=None, componentBuildrootID: Optional[BuildrootID]=None, hostID: Optional[HostID]=None, arches: Union[Arch, List[Arch], None]=None, queryOpts: Optional[QueryOptions]=None, draft: Optional[bool]=None) -> List[RPMInfo]:
        ...

    def listTagged(self, tag: Union[str, TagID], event: Optional[EventID]=None, inherit: bool=False, prefix: Optional[str]=None, latest: bool=False, package: Optional[str]=None, owner: Optional[Union[str, UserID]]=None, type: Optional[str]=None, strict: bool=True, extra: bool=False, draft: Optional[bool]=None) -> List[TagBuildInfo]:
        ...

    def listTaggedArchives(self, tag: Union[str, TagID], event: Optional[EventID]=None, inherit: bool=False, latest: bool=False, package: Optional[str]=None, type: Optional[str]=None, strict: bool=True, extra: bool=True) -> Tuple[List[ArchiveInfo], List[BuildInfo]]:
        ...

    @overload
    def listTaggedRPMS(self, tag: Union[str, TagID], event: Optional[EventID]=None, inherit: bool=False, latest: bool=False, package: Optional[str]=None, arch: Optional[Arch]=None, rpmsigs: bool=False, owner: Union[str, UserID, None]=None, type: Optional[str]=None, strict: bool=True, extra: bool=True) -> Tuple[List[RPMInfo], List[BuildInfo]]:
        ...

    @overload
    def listTaggedRPMS(self, tag: Union[str, TagID], event: Optional[EventID]=None, inherit: bool=False, latest: bool=False, package: Optional[str]=None, arch: Optional[Arch]=None, rpmsigs: bool=False, owner: Union[str, UserID, None]=None, type: Optional[str]=None, strict: bool=True, extra: bool=True, draft: Optional[bool]=None) -> Tuple[List[RPMInfo], List[BuildInfo]]:
        ...

    def listTags(self, build: Optional[BuildSpecifier]=None, package: Union[str, PackageID, None]=None, perms: bool=True, queryOpts: Optional[QueryOptions]=None, pattern: Optional[str]=None) -> List[TagInfo]:
        ...

    def listTaskOutput(self, taskID: TaskID, stat: bool=False, all_volumes: bool=False, strict: bool=False) -> Union[List[str], Dict[str, List[str]], Dict[str, Data], Dict[str, Dict[str, Data]]]:
        ...

    def listTasks(self, opts: Optional[ListTasksOptions]=None, queryOpts: Optional[QueryOptions]=None) -> List[TaskInfo]:
        ...

    @overload
    def listUsers(self, userType: UserType=UserType.NORMAL, prefix: Optional[str]=None, queryOpts: Optional[QueryOptions]=None) -> List[UserInfo]:
        ...

    @overload
    def listUsers(self, userType: UserType=UserType.NORMAL, prefix: Optional[str]=None, queryOpts: Optional[QueryOptions]=None, perm: Optional[str]=None, inherited_perm: bool=False) -> List[UserInfo]:
        ...

    def listVolumes(self) -> List[NamedID]:
        ...

    def makeTask(self, *args, **opts) -> TaskID:
        ...

    def massTag(self, tag: Union[str, TagID], builds: List[Union[str, BuildID]]) -> None:
        ...

    def mavenBuild(self, url: str, target: str, opts: Optional[Data]=None, priority: Optional[int]=None, channel: str='maven') -> TaskID:
        ...

    def mavenEnabled(self) -> bool:
        ...

    def mergeScratch(self, task_id: TaskID) -> BuildID:
        ...

    def moveAllBuilds(self, tag1: Union[str, TagID], tag2: Union[str, TagID], package: Union[str, PackageID], force: bool=False) -> TaskID:
        ...

    def moveBuild(self, tag1: Union[str, TagID], tag2: Union[str, TagID], build: BuildSpecifier, force: bool=False) -> TaskID:
        ...

    def newGroup(self, name: str) -> UserID:
        ...

    def newRepo(self, tag: Union[str, TagID], event: Optional[EventID]=None, src: bool=False, debuginfo: bool=False, separate_src: bool=False) -> TaskID:
        ...

    def packageListAdd(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], owner: Union[str, UserID, None]=None, block: Optional[bool]=None, extra_arches: Optional[str]=None, force: bool=False, update: bool=False) -> None:
        ...

    def packageListBlock(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], force: bool=False) -> None:
        ...

    def packageListRemove(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], force: bool=False) -> None:
        ...

    def packageListSetArches(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], arches: str, force: bool=False) -> None:
        ...

    def packageListSetOwner(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], owner: Union[str, UserID], force: bool=False) -> None:
        ...

    def packageListUnblock(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], force: bool=False) -> None:
        ...

    def promoteBuild(self, build: Union[str, BuildID], force: bool=False) -> BuildInfo:
        ...

    def queryHistory(self, tables: Optional[List[str]]=None, **kwargs: Any) -> Dict[str, List[Data]]:
        ...

    def queryRPMSigs(self, rpm_id: Union[RPMID, str, BuildNVR, None]=None, sigkey: Optional[str]=None, queryOpts: Optional[QueryOptions]=None) -> List[RPMSignature]:
        ...

    def removeExternalRepoFromTag(self, tag_info: Union[str, TagID], repo_info: int) -> None:
        ...

    def removeHostFromChannel(self, hostname: str, channel_name: str) -> None:
        ...

    def removeUserKrbPrincipal(self, user: Union[str, UserID], krb_principal: str) -> UserID:
        ...

    def removeVolume(self, volume: str) -> None:
        ...

    def renameChannel(self, old: str, new: str) -> None:
        ...

    def repoDelete(self, repo_id: RepoID) -> int:
        ...

    def repoExpire(self, repo_id: RepoID) -> None:
        ...

    def repoInfo(self, repo_id: RepoID, strict: bool=False) -> RepoInfo:
        ...

    def repoProblem(self, repo_id: RepoID) -> None:
        ...

    def resetBuild(self, build: Union[str, BuildID]) -> None:
        ...

    def restartHosts(self, priority: int=5, options: Optional[Data]=None) -> TaskID:
        ...

    def resubmitTask(self, taskID: TaskID) -> TaskID:
        ...

    def revokeCGAccess(self, user: Union[str, UserID], cg: Union[str, CGID]) -> None:
        ...

    def revokePermission(self, userinfo: Union[str, UserID], permission: Union[str, PermID]) -> None:
        ...

    def search(self, terms: str, type: str, matchType: str, queryOpts: Optional[QueryOptions]=None) -> List[SearchResult]:
        ...

    def setBuildOwner(self, build: BuildSpecifier, user: Union[str, UserID]) -> None:
        ...

    def setBuildTimestamp(self, build: BuildSpecifier, ts: Union[int, float]) -> None:
        ...

    def setInheritanceData(self, tag: Union[str, TagID], data: TagInheritance, clear: bool=False) -> None:
        ...

    def setTaskPriority(self, task_id: TaskID, priority: int, recurse: bool=True) -> None:
        ...

    @overload
    def showOpts(self) -> str:
        ...

    @overload
    def showOpts(self, as_string: Literal[True]) -> str:
        ...

    @overload
    def showOpts(self, as_string: Literal[False]) -> Data:
        ...

    @overload
    def showOpts(self, as_string: bool=True) -> Union[str, Data]:
        ...

    def showSession(self) -> str:
        ...

    def snapshotTag(self, src: Union[str, TagID], dst: Union[str, TagID], config: bool=True, pkgs: bool=True, builds: bool=True, groups: bool=True, latest_only: bool=True, inherit_builds: bool=True, event: Optional[EventID]=None, force: bool=False) -> None:
        ...

    def snapshotTagModify(self, src: Union[str, TagID], dst: Union[str, TagID], config: bool=True, pkgs: bool=True, builds: bool=True, groups: bool=True, latest_only: bool=True, inherit_builds: bool=True, event: Optional[EventID]=None, force: bool=False, remove: bool=False) -> None:
        ...

    def tagBuild(self, tag: Union[str, TagID], build: Union[str, BuildID], force: bool=False, fromtag: Union[str, TagID, None]=None) -> None:
        ...

    def tagBuildBypass(self, tag: Union[str, TagID], build: Union[str, BuildID], force: bool=False, notify: bool=False) -> None:
        ...

    def tagChangedSinceEvent(self, event: EventID, taglist: List[TagID]) -> bool:
        ...

    def tagFirstChangeEvent(self, tag: Union[str, TagID], after: Optional[EventID]=None, inherit: bool=True) -> Optional[EventID]:
        ...

    def tagLastChangeEvent(self, tag: Union[str, TagID], before: Optional[EventID]=None, inherit: bool=True) -> Optional[EventID]:
        ...

    def taskFinished(self, taskId: TaskID) -> bool:
        ...

    def untagBuild(self, tag: Union[str, TagID], build: Union[str, BuildID], strict: bool=True, force: bool=False) -> None:
        ...

    def untagBuildBypass(self, tag: Union[str, TagID], build: Union[str, BuildID], strict: bool=True, force: bool=False, notify: bool=False) -> None:
        ...

    def untaggedBuilds(self, name: Optional[str]=None, queryOpts: Optional[QueryOptions]=None, draft: Optional[bool]=None) -> List[BuildNVR]:
        ...

    def updateNotification(self, id: NotificationID, package_id: Union[str, PackageID, None], tag_id: Union[str, TagID, None], success_only: bool) -> None:
        ...

    def uploadFile(self, path: str, name: str, size: int, md5sum: str, offset: int, data: str, volume: Optional[str]=None, checksum: Union[str, Tuple[ChecksumType, str], None]=None) -> bool:
        ...

    def winBuild(self, vm: str, url: str, target: str, opts: Optional[Data]=None, priority: Optional[int]=None, channel: str='vm') -> int:
        ...

    def winEnabled(self) -> bool:
        ...

    def wrapperRPM(self, build: Union[int, str], url: str, target: str, priority: Optional[int]=None, channel: str='maven', opts: Optional[Data]=None) -> TaskID:
        ...

    def writeSignedRPM(self, an_rpm: str, sigkey: str, force: bool=False) -> None:
        ...

class Host:

    def assertPolicy(self, name, data: Data, default: str='deny') -> None:
        ...

    def checkPolicy(self, name: str, data: Data, default: str='deny', strict: bool=False) -> Tuple[bool, str]:
        ...

    def closeTask(self, task_id: TaskID, response: Any) -> None:
        ...

    def completeBuild(self, task_id: TaskID, build_id: BuildID, srpm: str, rpms: List[str], brmap: Optional[Dict[str, BuildrootID]]=None, logs: Optional[Dict[Arch, List[str]]]=None) -> BuildInfo:
        ...

    def completeImageBuild(self, task_id: TaskID, build_id: BuildID, results: Dict[str, Data]) -> None:
        ...

    def completeMavenBuild(self, task_id: TaskID, build_id: BuildID, maven_results: Any, rpm_results: Any) -> None:
        ...

    def completeWinBuild(self, task_id: TaskID, build_id: BuildID, results: Dict[str, Data], rpm_results: Any) -> None:
        ...

    def createMavenBuild(self, build_info: BuildInfo, maven_info: MavenInfo) -> None:
        ...

    def distRepoMove(self, repo_id: RepoID, uploadpath: str, arch: Arch) -> None:
        ...

    def evalPolicy(self, name: str, data: Data) -> str:
        ...

    def failBuild(self, task_id: TaskID, build_id: BuildID) -> None:
        ...

    def failTask(self, task_id: TaskID, response: Any) -> None:
        ...

    def freeTasks(self, tasks: List[TaskID]) -> None:
        ...

    def getID(self) -> HostID:
        ...

    def getHost(self) -> Tuple[List[HostID], List[TaskID]]:
        ...

    def getHostTasks(self) -> List[TaskInfo]:
        ...

    def getLoadData(self) -> Tuple[List[HostInfo], List[TaskInfo]]:
        ...

    def getTasks(self) -> List[TaskInfo]:
        ...

    def importArchive(self, filepath: str, buildinfo: BuildInfo, type: str, typeInfo: Data) -> None:
        ...

    def importImage(self, task_id: TaskID, build_info: BuildInfo, results: Dict[str, Data]) -> None:
        ...

    def importWrapperRPMs(self, task_id: TaskID, build_id: BuildID, rpm_results: Dict[str, List[str]]) -> None:
        ...

    def initBuild(self, data: Data) -> BuildID:
        ...

    def initImageBuild(self, task_id: TaskID, build_info: BuildInfo) -> BuildInfo:
        ...

    def initMavenBuild(self, task_id: TaskID, build_info: BuildInfo, maven_info: MavenInfo) -> BuildInfo:
        ...

    def initWinBuild(self, task_id: TaskID, build_info: BuildInfo, win_info: WinInfo) -> BuildInfo:
        ...

    def isEnabled(self) -> bool:
        ...

    def moveBuildToScratch(self, task_id: TaskID, srpm: str, rpms: List[str], logs: Optional[Dict[str, List[str]]]=None) -> None:
        ...

    def moveImageBuildToScratch(self, task_id: TaskID, results: Data) -> None:
        ...

    def moveMavenBuildToScratch(self, task_id: TaskID, results: Data, rpm_results: Data) -> None:
        ...

    def moveWinBuildToScratch(self, task_id: TaskID, results: Data, rpm_results: Data) -> None:
        ...

    def newBuildRoot(self, repo: RepoID, arch: Arch, task_id: Optional[TaskID]=None) -> BuildrootID:
        ...

    def openTask(self, task_id: TaskID) -> Optional[Data]:
        ...

    def refuseTask(self, task_id: TaskID, soft: bool=True, msg: str='') -> None:
        ...

    def repoDone(self, repo_id: RepoID, data: Dict[Arch, Tuple[str, List[str]]], expire: bool=False, repo_json_updates: Optional[Data]=None) -> None:
        ...

    def repoInit(self, tag: Union[str, TagID], task_id: Optional[TaskID]=None, event: Optional[EventID]=None, opts: Optional[RepoOptions]=None) -> Tuple[RepoID, EventID]:
        ...

    def setBuildRootList(self, brootid: BuildrootID, rpmlist: List[RPMInfo], task_id: Optional[TaskID]=None) -> None:
        ...

    def setBuildRootState(self, brootid: BuildrootID, state: BuildrootState, task_id: Optional[TaskID]=None) -> None:
        ...

    def setHostData(self, hostdata: Data) -> None:
        ...

    def setTaskWeight(self, task_id: TaskID, weight: float) -> None:
        ...

    def subtask(self, method: str, arglist: List, parent: TaskID, **opts) -> TaskID:
        ...

    def subtask2(self, __parent: TaskID, __taskopts: Data, __method: str, *args, **opts) -> TaskID:
        ...

    def tagBuild(self, task_id: TaskID, tag: Union[str, TagID], build: BuildSpecifier, force: bool=False, fromtag: Union[str, TagID, None]=None) -> None:
        ...

    def tagNotification(self, is_successful: bool, tag_id: Union[str, TagID, None], from_id: Union[str, TagID, None], build_id: BuildID, user_id: Union[str, UserID, None], ignore_success: bool=False, failure_msg: str='') -> None:
        ...

    def taskSetWait(self, parent: TaskID, tasks: Optional[List[TaskID]]) -> None:
        ...

    def taskWait(self, parent: TaskID) -> Tuple[List[int], List[int]]:
        ...

    def taskWaitResults(self, parent: TaskID, tasks: Optional[List[TaskID]], canfail: Optional[List[int]]=None) -> List[Tuple[int, Any]]:
        ...

    def updateBuildrootArchives(self, brootid: BuildrootID, task_id: TaskID, archives: List[ArchiveInfo], project: bool=False) -> None:
        ...

    def updateBuildRootList(self, brootid: BuildrootID, rpmlist: List[RPMInfo], task_id: Optional[TaskID]=None) -> None:
        ...

    def updateHost(self, task_load: float, ready: bool, data: Optional[Data]=None) -> None:
        ...

    def updateMavenBuildRootList(self, brootid: BuildrootID, task_id: TaskID, mavenlist: List[Data], ignore: Optional[List[Union[int, str]]]=None, project: bool=False, ignore_unknown: bool=False, extra_deps: Optional[List[Union[int, str]]]=None) -> None:
        ...

    def writeSignedRPM(self, an_rpm: str, sigkey: str, force: bool=False) -> None:
        ...

class MultiCallHost:

    def assertPolicy(self, name, data: Data, default: str='deny') -> VirtualCall[None]:
        ...

    def checkPolicy(self, name: str, data: Data, default: str='deny', strict: bool=False) -> VirtualCall[Tuple[bool, str]]:
        ...

    def closeTask(self, task_id: TaskID, response: Any) -> VirtualCall[None]:
        ...

    def completeBuild(self, task_id: TaskID, build_id: BuildID, srpm: str, rpms: List[str], brmap: Optional[Dict[str, BuildrootID]]=None, logs: Optional[Dict[Arch, List[str]]]=None) -> VirtualCall[BuildInfo]:
        ...

    def completeImageBuild(self, task_id: TaskID, build_id: BuildID, results: Dict[str, Data]) -> VirtualCall[None]:
        ...

    def completeMavenBuild(self, task_id: TaskID, build_id: BuildID, maven_results: Any, rpm_results: Any) -> VirtualCall[None]:
        ...

    def completeWinBuild(self, task_id: TaskID, build_id: BuildID, results: Dict[str, Data], rpm_results: Any) -> VirtualCall[None]:
        ...

    def createMavenBuild(self, build_info: BuildInfo, maven_info: MavenInfo) -> VirtualCall[None]:
        ...

    def distRepoMove(self, repo_id: RepoID, uploadpath: str, arch: Arch) -> VirtualCall[None]:
        ...

    def evalPolicy(self, name: str, data: Data) -> VirtualCall[str]:
        ...

    def failBuild(self, task_id: TaskID, build_id: BuildID) -> VirtualCall[None]:
        ...

    def failTask(self, task_id: TaskID, response: Any) -> VirtualCall[None]:
        ...

    def freeTasks(self, tasks: List[TaskID]) -> VirtualCall[None]:
        ...

    def getID(self) -> VirtualCall[HostID]:
        ...

    def getHost(self) -> VirtualCall[Tuple[List[HostID], List[TaskID]]]:
        ...

    def getHostTasks(self) -> VirtualCall[List[TaskInfo]]:
        ...

    def getLoadData(self) -> VirtualCall[Tuple[List[HostInfo], List[TaskInfo]]]:
        ...

    def getTasks(self) -> VirtualCall[List[TaskInfo]]:
        ...

    def importArchive(self, filepath: str, buildinfo: BuildInfo, type: str, typeInfo: Data) -> VirtualCall[None]:
        ...

    def importImage(self, task_id: TaskID, build_info: BuildInfo, results: Dict[str, Data]) -> VirtualCall[None]:
        ...

    def importWrapperRPMs(self, task_id: TaskID, build_id: BuildID, rpm_results: Dict[str, List[str]]) -> VirtualCall[None]:
        ...

    def initBuild(self, data: Data) -> VirtualCall[BuildID]:
        ...

    def initImageBuild(self, task_id: TaskID, build_info: BuildInfo) -> VirtualCall[BuildInfo]:
        ...

    def initMavenBuild(self, task_id: TaskID, build_info: BuildInfo, maven_info: MavenInfo) -> VirtualCall[BuildInfo]:
        ...

    def initWinBuild(self, task_id: TaskID, build_info: BuildInfo, win_info: WinInfo) -> VirtualCall[BuildInfo]:
        ...

    def isEnabled(self) -> VirtualCall[bool]:
        ...

    def moveBuildToScratch(self, task_id: TaskID, srpm: str, rpms: List[str], logs: Optional[Dict[str, List[str]]]=None) -> VirtualCall[None]:
        ...

    def moveImageBuildToScratch(self, task_id: TaskID, results: Data) -> VirtualCall[None]:
        ...

    def moveMavenBuildToScratch(self, task_id: TaskID, results: Data, rpm_results: Data) -> VirtualCall[None]:
        ...

    def moveWinBuildToScratch(self, task_id: TaskID, results: Data, rpm_results: Data) -> VirtualCall[None]:
        ...

    def newBuildRoot(self, repo: RepoID, arch: Arch, task_id: Optional[TaskID]=None) -> VirtualCall[BuildrootID]:
        ...

    def openTask(self, task_id: TaskID) -> VirtualCall[Optional[Data]]:
        ...

    def refuseTask(self, task_id: TaskID, soft: bool=True, msg: str='') -> VirtualCall[None]:
        ...

    def repoDone(self, repo_id: RepoID, data: Dict[Arch, Tuple[str, List[str]]], expire: bool=False, repo_json_updates: Optional[Data]=None) -> VirtualCall[None]:
        ...

    def repoInit(self, tag: Union[str, TagID], task_id: Optional[TaskID]=None, event: Optional[EventID]=None, opts: Optional[RepoOptions]=None) -> VirtualCall[Tuple[RepoID, EventID]]:
        ...

    def setBuildRootList(self, brootid: BuildrootID, rpmlist: List[RPMInfo], task_id: Optional[TaskID]=None) -> VirtualCall[None]:
        ...

    def setBuildRootState(self, brootid: BuildrootID, state: BuildrootState, task_id: Optional[TaskID]=None) -> VirtualCall[None]:
        ...

    def setHostData(self, hostdata: Data) -> VirtualCall[None]:
        ...

    def setTaskWeight(self, task_id: TaskID, weight: float) -> VirtualCall[None]:
        ...

    def subtask(self, method: str, arglist: List, parent: TaskID, **opts) -> VirtualCall[TaskID]:
        ...

    def subtask2(self, __parent: TaskID, __taskopts: Data, __method: str, *args, **opts) -> VirtualCall[TaskID]:
        ...

    def tagBuild(self, task_id: TaskID, tag: Union[str, TagID], build: BuildSpecifier, force: bool=False, fromtag: Union[str, TagID, None]=None) -> VirtualCall[None]:
        ...

    def tagNotification(self, is_successful: bool, tag_id: Union[str, TagID, None], from_id: Union[str, TagID, None], build_id: BuildID, user_id: Union[str, UserID, None], ignore_success: bool=False, failure_msg: str='') -> VirtualCall[None]:
        ...

    def taskSetWait(self, parent: TaskID, tasks: Optional[List[TaskID]]) -> VirtualCall[None]:
        ...

    def taskWait(self, parent: TaskID) -> VirtualCall[Tuple[List[int], List[int]]]:
        ...

    def taskWaitResults(self, parent: TaskID, tasks: Optional[List[TaskID]], canfail: Optional[List[int]]=None) -> VirtualCall[List[Tuple[int, Any]]]:
        ...

    def updateBuildrootArchives(self, brootid: BuildrootID, task_id: TaskID, archives: List[ArchiveInfo], project: bool=False) -> VirtualCall[None]:
        ...

    def updateBuildRootList(self, brootid: BuildrootID, rpmlist: List[RPMInfo], task_id: Optional[TaskID]=None) -> VirtualCall[None]:
        ...

    def updateHost(self, task_load: float, ready: bool, data: Optional[Data]=None) -> VirtualCall[None]:
        ...

    def updateMavenBuildRootList(self, brootid: BuildrootID, task_id: TaskID, mavenlist: List[Data], ignore: Optional[List[Union[int, str]]]=None, project: bool=False, ignore_unknown: bool=False, extra_deps: Optional[List[Union[int, str]]]=None) -> VirtualCall[None]:
        ...

    def writeSignedRPM(self, an_rpm: str, sigkey: str, force: bool=False) -> VirtualCall[None]:
        ...

class MultiCallSession:

    @property
    def host(self) -> MultiCallHost:
        ...

    def CGImport(self, metadata: Union[str, Data], directory: str, token: Optional[str]=None) -> VirtualCall[BuildInfo]:
        ...

    def CGInitBuild(self, cg: str, data: Data) -> VirtualCall[CGInitInfo]:
        ...

    def CGRefundBuild(self, cg: str, build_id: BuildID, token: str, state: BuildState=BuildState.FAILED) -> VirtualCall[None]:
        ...

    def addArchiveType(self, name: str, description: str, extensions: str, compression_type: Optional[str]=None) -> VirtualCall[None]:
        ...

    def addBType(self, name: str) -> VirtualCall[None]:
        ...

    def addChannel(self, channel_name: str, description: Optional[str]=None) -> VirtualCall[ChannelID]:
        ...

    def addExternalRepoToTag(self, tag_info: Union[str, TagID], repo_info: Union[str, ExternalRepoID], priority: int, merge_mode: str='koji', arches: Optional[List[Arch]]=None) -> VirtualCall[None]:
        ...

    def addExternalRPM(self, rpminfo: Data, external_repo: Union[str, ExternalRepoID], strict: bool=True) -> VirtualCall[None]:
        ...

    def addGroupMember(self, group: Union[str, UserID], user: Union[str, UserID], strict: bool=True) -> VirtualCall[None]:
        ...

    def addHost(self, hostname: str, arches: List[Arch], krb_principal: Optional[str]=None, force: bool=False) -> VirtualCall[HostID]:
        ...

    def addHostToChannel(self, hostname: Union[str, HostID], channel_name: str, create: bool=False, force: bool=False) -> VirtualCall[None]:
        ...

    def addRPMSig(self, an_rpm: str, data: bytes) -> VirtualCall[None]:
        ...

    def addUserKrbPrincipal(self, user: Union[str, UserID], krb_principal: str) -> VirtualCall[int]:
        ...

    def addVolume(self, name: str, strict: bool=True) -> VirtualCall[NamedID]:
        ...

    def applyVolumePolicy(self, build: BuildSpecifier, strict: bool=False) -> VirtualCall[None]:
        ...

    def assignTask(self, task_id: TaskID, host: str, force: bool=False, override: bool=False) -> VirtualCall[bool]:
        ...

    def build(self, src: str, target: str, opts: Optional[Data]=None, priority: Optional[int]=None, channel: Optional[str]=None) -> VirtualCall[int]:
        ...

    def buildImage(self, name: str, version: str, arch: Arch, target: str, ksfile: str, img_type: str, opts: Optional[Data]=None, priority: Optional[int]=None) -> VirtualCall[int]:
        ...

    def buildImageIndirection(self, opts: Optional[Data]=None, priority: Optional[int]=None) -> VirtualCall[TaskID]:
        ...

    def buildImageOz(self, name: str, version: str, arches: List[Arch], target: str, inst_tree: str, opts: Optional[Data]=None, priority: Optional[int]=None) -> VirtualCall[TaskID]:
        ...

    def buildReferences(self, build: BuildID, limit: Optional[int]=None, lazy: bool=False) -> VirtualCall[Data]:
        ...

    def cancelBuild(self, buildID: BuildID, strict: bool=False) -> VirtualCall[bool]:
        ...

    def cancelTask(self, task_id: TaskID, recurse: bool=True) -> VirtualCall[None]:
        ...

    def cancelTaskChildren(self, task_id: TaskID) -> VirtualCall[None]:
        ...

    def cancelTaskFull(self, task_id: TaskID, strict: bool=True) -> VirtualCall[None]:
        ...

    def chainBuild(self, srcs: List[str], target: str, opts: Optional[Data]=None, priority: Optional[int]=None, channel: Optional[str]=None) -> VirtualCall[int]:
        ...

    def chainMaven(self, builds: List[Data], target: str, opts: Optional[Data]=None, priority: Optional[int]=None, channel: str='maven') -> VirtualCall[int]:
        ...

    def changeBuildVolume(self, build: Union[str, BuildID], volume: str, strict: bool=True) -> VirtualCall[None]:
        ...

    def checkTagAccess(self, tag_id: Union[str, TagID], user_id: Union[str, UserID, None]=None) -> VirtualCall[Tuple[bool, bool, str]]:
        ...

    def checkTagPackage(self, tag: Union[str, TagID], pkg: Union[str, PackageID]) -> VirtualCall[bool]:
        ...

    def checkUpload(self, path: str, name: str, verify: Optional[ChecksumType]=None, tail: Optional[int]=None, volume: Optional[str]=None) -> VirtualCall[Data]:
        ...

    def count(self, methodName: str, *args: Any, **kw: Any) -> VirtualCall[int]:
        ...

    @overload
    def countAndFilterResults(self, methodName: str, *args, filterOpts: FilterOptions, **kw) -> VirtualCall[Tuple[int, List[Data]]]:
        ...

    @overload
    def countAndFilterResults(self, methodName: str, *args, **kw) -> VirtualCall[Tuple[int, List[Data]]]:
        ...

    def createBuildTarget(self, name: str, build_tag: Union[str, TagID], dest_tag: Union[str, TagID]) -> VirtualCall[None]:
        ...

    def createEmptyBuild(self, name: str, version: str, release: str, epoch: str, owner: Union[str, UserID, None]=None, draft: bool=False) -> VirtualCall[BuildID]:
        ...

    def createExternalRepo(self, name: str, url: str) -> VirtualCall[ExternalRepoInfo]:
        ...

    def createImageBuild(self, build_info: BuildSpecifier) -> VirtualCall[None]:
        ...

    def createMavenBuild(self, build_info: BuildSpecifier, maven_info: MavenInfo) -> VirtualCall[None]:
        ...

    def createNotification(self, user_id: UserID, package_id: PackageID, tag_id: TagID, success_only: bool) -> VirtualCall[None]:
        ...

    def createNotificationBlock(self, user_id: UserID, package_id: Optional[PackageID]=None, tag_id: Optional[TagID]=None) -> VirtualCall[None]:
        ...

    def createTag(self, name: str, parent: Optional[Union[str, TagID]]=None, arches: Optional[str]=None, perm: Optional[str]=None, locked: bool=False, maven_support: bool=False, maven_include_all: bool=False, extra: Optional[Dict[str, str]]=None) -> VirtualCall[TagID]:
        ...

    def createUser(self, username: str, status: Optional[UserStatus]=None, krb_principal: Optional[str]=None) -> VirtualCall[UserID]:
        ...

    def createWinBuild(self, build_info: BuildSpecifier, win_info: WinInfo) -> VirtualCall[None]:
        ...

    def deleteBuild(self, build: BuildSpecifier, strict: bool=True, min_ref_age: int=604800) -> VirtualCall[bool]:
        ...

    def deleteBuildTarget(self, buildTargetInfo: Union[str, TargetID]) -> VirtualCall[None]:
        ...

    def deleteExternalRepo(self, info: Union[str, ExternalRepoID]) -> VirtualCall[None]:
        ...

    def deleteNotification(self, id: int) -> VirtualCall[None]:
        ...

    def deleteNotificationBlock(self, id: int) -> VirtualCall[None]:
        ...

    def deleteRPMSig(self, rpminfo: Union[str, RPMID, RPMNVRA], sigkey: Optional[str]=None, all_sigs: bool=False) -> VirtualCall[None]:
        ...

    def deleteTag(self, tagInfo: Union[str, TagID]) -> VirtualCall[None]:
        ...

    def disableChannel(self, channelname: Union[str, ChannelID], comment: Optional[str]=None) -> VirtualCall[None]:
        ...

    def disableHost(self, hostname: Union[str, HostID]) -> VirtualCall[None]:
        ...

    def disableUser(self, username: Union[str, UserID]) -> VirtualCall[None]:
        ...

    def distRepo(self, tag: Union[str, TagID], keys: List[str], **task_opts) -> VirtualCall[TaskID]:
        ...

    def downloadTaskOutput(self, taskID: TaskID, fileName: str, offset: int=0, size: int=-1, volume: Optional[str]=None) -> VirtualCall[str]:
        ...

    def dropGroupMember(self, group: Union[str, UserID], user: Union[str, UserID]) -> VirtualCall[None]:
        ...

    def echo(self, *args) -> VirtualCall[List]:
        ...

    def editBuildTarget(self, buildTargetInfo: Union[str, TargetID], name: str, build_tag: Union[str, TagID], dest_tag: Union[str, TagID]) -> VirtualCall[None]:
        ...

    def editChannel(self, channelInfo: Union[str, ChannelID], **kw) -> VirtualCall[bool]:
        ...

    def editExternalRepo(self, info: Union[str, ExternalRepoID], name: Optional[str]=None, url: Optional[str]=None) -> VirtualCall[None]:
        ...

    def editHost(self, hostInfo: Union[str, HostID], **kw) -> VirtualCall[bool]:
        ...

    def editPermission(self, permission: Union[str, PermID], description: str) -> VirtualCall[None]:
        ...

    def editTag(self, tagInfo: Union[str, TagID], name: Optional[str], arches: Optional[str], locked: Optional[bool], permissionID: Optional[PermID], extra: Optional[Dict[str, str]]=None) -> VirtualCall[None]:
        ...

    def editTag2(self, tagInfo: Union[str, TagID], **kwargs) -> VirtualCall[None]:
        ...

    def editTagExternalRepo(self, tag_info: Union[str, TagID], repo_info: Union[str, ExternalRepoID], priority: Optional[int]=None, merge_mode: Optional[str]=None, arches: Optional[str]=None) -> VirtualCall[bool]:
        ...

    def editUser(self, userInfo: Union[str, UserID], name: Optional[str]=None, krb_principal_mappings: Optional[List[OldNew]]=None) -> VirtualCall[None]:
        ...

    def enableChannel(self, channelname: str, comment: Optional[str]=None) -> VirtualCall[None]:
        ...

    def enableHost(self, hostname: str) -> VirtualCall[None]:
        ...

    def enableUser(self, username: Union[str, UserID]) -> VirtualCall[None]:
        ...

    def error(self) -> VirtualCall[NoReturn]:
        ...

    def evalPolicy(self, name: str, data: Data) -> VirtualCall[str]:
        ...

    def fault(self) -> VirtualCall[NoReturn]:
        ...

    @overload
    def filterResults(self, methodName: str, *args, filterOpts: FilterOptions, **kw) -> VirtualCall[List[Data]]:
        ...

    @overload
    def filterResults(self, methodName: str, *args, **kw) -> VirtualCall[List[Data]]:
        ...

    def findBuildID(self, X: BuildSpecifier, strict: bool=False) -> VirtualCall[Optional[BuildID]]:
        ...

    def freeTask(self, task_id: TaskID) -> VirtualCall[None]:
        ...

    def getActiveRepos(self) -> VirtualCall[List[RepoInfo]]:
        ...

    def getAllArches(self) -> VirtualCall[List[Arch]]:
        ...

    def getAllPerms(self) -> VirtualCall[List[PermInfo]]:
        ...

    def getAPIVersion(self) -> VirtualCall[int]:
        ...

    def getArchive(self, archive_id: ArchiveID, strict: bool=False) -> VirtualCall[Optional[ArchiveInfo]]:
        ...

    def getArchiveFile(self, archive_id: ArchiveID, filename: str, strict: bool=False) -> VirtualCall[Optional[ArchiveFileInfo]]:
        ...

    def getArchiveType(self, filename: Optional[str]=None, type_name: Optional[str]=None, type_id: Optional[ATypeID]=None, strict: bool=False) -> VirtualCall[Optional[ATypeInfo]]:
        ...

    def getArchiveTypes(self) -> VirtualCall[List[ATypeInfo]]:
        ...

    def getAverageBuildDuration(self, package: Union[str, PackageID], age: Optional[int]=None) -> VirtualCall[Optional[float]]:
        ...

    def getBuild(self, buildInfo: BuildSpecifier, strict: bool=False) -> VirtualCall[Optional[BuildInfo]]:
        ...

    def getBuildConfig(self, tag: Union[str, TagID], event: Optional[EventID]=None) -> VirtualCall[TagInfo]:
        ...

    def getBuildLogs(self, build: BuildSpecifier) -> VirtualCall[BuildLogs]:
        ...

    def getBuildNotification(self, id: int, strict: bool=False) -> VirtualCall[Optional[Data]]:
        ...

    def getBuildNotificationBlock(self, id: int, strict: bool=False) -> VirtualCall[Optional[Data]]:
        ...

    def getBuildNotificationBlocks(self, userID: Union[str, UserID, None]=None) -> VirtualCall[Data]:
        ...

    def getBuildNotifications(self, userID: Union[str, UserID, None]=None) -> VirtualCall[Data]:
        ...

    def getBuildroot(self, buildrootID: BuildrootID, strict: bool=False) -> VirtualCall[Optional[BuildrootInfo]]:
        ...

    def getBuildrootListing(self, id: BuildrootID) -> VirtualCall[List[RPMInfo]]:
        ...

    def getBuildTarget(self, info: Union[str, TargetID], event: Optional[EventID]=None, strict: bool=False) -> VirtualCall[Optional[TargetInfo]]:
        ...

    def getBuildTargets(self, info: Union[str, TargetID, None]=None, event: Optional[EventID]=None, buildTagID: Union[str, TagID, TagInfo, None]=None, destTagID: Union[str, TagID, TagInfo, None]=None, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[TargetInfo]]:
        ...

    def getBuildType(self, buildInfo: BuildSpecifier, strict: bool=False) -> VirtualCall[Dict[str, dict]]:
        ...

    def getChangelogEntries(self, buildID: Optional[int]=None, taskID: Optional[int]=None, filepath: Optional[str]=None, author: Optional[str]=None, before: Union[datetime, str, int, None]=None, after: Union[datetime, str, int, None]=None, queryOpts: Optional[QueryOptions]=None, strict: bool=False) -> VirtualCall[List[ChangelogEntry]]:
        ...

    def getChannel(self, channelInfo: Union[str, ChannelID], strict: bool=False) -> VirtualCall[ChannelInfo]:
        ...

    @overload
    def getEvent(self, id: EventID) -> VirtualCall[Optional[EventInfo]]:
        ...

    @overload
    def getEvent(self, id: EventID, strict: Literal[True]) -> VirtualCall[EventInfo]:
        ...

    @overload
    def getEvent(self, id: EventID, strict: bool=False) -> VirtualCall[Optional[EventInfo]]:
        ...

    def getExternalRepo(self, info: Union[str, ExternalRepoID], strict: bool=False, event: Optional[EventID]=None) -> VirtualCall[ExternalRepoInfo]:
        ...

    def getExternalRepoList(self, tag_info: Union[str, TagID], event: Optional[EventID]=None) -> VirtualCall[TagExternalRepos]:
        ...

    def getFullInheritance(self, tag: Union[str, TagID], event: Optional[EventID]=None, reverse: bool=False) -> VirtualCall[TagInheritance]:
        ...

    def getGroupMembers(self, group: Union[str, UserID]) -> VirtualCall[List[UserInfo]]:
        ...

    def getHost(self, hostInfo: Union[str, HostID], strict: bool=False, event: Optional[EventID]=None) -> VirtualCall[HostInfo]:
        ...

    def getImageArchive(self, archive_id: ArchiveID, strict: bool=False) -> VirtualCall[Optional[ArchiveInfo]]:
        ...

    def getImageBuild(self, buildInfo: BuildSpecifier, strict: bool=False) -> VirtualCall[Optional[Dict[str, BuildID]]]:
        ...

    def getInheritanceData(self, tag: Union[str, TagID], event: Optional[EventID]=None) -> VirtualCall[TagInheritance]:
        ...

    def getKojiVersion(self) -> VirtualCall[str]:
        ...

    @overload
    def getLastEvent(self, before: Union[int, float, None]=None) -> VirtualCall[EventInfo]:
        ...

    @overload
    def getLastEvent(self, before: Union[int, float, None]=None, strict: bool=True) -> VirtualCall[EventInfo]:
        ...

    @overload
    def getLastHostUpdate(self, hostID: HostID) -> VirtualCall[Union[str, None]]:
        ...

    @overload
    def getLastHostUpdate(self, hostID: HostID, ts: Literal[False]) -> VirtualCall[Union[str, None]]:
        ...

    @overload
    def getLastHostUpdate(self, hostID: HostID, ts: Literal[True]) -> VirtualCall[Union[float, None]]:
        ...

    @overload
    def getLastHostUpdate(self, hostID: HostID, ts: bool=False) -> VirtualCall[Union[str, float, None]]:
        ...

    @overload
    def getLatestBuilds(self, tag: Union[str, TagID], event: Optional[EventID]=None, package: Optional[str]=None, type: Optional[str]=None) -> VirtualCall[List[TagBuildInfo]]:
        ...

    @overload
    def getLatestBuilds(self, tag: Union[str, TagID], event: Optional[EventID]=None, package: Optional[str]=None, type: Optional[str]=None, draft: Optional[bool]=None) -> VirtualCall[List[TagBuildInfo]]:
        ...

    def getLatestMavenArchives(self, tag: Union[int, str], event: Optional[int]=None, inherit: bool=True) -> VirtualCall[List[ArchiveInfo]]:
        ...

    @overload
    def getLatestRPMS(self, tag: Union[str, TagID], package: Optional[str]=None, arch: Union[Arch, List[Arch], None]=None, event: Optional[EventID]=None, rpmsigs: bool=False, type: Optional[str]=None) -> VirtualCall[Tuple[List[RPMInfo], List[BuildInfo]]]:
        ...

    @overload
    def getLatestRPMS(self, tag: Union[str, TagID], package: Optional[str]=None, arch: Union[Arch, List[Arch], None]=None, event: Optional[EventID]=None, rpmsigs: bool=False, type: Optional[str]=None, draft: Optional[bool]=None) -> VirtualCall[Tuple[List[RPMInfo], List[BuildInfo]]]:
        ...

    def getLoggedInUser(self) -> VirtualCall[UserInfo]:
        ...

    def getMavenArchive(self, archive_id: ArchiveID, strict: bool=False) -> VirtualCall[ArchiveInfo]:
        ...

    def getMavenBuild(self, buildInfo: Union[str, BuildID], strict: bool=False) -> VirtualCall[Data]:
        ...

    def getNextRelease(self, build_info: BuildNVR, incr: int=1) -> VirtualCall[str]:
        ...

    def getPackage(self, info: Union[str, PackageID], strict: bool=False, create: bool=False) -> VirtualCall[Optional[NamedID]]:
        ...

    def getPackageConfig(self, tag: Union[str, TagID], pkg: Union[str, PackageID], event: Optional[EventID]=None) -> VirtualCall[Optional[TagPackageInfo]]:
        ...

    def getPackageID(self, name: str, strict: bool=False) -> VirtualCall[Optional[PackageID]]:
        ...

    def getPerms(self) -> VirtualCall[List[str]]:
        ...

    @overload
    def getRepo(self, tag: Union[str, TagID], state: Optional[RepoState]=None, event: Optional[EventID]=None, dist: bool=False) -> VirtualCall[RepoInfo]:
        ...

    @overload
    def getRepo(self, tag: Union[str, TagID], state: Optional[RepoState]=None, event: Optional[EventID]=None, dist: bool=False, min_event: Optional[EventID]=None) -> VirtualCall[RepoInfo]:
        ...

    @overload
    def getRPM(self, rpminfo: Union[str, RPMID, RPMNVRA], strict: bool=False) -> VirtualCall[Optional[RPMInfo]]:
        ...

    @overload
    def getRPM(self, rpminfo: Union[str, RPMID, RPMNVRA], strict: bool=False, *, multi: Literal[False]) -> VirtualCall[Optional[RPMInfo]]:
        ...

    @overload
    def getRPM(self, rpminfo: Union[str, RPMID, RPMNVRA], strict: bool=False, *, multi: Literal[True]) -> VirtualCall[List[RPMInfo]]:
        ...

    @overload
    def getRPM(self, rpminfo: Union[str, RPMID, RPMNVRA], strict: bool=False, multi: bool=False) -> VirtualCall[Union[RPMInfo, List[RPMInfo], None]]:
        ...

    def getRPMChecksums(self, rpm_id: RPMID, checksum_types: Optional[List[ChecksumType]]=None, cacheonly: bool=False) -> VirtualCall[Dict[ChecksumType, str]]:
        ...

    def getRPMDeps(self, rpmID: RPMID, depType: Optional[RPMDepType]=None, queryOpts: Optional[QueryOptions]=None, strict: bool=False) -> VirtualCall[List[RPMDepInfo]]:
        ...

    def getRPMFile(self, rpmID: RPMID, filename: str, strict: bool=False) -> VirtualCall[Optional[RPMFileInfo]]:
        ...

    @overload
    def getRPMHeaders(self, rpmID: Optional[RPMID]=None, taskID: Optional[TaskID]=None, filepath: Optional[str]=None, headers: Optional[List[str]]=None) -> VirtualCall[Data]:
        ...

    @overload
    def getRPMHeaders(self, rpmID: Optional[RPMID]=None, taskID: Optional[TaskID]=None, filepath: Optional[str]=None, headers: Optional[List[str]]=None, strict: Optional[bool]=False) -> VirtualCall[Data]:
        ...

    def getSessionInfo(self, details: bool=False, user_id: Optional[UserID]=None) -> VirtualCall[Union[None, SessionInfo, List[SessionInfo]]]:
        ...

    def getTag(self, tagInfo: Union[str, TagID], strict: bool=False, event: Optional[EventID]=None, blocked: bool=False) -> VirtualCall[Optional[TagInfo]]:
        ...

    def getTagID(self, info: Union[str, TagID, Data], strict: bool=False, create: bool=False) -> VirtualCall[Optional[TagID]]:
        ...

    def getTagExternalRepos(self, tag_info: Union[str, TagID, None]=None, repo_info: Union[str, ExternalRepoID, None]=None, event: Optional[EventID]=None) -> VirtualCall[TagExternalRepos]:
        ...

    def getTagGroups(self, tag: Union[str, TagID], event: Optional[EventID]=None, inherit: bool=True, incl_pkgs: bool=True, incl_reqs: bool=True, incl_blocked: bool=False) -> VirtualCall[List[TagGroupInfo]]:
        ...

    def getTaskChildren(self, task_id: TaskID, request: Optional[bool]=False, strict: Optional[bool]=False) -> VirtualCall[List[TaskInfo]]:
        ...

    def getTaskDescendents(self, task_id: TaskID, request: bool=False) -> VirtualCall[Dict[str, List[TaskInfo]]]:
        ...

    @overload
    def getTaskInfo(self, task_id: List[TaskID], request: bool=False, strict: bool=False) -> VirtualCall[List[TaskInfo]]:
        ...

    @overload
    def getTaskInfo(self, task_id: TaskID, request: bool=False, strict: bool=False) -> VirtualCall[TaskInfo]:
        ...

    def getTaskRequest(self, taskId: TaskID) -> VirtualCall[Data]:
        ...

    def getTaskResult(self, taskId: TaskID, raise_fault: bool=True) -> VirtualCall[Any]:
        ...

    @overload
    def getUser(self, userInfo: Union[str, UserID, None]=None, strict: bool=False, krb_princs: bool=True) -> VirtualCall[UserInfo]:
        ...

    @overload
    def getUser(self, userInfo: Union[str, UserID, None]=None, strict: bool=False, krb_princs: bool=True, groups: bool=False) -> VirtualCall[UserInfo]:
        ...

    def getUserGroups(self, user: Union[int, str]) -> VirtualCall[List[UserGroup]]:
        ...

    @overload
    def getUserPerms(self, userID: Union[str, UserID, None]=None) -> VirtualCall[List[str]]:
        ...

    @overload
    def getUserPerms(self, userID: Union[str, UserID, None]=None, with_groups: bool=True) -> VirtualCall[List[str]]:
        ...

    def getUserPermsInheritance(self, userID: Union[str, UserID]) -> VirtualCall[Dict[str, List[str]]]:
        ...

    def getVolume(self, volume: str, strict: bool=False) -> VirtualCall[Optional[NamedID]]:
        ...

    def getWinArchive(self, archive_id: ArchiveID, strict: bool=False) -> VirtualCall[ArchiveInfo]:
        ...

    def getWinBuild(self, buildInfo: Union[str, BuildID], strict: bool=False) -> VirtualCall[Data]:
        ...

    def grantCGAccess(self, user: Union[str, UserID], cg: Union[str, CGID], create: bool=False) -> VirtualCall[None]:
        ...

    def grantPermission(self, userinfo: Union[str, UserID], permission: Union[str, PermID], create: bool=False, description: Optional[str]=None) -> VirtualCall[None]:
        ...

    def groupListAdd(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], block: bool=False, force: bool=False, **opts) -> VirtualCall[None]:
        ...

    def groupListBlock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID]) -> VirtualCall[None]:
        ...

    def groupListRemove(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], force: bool=False) -> VirtualCall[None]:
        ...

    def groupListUnblock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID]) -> VirtualCall[None]:
        ...

    def groupPackageListAdd(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], pkg_name: str, block: bool=False, force: bool=False, **opts) -> VirtualCall[None]:
        ...

    def groupPackageListBlock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], pkg_name: str) -> VirtualCall[None]:
        ...

    def groupPackageListRemove(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], pkg_name: str) -> VirtualCall[None]:
        ...

    def groupPackageListUnblock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], pkg_name: str) -> VirtualCall[None]:
        ...

    def groupReqListAdd(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], reqinfo: str, block: bool=False, force: bool=False, **opts) -> VirtualCall[None]:
        ...

    def groupReqListBlock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], reqinfo: str) -> VirtualCall[None]:
        ...

    def groupReqListRemove(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], reqinfo: str, force: Optional[bool]=None) -> VirtualCall[None]:
        ...

    def groupReqListUnblock(self, taginfo: Union[str, TagID], grpinfo: Union[str, TagGroupID], reqinfo: str) -> VirtualCall[None]:
        ...

    def hasPerm(self, perm: str, strict: bool=False) -> VirtualCall[bool]:
        ...

    def hello(self, *args) -> VirtualCall[str]:
        ...

    def importArchive(self, filepath: str, buildinfo: BuildInfo, type: str, typeInfo: Data) -> VirtualCall[ArchiveInfo]:
        ...

    def importRPM(self, path: str, basename: str) -> VirtualCall[RPMInfo]:
        ...

    def listArchives(self, buildID: Optional[BuildID]=None, buildrootID: Optional[BuildrootID]=None, componentBuildrootID: Optional[BuildrootID]=None, hostID: Optional[HostID]=None, type: Optional[str]=None, filename: Optional[str]=None, size: Optional[int]=None, checksum: Optional[str]=None, checksum_type: Optional[ChecksumType]=None, typeInfo: Optional[Data]=None, queryOpts: Optional[QueryOptions]=None, imageID: Optional[int]=None, archiveID: Optional[ArchiveID]=None, strict: bool=False) -> VirtualCall[List[ArchiveInfo]]:
        ...

    def listArchiveFiles(self, archive_id: ArchiveID, queryOpts: Optional[QueryOptions]=None, strict: bool=False) -> VirtualCall[List[ArchiveFileInfo]]:
        ...

    def listBTypes(self, query: Optional[NamedID]=None, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[BTypeInfo]]:
        ...

    def listBuildRPMs(self, build: BuildSpecifier) -> VirtualCall[List[RPMInfo]]:
        ...

    def listBuildroots(self, hostID: Optional[HostID]=None, tagID: Optional[TagID]=None, state: Union[BuildrootState, List[BuildrootState], None]=None, rpmID: Optional[RPMID]=None, archiveID: Optional[ArchiveID]=None, taskID: Optional[TaskID]=None, buildrootID: Optional[BuildrootID]=None, repoID: Optional[RepoID]=None, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[BuildrootInfo]]:
        ...

    def listBuilds(self, packageID: Optional[PackageID]=None, userID: Optional[UserID]=None, taskID: Optional[TaskID]=None, prefix: Optional[str]=None, state: Optional[BuildState]=None, volumeID: Optional[int]=None, source: Optional[str]=None, createdBefore: Optional[str]=None, createdAfter: Optional[str]=None, completeBefore: Optional[str]=None, completeAfter: Optional[str]=None, type: Optional[str]=None, typeInfo: Optional[Dict]=None, queryOpts: Optional[QueryOptions]=None, pattern: Optional[str]=None, cgID: Optional[CGID]=None, draft: Optional[bool]=None) -> VirtualCall[List[BuildInfo]]:
        ...

    def listCGs(self) -> VirtualCall[Dict[str, CGInfo]]:
        ...

    def listChannels(self, hostID: Optional[HostID]=None, event: Optional[EventID]=None, enabled: Optional[bool]=None) -> VirtualCall[List[ChannelInfo]]:
        ...

    def listExternalRepos(self, info: Union[str, ExternalRepoID, None]=None, url: Optional[str]=None, event: Optional[EventID]=None, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[ExternalRepoInfo]]:
        ...

    def listHosts(self, arches: Optional[List[str]]=None, channelID: Optional[ChannelID]=None, ready: Optional[bool]=None, enabled: Optional[bool]=None, userID: Optional[UserID]=None, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[HostInfo]]:
        ...

    def listPackages(self, tagID: Optional[TagID]=None, userID: Optional[UserID]=None, pkgID: Optional[PackageID]=None, prefix: Optional[str]=None, inherited: bool=False, with_dups: bool=False, event: Optional[EventID]=None, queryOpts: Optional[QueryOptions]=None, with_owners: bool=True, with_blocked: bool=True) -> VirtualCall[List[TagPackageInfo]]:
        ...

    def listPackagesSimple(self, prefix: Optional[str]=None, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[TagPackageSimple]]:
        ...

    def listRPMFiles(self, rpmID: RPMID, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[RPMFileInfo]]:
        ...

    def listRPMs(self, buildID: Optional[BuildID]=None, buildrootID: Optional[BuildrootID]=None, imageID: Optional[int]=None, componentBuildrootID: Optional[BuildrootID]=None, hostID: Optional[HostID]=None, arches: Union[Arch, List[Arch], None]=None, queryOpts: Optional[QueryOptions]=None, draft: Optional[bool]=None) -> VirtualCall[List[RPMInfo]]:
        ...

    def listTagged(self, tag: Union[str, TagID], event: Optional[EventID]=None, inherit: bool=False, prefix: Optional[str]=None, latest: bool=False, package: Optional[str]=None, owner: Optional[Union[str, UserID]]=None, type: Optional[str]=None, strict: bool=True, extra: bool=False, draft: Optional[bool]=None) -> VirtualCall[List[TagBuildInfo]]:
        ...

    def listTaggedArchives(self, tag: Union[str, TagID], event: Optional[EventID]=None, inherit: bool=False, latest: bool=False, package: Optional[str]=None, type: Optional[str]=None, strict: bool=True, extra: bool=True) -> VirtualCall[Tuple[List[ArchiveInfo], List[BuildInfo]]]:
        ...

    @overload
    def listTaggedRPMS(self, tag: Union[str, TagID], event: Optional[EventID]=None, inherit: bool=False, latest: bool=False, package: Optional[str]=None, arch: Optional[Arch]=None, rpmsigs: bool=False, owner: Union[str, UserID, None]=None, type: Optional[str]=None, strict: bool=True, extra: bool=True) -> VirtualCall[Tuple[List[RPMInfo], List[BuildInfo]]]:
        ...

    @overload
    def listTaggedRPMS(self, tag: Union[str, TagID], event: Optional[EventID]=None, inherit: bool=False, latest: bool=False, package: Optional[str]=None, arch: Optional[Arch]=None, rpmsigs: bool=False, owner: Union[str, UserID, None]=None, type: Optional[str]=None, strict: bool=True, extra: bool=True, draft: Optional[bool]=None) -> VirtualCall[Tuple[List[RPMInfo], List[BuildInfo]]]:
        ...

    def listTags(self, build: Optional[BuildSpecifier]=None, package: Union[str, PackageID, None]=None, perms: bool=True, queryOpts: Optional[QueryOptions]=None, pattern: Optional[str]=None) -> VirtualCall[List[TagInfo]]:
        ...

    def listTaskOutput(self, taskID: TaskID, stat: bool=False, all_volumes: bool=False, strict: bool=False) -> VirtualCall[Union[List[str], Dict[str, List[str]], Dict[str, Data], Dict[str, Dict[str, Data]]]]:
        ...

    def listTasks(self, opts: Optional[ListTasksOptions]=None, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[TaskInfo]]:
        ...

    @overload
    def listUsers(self, userType: UserType=UserType.NORMAL, prefix: Optional[str]=None, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[UserInfo]]:
        ...

    @overload
    def listUsers(self, userType: UserType=UserType.NORMAL, prefix: Optional[str]=None, queryOpts: Optional[QueryOptions]=None, perm: Optional[str]=None, inherited_perm: bool=False) -> VirtualCall[List[UserInfo]]:
        ...

    def listVolumes(self) -> VirtualCall[List[NamedID]]:
        ...

    def makeTask(self, *args, **opts) -> VirtualCall[TaskID]:
        ...

    def massTag(self, tag: Union[str, TagID], builds: List[Union[str, BuildID]]) -> VirtualCall[None]:
        ...

    def mavenBuild(self, url: str, target: str, opts: Optional[Data]=None, priority: Optional[int]=None, channel: str='maven') -> VirtualCall[TaskID]:
        ...

    def mavenEnabled(self) -> VirtualCall[bool]:
        ...

    def mergeScratch(self, task_id: TaskID) -> VirtualCall[BuildID]:
        ...

    def moveAllBuilds(self, tag1: Union[str, TagID], tag2: Union[str, TagID], package: Union[str, PackageID], force: bool=False) -> VirtualCall[TaskID]:
        ...

    def moveBuild(self, tag1: Union[str, TagID], tag2: Union[str, TagID], build: BuildSpecifier, force: bool=False) -> VirtualCall[TaskID]:
        ...

    def newGroup(self, name: str) -> VirtualCall[UserID]:
        ...

    def newRepo(self, tag: Union[str, TagID], event: Optional[EventID]=None, src: bool=False, debuginfo: bool=False, separate_src: bool=False) -> VirtualCall[TaskID]:
        ...

    def packageListAdd(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], owner: Union[str, UserID, None]=None, block: Optional[bool]=None, extra_arches: Optional[str]=None, force: bool=False, update: bool=False) -> VirtualCall[None]:
        ...

    def packageListBlock(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], force: bool=False) -> VirtualCall[None]:
        ...

    def packageListRemove(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], force: bool=False) -> VirtualCall[None]:
        ...

    def packageListSetArches(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], arches: str, force: bool=False) -> VirtualCall[None]:
        ...

    def packageListSetOwner(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], owner: Union[str, UserID], force: bool=False) -> VirtualCall[None]:
        ...

    def packageListUnblock(self, taginfo: Union[str, TagID], pkginfo: Union[str, PackageID], force: bool=False) -> VirtualCall[None]:
        ...

    def promoteBuild(self, build: Union[str, BuildID], force: bool=False) -> VirtualCall[BuildInfo]:
        ...

    def queryHistory(self, tables: Optional[List[str]]=None, **kwargs: Any) -> VirtualCall[Dict[str, List[Data]]]:
        ...

    def queryRPMSigs(self, rpm_id: Union[RPMID, str, BuildNVR, None]=None, sigkey: Optional[str]=None, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[RPMSignature]]:
        ...

    def removeExternalRepoFromTag(self, tag_info: Union[str, TagID], repo_info: int) -> VirtualCall[None]:
        ...

    def removeHostFromChannel(self, hostname: str, channel_name: str) -> VirtualCall[None]:
        ...

    def removeUserKrbPrincipal(self, user: Union[str, UserID], krb_principal: str) -> VirtualCall[UserID]:
        ...

    def removeVolume(self, volume: str) -> VirtualCall[None]:
        ...

    def renameChannel(self, old: str, new: str) -> VirtualCall[None]:
        ...

    def repoDelete(self, repo_id: RepoID) -> VirtualCall[int]:
        ...

    def repoExpire(self, repo_id: RepoID) -> VirtualCall[None]:
        ...

    def repoInfo(self, repo_id: RepoID, strict: bool=False) -> VirtualCall[RepoInfo]:
        ...

    def repoProblem(self, repo_id: RepoID) -> VirtualCall[None]:
        ...

    def resetBuild(self, build: Union[str, BuildID]) -> VirtualCall[None]:
        ...

    def restartHosts(self, priority: int=5, options: Optional[Data]=None) -> VirtualCall[TaskID]:
        ...

    def resubmitTask(self, taskID: TaskID) -> VirtualCall[TaskID]:
        ...

    def revokeCGAccess(self, user: Union[str, UserID], cg: Union[str, CGID]) -> VirtualCall[None]:
        ...

    def revokePermission(self, userinfo: Union[str, UserID], permission: Union[str, PermID]) -> VirtualCall[None]:
        ...

    def search(self, terms: str, type: str, matchType: str, queryOpts: Optional[QueryOptions]=None) -> VirtualCall[List[SearchResult]]:
        ...

    def setBuildOwner(self, build: BuildSpecifier, user: Union[str, UserID]) -> VirtualCall[None]:
        ...

    def setBuildTimestamp(self, build: BuildSpecifier, ts: Union[int, float]) -> VirtualCall[None]:
        ...

    def setInheritanceData(self, tag: Union[str, TagID], data: TagInheritance, clear: bool=False) -> VirtualCall[None]:
        ...

    def setTaskPriority(self, task_id: TaskID, priority: int, recurse: bool=True) -> VirtualCall[None]:
        ...

    @overload
    def showOpts(self) -> VirtualCall[str]:
        ...

    @overload
    def showOpts(self, as_string: Literal[True]) -> VirtualCall[str]:
        ...

    @overload
    def showOpts(self, as_string: Literal[False]) -> VirtualCall[Data]:
        ...

    @overload
    def showOpts(self, as_string: bool=True) -> VirtualCall[Union[str, Data]]:
        ...

    def showSession(self) -> VirtualCall[str]:
        ...

    def snapshotTag(self, src: Union[str, TagID], dst: Union[str, TagID], config: bool=True, pkgs: bool=True, builds: bool=True, groups: bool=True, latest_only: bool=True, inherit_builds: bool=True, event: Optional[EventID]=None, force: bool=False) -> VirtualCall[None]:
        ...

    def snapshotTagModify(self, src: Union[str, TagID], dst: Union[str, TagID], config: bool=True, pkgs: bool=True, builds: bool=True, groups: bool=True, latest_only: bool=True, inherit_builds: bool=True, event: Optional[EventID]=None, force: bool=False, remove: bool=False) -> VirtualCall[None]:
        ...

    def tagBuild(self, tag: Union[str, TagID], build: Union[str, BuildID], force: bool=False, fromtag: Union[str, TagID, None]=None) -> VirtualCall[None]:
        ...

    def tagBuildBypass(self, tag: Union[str, TagID], build: Union[str, BuildID], force: bool=False, notify: bool=False) -> VirtualCall[None]:
        ...

    def tagChangedSinceEvent(self, event: EventID, taglist: List[TagID]) -> VirtualCall[bool]:
        ...

    def tagFirstChangeEvent(self, tag: Union[str, TagID], after: Optional[EventID]=None, inherit: bool=True) -> VirtualCall[Optional[EventID]]:
        ...

    def tagLastChangeEvent(self, tag: Union[str, TagID], before: Optional[EventID]=None, inherit: bool=True) -> VirtualCall[Optional[EventID]]:
        ...

    def taskFinished(self, taskId: TaskID) -> VirtualCall[bool]:
        ...

    def untagBuild(self, tag: Union[str, TagID], build: Union[str, BuildID], strict: bool=True, force: bool=False) -> VirtualCall[None]:
        ...

    def untagBuildBypass(self, tag: Union[str, TagID], build: Union[str, BuildID], strict: bool=True, force: bool=False, notify: bool=False) -> VirtualCall[None]:
        ...

    def untaggedBuilds(self, name: Optional[str]=None, queryOpts: Optional[QueryOptions]=None, draft: Optional[bool]=None) -> VirtualCall[List[BuildNVR]]:
        ...

    def updateNotification(self, id: NotificationID, package_id: Union[str, PackageID, None], tag_id: Union[str, TagID, None], success_only: bool) -> VirtualCall[None]:
        ...

    def uploadFile(self, path: str, name: str, size: int, md5sum: str, offset: int, data: str, volume: Optional[str]=None, checksum: Union[str, Tuple[ChecksumType, str], None]=None) -> VirtualCall[bool]:
        ...

    def winBuild(self, vm: str, url: str, target: str, opts: Optional[Data]=None, priority: Optional[int]=None, channel: str='vm') -> VirtualCall[int]:
        ...

    def winEnabled(self) -> VirtualCall[bool]:
        ...

    def wrapperRPM(self, build: Union[int, str], url: str, target: str, priority: Optional[int]=None, channel: str='maven', opts: Optional[Data]=None) -> VirtualCall[TaskID]:
        ...

    def writeSignedRPM(self, an_rpm: str, sigkey: str, force: bool=False) -> VirtualCall[None]:
        ...


# The end.
