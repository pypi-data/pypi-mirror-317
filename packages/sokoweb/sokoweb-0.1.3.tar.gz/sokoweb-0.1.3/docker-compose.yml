services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-sokoweb_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - kademlia_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 60s
      timeout: 5s
      retries: 5

  node:
    build: .
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      ADVERTISE_IP: ${ADVERTISE_IP:-node}
      NODE_PORT: ${NODE_PORT}
      NODE_TCP_PORT: ${NODE_TCP_PORT}
      ENCRYPTION_PASSWORD: ${ENCRYPTION_PASSWORD}
      ALGORITHM: ${ALGORITHM}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-sokoweb_db}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-sokoweb_db}
      TESTING: 'false'
      PASSKEY: ${PASSKEY}
      MPESA_CONSUMER_KEY: ${MPESA_CONSUMER_KEY}
      BUSINESS_SHORT_CODE: ${BUSINESS_SHORT_CODE}
      MPESA_CONSUMER_SECRET: ${MPESA_CONSUMER_SECRET}
      CALLBACK_URL: ${CALLBACK_URL}
      BOOTSTRAP_NODES: ${BOOTSTRAP_NODES}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      IS_VALIDATOR: 'true'
      SECRET_KEY: ${SECRET_KEY}
    ports:
      - "${NODE_PORT}:${NODE_PORT}/tcp"
      - "${NODE_PORT}:${NODE_PORT}/udp"
      - "${NODE_TCP_PORT}:${NODE_TCP_PORT}/tcp"
      - "${NODE_TCP_PORT}:${NODE_TCP_PORT}/udp"
    expose:
      - "${NODE_PORT}"
      - "${NODE_TCP_PORT}"
    networks:
      - kademlia_network
    volumes:
      - node_data:/app/storage_chunks
    command: >
      bash -c "
        python wait_for_postgres.py &&
        python create_tables.py &&
        uvicorn sokoweb.api:app --host 0.0.0.0 --port ${NODE_PORT} --timeout-keep-alive 120
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${NODE_PORT}/health"]
      interval: 60s
      timeout: 5s
      retries: 5

networks:
  kademlia_network:
    driver: bridge

volumes:
  postgres_data:
  node_data: