envs:
  # ARTIFACT_URI: null
  # HF_TOKEN: <your-huggingface-token>  # Change to your own huggingface token, or use --env to pass.
  MODEL_URI: null
  MLFLOW_TRACKING_URI: http://mlflow-tracking.mlflow.svc.cluster.local:80
  MLFLOW_TRACKING_USERNAME: user
  MLFLOW_TRACKING_PASSWORD: null
  PYENV_VERSION: 3.10.13

# export MODEL_URI=models:/RayMLflowIntegration/1
# export MLFLOW_TRACKING_PASSWORD=$(kubectl get secret --namespace mlflow mlflow-tracking -o jsonpath="{.data.admin-password }" | base64 -d)
# sky launch -c model_deployment --env MODEL_URI --env MLFLOW_TRACKING_PASSWORD src/timestep/pipelines/model_deployment/task.yaml

resources:
  accelerators: GTX-1050-TI:1
  cloud: kubernetes
  cpus: 2+
  image_id: docker:ros:jazzy-ros-base-noble
  memory: 2+
  ports: 8000

run: |
  set -ex # Fail on first error and echo commands

  # Since SkyPilot tasks are run inside a fresh conda "(base)" environment,
  # deactivate first to access what the Docker image has already installed.
  conda deactivate

  source .venv/bin/activate
  # source /root/.mlflow/envs/mlflow-3ea2fc63dc46c31124c29bcdbfab5dd03ff627cd/bin/activate

  nvcc -V
  nvidia-smi

  # mlflow models serve \
  #   --env-manager virtualenv \
  #   --host 0.0.0.0 \
  #   --model-uri $MODEL_URI \
  #   --no-conda \
  #   --port 8000 \
  #   --timeout 3600 \
  #   --workers 1

  # --enable-mlserver

# service:
#   replicas: 1
#   readiness_probe:
#     initial_delay_seconds: 3600 # 60 minutes
#     path: /v1/chat/completions
#     post_data:
#       model: $MODEL_ID
#       messages:
#         - role: user
#           content: Hello! What is your name?
#       max_tokens: 1

setup: |
  set -ex # Fail on first error and echo commands

  # Since SkyPilot tasks are run inside a fresh conda "(base)" environment,
  # deactivate first to access what the Docker image has already installed.
  conda deactivate

  sudo apt-get update && DEBIAN_FRONTEND=noninteractive sudo apt-get install -y \
    build-essential \
    ccache \
    curl \
    git \
    libbz2-dev \
    libcurl4-openssl-dev \
    libffi-dev \
    liblzma-dev \
    libncursesw5-dev \
    libreadline-dev \
    libsqlite3-dev \
    libssl-dev \
    libxml2-dev \
    libxmlsec1-dev \
    nvidia-cuda-toolkit \
    nvidia-modprobe \
    python3.12-venv \
    software-properties-common \
    tk-dev \
    xz-utils \
    zlib1g-dev

  # If pyenv is not installed, install it
  if [ ! -d ~/.pyenv ]; then
    curl https://pyenv.run | bash
    echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc
    echo '[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
    echo 'eval "$(pyenv init -)"' >> ~/.bashrc
    echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc
    source ~/.bashrc
  fi

  pyenv install --skip-existing $PYENV_VERSION
  pyenv global $PYENV_VERSION

  python --version
  python -m venv .venv
  source .venv/bin/activate

  pip install --upgrade pip
  pip install mlflow ray[serve] virtualenv

  # mlflow models prepare-env \
  #   --env-manager virtualenv \
  #   --model-uri $MODEL_URI

workdir: src/timestep/pipelines/model_deployment
