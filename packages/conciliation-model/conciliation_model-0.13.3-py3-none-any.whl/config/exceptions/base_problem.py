from http import HTTPStatus
from typing import Annotated, Any, Literal, Optional

from pydantic import BaseModel, Field, HttpUrl
from pydantic_core import Url

from utils.env import env

CONCILIACIONES_HOST = env.CONCILIACIONES_HOST
CONCILIACIONES_PREFIX = env.CONCILIACIONES_PREFIX


class BaseProblem(BaseModel):
    """
    BaseProblem class to convey information about problems with HTTP status codes RFC 7807

    """

    type: Annotated[
        HttpUrl | Literal["about:blank"],
        Field(
            description="A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type."
        ),
    ]

    title: Annotated[
        str,
        Field(
            description="A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization."
        ),
    ]

    status: Annotated[
        HTTPStatus,
        Field(
            description="The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem."
        ),
    ]

    detail: Annotated[
        Optional[str],
        Field(
            description="A human-readable explanation specific to this occurrence of the problem."
        ),
    ]

    instance: Annotated[
        Optional[HttpUrl | str | Url | Any],
        Field(
            description="A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced."
        ),
    ] = None

    def __init__(self, **data):
        if self.__class__ is not BaseProblem:
            problem_type = f"{CONCILIACIONES_HOST}{CONCILIACIONES_PREFIX}problems/{self.__class__.__name__}"

            data["type"] = problem_type
        else:
            data["type"] = "about:blank"
        super().__init__(**data)
