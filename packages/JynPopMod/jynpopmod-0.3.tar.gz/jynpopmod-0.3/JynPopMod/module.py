import tkinter as tk; from tkinter import simpledialog, messagebox;
def switch_case(_v, _c, d=None): return _c.get(_v, d)() if callable(_c.get(_v, d)) else _c.get(_v, d)
def pop(_m, _t="Information"): tk.Tk().withdraw() or messagebox.showinfo(_t, _m) or tk.Tk().destroy()
def popinp(_p, _t="Input"): return simpledialog.askstring(_t, _p) or None
def ifnull(_v, _d): return _d if _v is None or _v == "" else _v
def popp(_a, _b): return _a + _b
def pop_with_image(_m, _img_path, _t="Information"): _img = tk.PhotoImage(file=_img_path); tk.Tk().withdraw(); messagebox.showinfo(_t, _m, _icon=_img)
def set_theme(root, theme="light"): [root.configure(bg="black") for widget in root.winfo_children()] if theme == "dark" else [root.configure(bg="white") for widget in root.winfo_children()]
def pop_switch(_c, _d=None, _n="User"): pop(f"{switch_case(popinp(f'Select an option:', _t=_n), _c, _d)}", t="Result")
def create_main_window(): return tk.Tk()
def set_window_size(_root, width=300, height=200): _root.geometry(f"{width}x{height}")
def set_window_title(_root, _title): _root.title(_title)
def set_window_icon(_root, _icon_path): _root.iconbitmap(_icon_path)
def minimize_window(_root): _root.iconify()
def maximize_window(_root): _root.state('zoomed')
def destroy_window(_root): _root.destroy()
def center_window(_root, width=300, height=200): _root.geometry(f"{width}x{height}+{(_root.winfo_screenwidth()//2)-(width//2)}+{(_root.winfo_screenheight()//2)-(height//2)}")
def set_window_bg_color(_root, color): _root.configure(bg=color)
def set_window_always_on_top(_root): _root.attributes("-topmost", True)
def remove_window_always_on_top(_root): _root.attributes("-topmost", False)
def set_window_opacity(_root, opacity): _root.attributes("-alpha", opacity)
def hide_window(_root): _root.withdraw()
def show_window(_root): _root.deiconify()
def set_window_fixed_size(_root): _root.resizable(False, False)
def enable_window_resizing(_root): _root.resizable(True, True)
def set_window_bg_image(_root, image_path): img = tk.PhotoImage(file=image_path); tk.Label(_root, image=img).place(relwidth=1, relheight=1); img.image = img
def change_window_icon(_root, icon_path): _root.iconbitmap(icon_path)
def create_label(_root, _text): return tk.Label(_root, text=_text).pack()
def create_button(_root, _text, _command): return tk.Button(_root, text=_text, command=_command).pack()
def create_entry(_root): return tk.Entry(_root).pack()
def create_text_widget(_root, _width=30, _height=10): return tk.Text(_root, width=_width, height=_height).pack()
def create_checkbox(_root, _text, _command): return tk.Checkbutton(_root, text=_text, command=_command).pack()
def create_radio_buttons(_root, _options, _command): var = tk.StringVar(); [tk.Radiobutton(_root, text=option, variable=var, value=option, command=_command).pack() for option in _options]; return var
def create_dropdown(_root, _options, _command): var = tk.StringVar(); tk.OptionMenu(_root, var, * _options, command=_command).pack(); return var
def create_listbox(_root, _items, _command): listbox = tk.Listbox(_root); [listbox.insert(tk.END, item) for item in _items]; listbox.pack(); return listbox
def create_canvas(_root, _width=400, _height=300): return tk.Canvas(_root, width=_width, height=_height).pack()
def create_progress_bar(_root): return tk.Progressbar(_root, length=200, mode='indeterminate').pack()
def create_scrollbar(_root, _widget): scrollbar = tk.Scrollbar(_root, orient=tk.VERTICAL, command=_widget.yview); _widget.config(yscrollcommand=scrollbar.set); scrollbar.pack(side=tk.RIGHT, fill=tk.Y); return scrollbar
def create_frame(_root): return tk.Frame(_root).pack()
def create_menu_bar(_root): return tk.Menu(_root)
def bind_key_press(_root, _key, _function): _root.bind(_key, _function)
def bind_mouse_click(_root, _function): _root.bind("<Button-1>", _function)
def bind_mouse_enter(_widget, _function): _widget.bind("<Enter>", _function)
def bind_mouse_leave(_widget, _function): _widget.bind("<Leave>", _function)
def bind_mouse_wheel(_root, _function): _root.bind("<MouseWheel>", _function)
def trigger_event(_widget, _event): _widget.event_generate(_event)
def update_label_text(_label, _new_text): _label.config(text=_new_text)
def update_entry_text(_entry, _new_text): _entry.delete(0, tk.END); _entry.insert(0, _new_text)
def update_text_widget(_text_widget, _new_content): _text_widget.delete(1.0, tk.END); _text_widget.insert(tk.END, _new_content)
def update_checkbox_state(_checkbox, _state): _checkbox.select() if _state else _checkbox.deselect()
def update_radio_selection(_var, _value): _var.set(_value)
def update_progress_bar(_progress, _value): _progress["value"] = _value
def disable_widget(_widget): _widget.config(state=tk.DISABLED)
def enable_widget(_widget): _widget.config(state=tk.NORMAL)
def change_widget_bg_color(_widget, _color): _widget.config(bg=_color)
def change_widget_fg_color(_widget, _color): _widget.config(fg=_color)
def change_widget_font(_widget, _font_name, _font_size): _widget.config(font=(_font_name, _font_size))
def add_widget_border(_widget, _border_width=2, _border_color="black"): _widget.config(borderwidth=_border_width, relief="solid", highlightbackground=_border_color)
def pack_with_padding(_widget, _padx=10, _pady=10): _widget.pack(padx=_padx, pady=_pady)
def grid_widget(_widget, _row, _col, _rowspan=1, _columnspan=1): _widget.grid(row=_row, column=_col, rowspan=_rowspan, columnspan=_columnspan)
def place_widget(_widget, _x, _y): _widget.place(x=_x, y=_y)
def set_grid_widget_sticky(_widget, _sticky="nsew"): _widget.grid(sticky=_sticky)
def show_info_messagebox(_message): messagebox.showinfo("Information", _message)
def show_error_messagebox(_message): messagebox.showerror("Error", _message)
def show_warning_messagebox(_message): messagebox.showwarning("Warning", _message)
def ask_yes_no_question(_question): return messagebox.askyesno("Question", _question)
def ask_for_input(_prompt): return simpledialog.askstring("Input", _prompt)
def show_messagebox_with_image(_message, _image_path): _img = tk.PhotoImage(file=_image_path); messagebox.showinfo("Information", _message, icon=_img)
def show_confirmation_messagebox(_message): return messagebox.askokcancel("Confirmation", _message)
def create_modal_dialog(_root, _message): dialog = tk.Toplevel(_root); dialog.title("Modal Dialog"); tk.Label(dialog, text=_message).pack(); tk.Button(dialog, text="OK", command=dialog.destroy).pack()
def prn(pnt):return print(pnt)