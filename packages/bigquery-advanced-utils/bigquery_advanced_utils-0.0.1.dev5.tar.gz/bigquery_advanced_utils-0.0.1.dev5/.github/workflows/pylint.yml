name: PyLint

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  build:
    name: 'Build and execute'
    runs-on: ubuntu-latest
    steps:
    
    - name: Check out repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.12.8'
    
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
              
    - name: Install dependencies and PyLint
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Analysing the code with pylint
      run: |
        pylint --version
        pylint --rcfile=.pylintrc --ignore=tests $(git ls-files '*.py')
  
  set-status:
    needs: build
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Set commit status based on pylint result
        uses: actions/github-script@v6
        with:
          script: |
            const sha = '${{ github.event.pull_request.head.sha }}';
            const eventName = process.env.GITHUB_EVENT_NAME;
            const commitSha = eventName === 'pull_request'
              ? '${{ github.event.pull_request.head.sha }}'
              : process.env.GITHUB_SHA;
            
            console.log(`Event Name: ${eventName}`);
            console.log(`Commit SHA: ${commitSha}`);

            const owner = '${{ github.repository_owner }}';
            const repo = '${{ github.event.repository.name }}';
            const outcome = '${{ needs.build.result }}';
            const status = outcome === 'success' ? 'success' : 'failure';
            
            console.log('Context SHA:', sha);
            console.log('Owner:', owner);
            console.log('Repo:', repo);
            console.log('Result:', status)
            
            await github.rest.repos.createCommitStatus({
              owner: owner,
              repo: repo,
              sha: commitSha,
              state: status,
              context: 'PyLint',
              description: 'Status of the PyLint execution'
            });