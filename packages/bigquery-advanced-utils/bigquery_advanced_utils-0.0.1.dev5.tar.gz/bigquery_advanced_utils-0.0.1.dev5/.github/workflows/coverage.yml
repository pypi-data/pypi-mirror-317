name: Coverage

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '**'

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  build:
    name: Run Tests and Coverage
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12.8

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      # Run tests with coverage
      - name: Run tests and collect coverage
        run: |
          coverage run -m unittest discover -s ./tests
          coverage report
          coverage xml

      # Upload coverage report
      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.xml
          slug: Alessio-Siciliano/bigquery-advanced-utils
        continue-on-error: true

      # Enforce 100% coverage
      - name: Enforce coverage threshold
        run: |
          coverage report --fail-under=100
  
  set-status:
    needs: build
    runs-on: ubuntu-latest
    if: always()   
    steps:
      - name: Set commit status based on coverage result
        uses: actions/github-script@v6
        with:
          script: |
            const sha = '${{ github.event.pull_request.head.sha }}';
            const eventName = process.env.GITHUB_EVENT_NAME;
            const commitSha = eventName === 'pull_request'
              ? '${{ github.event.pull_request.head.sha }}'
              : process.env.GITHUB_SHA;
            
            console.log(`Event Name: ${eventName}`);
            console.log(`Commit SHA: ${commitSha}`);

            const owner = '${{ github.repository_owner }}';
            const repo = '${{ github.event.repository.name }}';
            const outcome = '${{ needs.build.result }}';
            console.log('Outcome: ', outcome);
            const status = outcome === 'success' ? 'success' : 'failure';
            
            console.log('Context SHA:', sha);
            console.log('Owner:', owner);
            console.log('Repo:', repo);
            console.log('Result:', status)
            
            await github.rest.repos.createCommitStatus({
              owner: owner,
              repo: repo,
              sha: commitSha,
              state: status,
              context: 'Coverage',
              description: 'Status of the Coverage execution'
            });