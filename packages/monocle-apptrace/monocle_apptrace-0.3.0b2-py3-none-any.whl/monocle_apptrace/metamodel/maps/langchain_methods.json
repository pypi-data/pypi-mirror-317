{
"wrapper_methods" : [
    {
        "package": "langchain.prompts.base",
        "object": "BasePromptTemplate",
        "method": "invoke",
        "wrapper_package": "wrap_common",
        "wrapper_method": "task_wrapper"
    },
    {
        "package": "langchain.prompts.base",
        "object": "BasePromptTemplate",
        "method": "ainvoke",
        "wrapper_package": "wrap_common",
        "wrapper_method": "atask_wrapper"
    },
    {
        "package": "langchain.chat_models.base",
        "object": "BaseChatModel",
        "method": "invoke",
        "wrapper_package": "wrap_common",
        "wrapper_method": "llm_wrapper",
        "output_processor": ["metamodel/maps/attributes/inference/langchain_entities.json"]
    },
    {
        "package": "langchain.chat_models.base",
        "object": "BaseChatModel",
        "method": "ainvoke",
        "wrapper_package": "wrap_common",
        "wrapper_method": "allm_wrapper",
        "output_processor": ["metamodel/maps/attributes/inference/langchain_entities.json"]
    },
    {
        "package": "langchain_core.language_models.llms",
        "object": "LLM",
        "method": "_generate",
        "wrapper_package": "wrap_common",
        "wrapper_method": "llm_wrapper",
        "output_processor": ["metamodel/maps/attributes/inference/langchain_entities.json"]
    },
    {
        "package": "langchain_core.language_models.llms",
        "object": "LLM",
        "method": "_agenerate",
        "wrapper_package": "wrap_common",
        "wrapper_method": "allm_wrapper",
        "output_processor": ["metamodel/maps/attributes/inference/langchain_entities.json"]
    },
    {
        "package": "langchain_core.language_models.llms",
        "object": "BaseLLM",
        "method": "invoke",
        "wrapper_package": "wrap_common",
        "wrapper_method": "llm_wrapper",
        "output_processor": ["metamodel/maps/attributes/inference/langchain_entities.json"]
    },
    {
        "package": "langchain_core.language_models.llms",
        "object": "BaseLLM",
        "method": "ainvoke",
        "wrapper_package": "wrap_common",
        "wrapper_method": "allm_wrapper",
        "output_processor": ["metamodel/maps/attributes/inference/langchain_entities.json"]
    },
    {
        "package": "langchain_core.retrievers",
        "object": "BaseRetriever",
        "method": "invoke",
        "wrapper_package": "wrap_common",
        "wrapper_method": "task_wrapper",
        "output_processor": ["metamodel/maps/attributes/retrieval/langchain_entities.json"]

    },
    {
        "package": "langchain_core.retrievers",
        "object": "BaseRetriever",
        "method": "ainvoke",
        "wrapper_package": "wrap_common",
        "wrapper_method": "atask_wrapper",
        "output_processor": ["metamodel/maps/attributes/retrieval/langchain_entities.json"]
    },
    {
        "package": "langchain.schema",
        "object": "BaseOutputParser",
        "method": "invoke",
        "wrapper_package": "wrap_common",
        "wrapper_method": "task_wrapper"
    },
    {
        "package": "langchain.schema",
        "object": "BaseOutputParser",
        "method": "ainvoke",
        "wrapper_package": "wrap_common",
        "wrapper_method": "atask_wrapper"
    },
    {
        "package": "langchain.schema.runnable",
        "object": "RunnableSequence",
        "method": "invoke",
        "span_name": "langchain.workflow",
        "wrapper_package": "wrap_common",
        "wrapper_method": "task_wrapper"
    },
    {
        "package": "langchain.schema.runnable",
        "object": "RunnableSequence",
        "method": "ainvoke",
        "span_name": "langchain.workflow",
        "wrapper_package": "wrap_common",
        "wrapper_method": "atask_wrapper"
    },
    {
        "package": "langchain.schema.runnable",
        "object": "RunnableParallel",
        "method": "invoke",
        "span_name": "langchain.workflow",
        "wrapper_package": "wrap_common",
        "wrapper_method": "task_wrapper"
    },
    {
        "package": "langchain.schema.runnable",
        "object": "RunnableParallel",
        "method": "ainvoke",
        "span_name": "langchain.workflow",
        "wrapper_package": "wrap_common",
        "wrapper_method": "atask_wrapper"
    }
]
}