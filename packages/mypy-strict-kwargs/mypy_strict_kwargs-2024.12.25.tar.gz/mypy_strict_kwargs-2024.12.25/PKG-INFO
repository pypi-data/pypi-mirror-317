Metadata-Version: 2.1
Name: mypy-strict-kwargs
Version: 2024.12.25
Summary: Enforce using keyword arguments where possible.
Author-email: Adam Dangoor <adamdangoor@gmail.com>
License: MIT License
        
        Copyright (c) 2024 Adam Dangoor
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Documentation, https://mypy-strict-kwargs.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/adamtheturtle/mypy-strict-kwargs
Keywords: mypy
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Requires-Python: >=3.10
Description-Content-Type: text/x-rst
License-File: LICENSE
Requires-Dist: mypy>=1.13.0
Provides-Extra: dev
Requires-Dist: actionlint-py==1.7.4.20; extra == "dev"
Requires-Dist: check-manifest==0.50; extra == "dev"
Requires-Dist: deptry==0.21.2; extra == "dev"
Requires-Dist: doc8==1.1.2; extra == "dev"
Requires-Dist: doccmd==2024.11.14; extra == "dev"
Requires-Dist: docformatter==1.7.5; extra == "dev"
Requires-Dist: freezegun==1.5.1; extra == "dev"
Requires-Dist: interrogate==1.7.0; extra == "dev"
Requires-Dist: mypy[faster-cache]==1.14.0; extra == "dev"
Requires-Dist: pre-commit==4.0.1; extra == "dev"
Requires-Dist: pyenchant==3.3.0rc1; extra == "dev"
Requires-Dist: pylint==3.3.3; extra == "dev"
Requires-Dist: pylint-per-file-ignores==1.3.2; extra == "dev"
Requires-Dist: pyproject-fmt==2.5.0; extra == "dev"
Requires-Dist: pyright==1.1.391; extra == "dev"
Requires-Dist: pyroma==4.2; extra == "dev"
Requires-Dist: pytest==8.3.4; extra == "dev"
Requires-Dist: pytest-cov==6.0.0; extra == "dev"
Requires-Dist: pytest-mypy-plugins==3.2.0; extra == "dev"
Requires-Dist: pyyaml==6.0.2; extra == "dev"
Requires-Dist: ruff==0.8.4; extra == "dev"
Requires-Dist: shellcheck-py==0.10.0.1; extra == "dev"
Requires-Dist: shfmt-py==3.7.0.1; extra == "dev"
Requires-Dist: vulture==2.14; extra == "dev"
Requires-Dist: yamlfix==1.17.0; extra == "dev"
Provides-Extra: release
Requires-Dist: check-wheel-contents==0.6.1; extra == "release"

|Build Status| |codecov| |PyPI|

mypy-strict-kwargs
==================

Enforce using keyword arguments where possible.
In the same spirit as a formatter - think ``black`` or ``ruff format`` - this lets you stop spending time discussing whether a particular function call should use keyword arguments.

For example, if we have a function which takes two regular argument, there are three ways to call it.
With this plugin, ``mypy`` will only accept the form where keyword arguments are used.

.. code-block:: python

   """Showcase errors when calling a function without naming the arguments."""


   def add(a: int, b: int) -> int:
       """Add two numbers."""
       return a + b


   add(a=1, b=2)  # With this plugin, ``mypy`` will only accept this form
   add(1, 2)  # type: ignore[misc]
   add(1, b=2)  # type: ignore[misc]

Installation
------------

.. code-block:: shell

   pip install mypy-strict-kwargs

This is tested on Python |minimum-python-version|\+.

Configure ``mypy`` to use the plugin
------------------------------------

Add the plugin to your `mypy configuration file <https://mypy.readthedocs.io/en/stable/config_file.html>`_:

``.ini`` files:

.. code-block:: ini

   [mypy]
   plugins = mypy_strict_kwargs

``.toml`` files:

.. code-block:: toml

   [tool.mypy]

   plugins = [
       "mypy_strict_kwargs",
   ]

.. |Build Status| image:: https://github.com/adamtheturtle/mypy-strict-kwargs/actions/workflows/ci.yml/badge.svg?branch=main
   :target: https://github.com/adamtheturtle/mypy-strict-kwargs/actions
.. |codecov| image:: https://codecov.io/gh/adamtheturtle/mypy-strict-kwargs/branch/main/graph/badge.svg
   :target: https://codecov.io/gh/adamtheturtle/mypy-strict-kwargs
.. |PyPI| image:: https://badge.fury.io/py/mypy-strict-kwargs.svg
   :target: https://badge.fury.io/py/mypy-strict-kwargs
.. |minimum-python-version| replace:: 3.10
