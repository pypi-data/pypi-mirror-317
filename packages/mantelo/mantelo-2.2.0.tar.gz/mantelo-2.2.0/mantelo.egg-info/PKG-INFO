Metadata-Version: 2.1
Name: mantelo
Version: 2.2.0
Summary: ✨ Keycloak Admin REST Api Client for Python ✨
Author-email: Lucy Linder <lucy.derlin@gmail.com>
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
           APPENDIX: How to apply the Apache License to your work.
        
              To apply the Apache License to your work, attach the following
              boilerplate notice, with the fields enclosed by brackets "[]"
              replaced with your own identifying information. (Don't include
              the brackets!)  The text should be enclosed in the appropriate
              comment syntax for the file format. We also recommend that a
              file or class name and description of purpose be included on the
              same "printed page" as the copyright notice for easier
              identification within third-party archives.
        
           Copyright [yyyy] [name of copyright owner]
        
           Licensed under the Apache License, Version 2.0 (the "License");
           you may not use this file except in compliance with the License.
           You may obtain a copy of the License at
        
               http://www.apache.org/licenses/LICENSE-2.0
        
           Unless required by applicable law or agreed to in writing, software
           distributed under the License is distributed on an "AS IS" BASIS,
           WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
           See the License for the specific language governing permissions and
           limitations under the License.
        
Project-URL: Homepage, https://github.com/derlin/mantelo
Project-URL: Documentation, https://mantelo.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/derlin/mantelo
Project-URL: Issue tracker, https://github.com/derlin/mantelo/issues
Project-URL: Changelog, https://github.com/derlin/mantelo/CHANGELOG.md
Keywords: keycloak,http,rest,requests,client
Platform: any
Classifier: Intended Audience :: Developers
Classifier: Environment :: Web Environment
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Utilities
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: attrs
Requires-Dist: requests
Provides-Extra: dev
Requires-Dist: build; extra == "dev"
Requires-Dist: coverage; extra == "dev"
Requires-Dist: tox; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: check-manifest; extra == "dev"
Requires-Dist: types-requests; extra == "dev"
Requires-Dist: types-slumber; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Provides-Extra: docs
Requires-Dist: sphinx; extra == "docs"
Requires-Dist: sphinx-book-theme; extra == "docs"
Requires-Dist: sphinx-autoapi; extra == "docs"
Requires-Dist: sphinx-copybutton; extra == "docs"
Requires-Dist: sphinxext-opengraph; extra == "docs"

# mantelo: A Keycloak Admin REST Api Client for Python

[![codecov](https://codecov.io/gh/derlin/mantelo/graph/badge.svg?token=5Y2O7B7342)](https://codecov.io/gh/derlin/mantelo)
[![PyPI](https://img.shields.io/pypi/v/mantelo)](https://pypi.org/project/mantelo/)
![PyPI Downloads](https://static.pepy.tech/badge/mantelo)
[![Documentation Status](https://readthedocs.org/projects/mantelo/badge/?version=latest)](https://mantelo.readthedocs.io/en/latest/?badge=latest)
---

<img src="https://github.com/derlin/mantelo/blob/main/docs/_static/images/mantelo-text-900.png" alt="Mantelo" width="500">

**✨✨ MANTELO is a super small yet super powerful library for interacting with the Keycloak Admin API ✨✨**

> Mantelo [manˈtelo], from German "*Mantel*", from Late Latin "*mantum*" means "*cloak*" in Esperanto.

It stays fresh and complete because it does not hard-code or wrap any endpoint. Instead, Instead, it
offers a clean, object-oriented interface to the Keycloak RESTful API. Acting as a lightweight
wrapper around the popular [requests](https://requests.readthedocs.io/en/latest/) library, mantelo
takes care of all the boring details for you - like authentication (tokens and refresh tokens), URL
management, serialization, and request processing

Any endpoint your Keycloak supports, mantelo supports!

> [!TIP]
> Read more in the ${{\color{Gold}\huge\text{full documentation}}}\$ at https://mantelo.readthedocs.io/en/latest/

---

<!-- TOC start (generated with https://github.com/derlin/bitdowntoc) -->

- [🚀 Why mantelo?](#-why-mantelo)
- [🏁 Getting started](#-getting-started)
- [🔐 Authenticate to Keycloak](#-authenticate-to-keycloak)
   * [Authenticating with username+password](#authenticating-with-usernamepassword)
   * [Authenticating with client credentials (client ID + secret)](#authenticating-with-client-credentials-client-id--secret)
   * [Other ways of authenticating](#other-ways-of-authenticating)
- [📡 Making calls](#-making-calls)
- [💀 Exceptions](#-exceptions)

<!-- TOC end -->

---

## 🚀 Why mantelo?

You may ask why using mantelo instead of writing your own requests wrapper, or another library such
as [python-keycloak](https://python-keycloak.readthedocs.io/en/latest/). Here are some
(non-exhaustive) arguments to help you make the right choice:

- mantelo only relies on 2 small packages (`requests` and `attrs`).
- Contrary to other libraries such as python-keycloak, mantelo is always up-to-date and doesn't lack
  any endpoints.
- mantelo makes your code look nice and promotes a clean, object-oriented approach, avoiding
  hard-coded URL strings scattered throughout your code.
- mantelo abstracts away authentication (and refresh tokens), which is always tricky to get right.
- mantelo gives you access to the exact URL that was called, and the `requests.Response` in case of
  error, making debugging easier.
- mantelo is flexible: you can tweak it easily if you need to.

## 🏁 Getting started

To get started, install the package:

```bash
pip install mantelo
```

Now, assuming you have a Keycloak Server running, what's left is to:

1. authenticate, see [🔐 Authenticate to Keycloak](#-authenticate-to-keycloak)
2. make calls, see [📡 Making calls](#-making-calls)

For a quick test drive, use the [docker-compose.yml](docker-compose.yml) included in this repo and
start a Keycloak server locally using `docker compose up`. Open a Python REPL and type:

```python
from mantelo import KeycloakAdmin

c = KeycloakAdmin.from_username_password(
    server_url="http://localhost:9090",
    realm_name="master",
    client_id="admin-cli",
    username="admin",
    password="admin",
)

# get the list of clients in realm "master"
c.clients.get()

# create a user
c.users.post({
    "username": "test",
    "enabled": True,
    "credentials": [{"type": "password", "value": "test"}],
})
# get the user id
c.users.get(username="test")[0]["id"]

# ...
```

## 🔐 Authenticate to Keycloak

To authenticate to Keycloak, you can either use a username+password, or client credentials (client
ID+client secret, also known as *service account*).

The library takes care of fetching a token the first time you need it and keeping it fresh. By
default, it tries to use the refresh token (if available) and always guarantees the token is valid
for the next 30 seconds.

> [!IMPORTANT]
> A client is meant to interact with a single realm, which can be different
> from the realm used for authentication.

### Authenticating with username+password

Ensure your user has the right to interact with the endpoint(s) you are interested in. In doubt or
for testing, you can either use the admin user (not recommended) or create a user and assign it the
`realm-management:realm-admin` role (full access).

The default client `admin-cli` can always be used for connection.

Here is how to connect to the default realm with the admin user and `admin-cli` client:

```python
from mantelo import KeycloakAdmin

client = KeycloakAdmin.from_username_password(
    server_url="http://localhost:8080", # base Keycloak URL
    realm_name="master",
    # ↓↓ Authentication
    client_id="admin-cli",
    username="admin",
    password="CHANGE-ME", # TODO
)
```

This client will be able to make calls only to the `master` realm. If you want to authenticate to a
realm that is different from the one you want to query, use the argument `authentication_realm`:

```python
from mantelo import KeycloakAdmin

client = KeycloakAdmin.from_username_password(
    server_url="http://localhost:8080", # base Keycloak URL
    realm_name="my-realm", # realm for querying
    # ↓↓ Authentication
    authentication_realm_name="master", # realm for authentication only
    client_id="admin-cli",
    username="admin",
    password="CHANGE-ME",
)
```

### Authenticating with client credentials (client ID + secret)

> [!TIP]
> 
> To authenticate via a client, the latter needs:
> - to have "Client authentication" enabled,
> - to support the `Service accounts roles` authentication flow,
> 
> - to have one or more service account roles granting access to Admin endpoints.
> 
> Go to your client's "Credentials" tab to find the client secret.

Here is how to connect with a client:

```python
from mantelo import KeycloakAdmin

client = KeycloakAdmin.from_client_credentials(
    server_url="http://localhost:8080", # base Keycloak URL
    realm_name="master",
    # ↓↓ Authentication
    client_id="my-client-name",
    client_secret="59c3c211-2e56-4bb8-a07d-2961958f6185",
)
```

This client will be able to make calls only to the `master` realm. If you want to authenticate to a
realm that is different from the one you want to query, use the argument `authentication_realm`:

```python
from mantelo import KeycloakAdmin

client = KeycloakAdmin.from_client_credentials(
    server_url="http://localhost:8080", # base Keycloak URL
    realm_name="my-realm", # realm for querying
    # ↓↓ Authentication
    authentication_realm_name="master", # realm for authentication only
    client_id="my-client-name",
    client_secret="59c3c211-2e56-4bb8-a07d-2961958f6185",
)
```

### Other ways of authenticating

The supported authentication methods should be enough. If you need more, a pull request or an issue
is welcome! But just in case, here are some ways to make it more complicated 😉.

To create a `KeycloakAdmin`, you only need a method that returns a token. For example, you can use
an existing token directly (not recommended, as tokens are short-lived):

```python
from mantelo.client import BearerAuth, KeycloakAdmin

KeycloakAdmin(
    server_url="http://localhost:8080",
    realm_name="master",
    auth=BearerAuth(lambda: "my-token"),
)
```

If you want to go further, you can create your own `Connection` class (or extend the
`OpenidConnection`), and pass its `.token` method to the `BearerAuth`:

```python
from mantelo.client import BearerAuth, KeycloakAdmin
from mantelo.connection import Connection

class MyConnection(Connection):
    def token(self):
        return "<do-something-here>"

connection = MyConnection()

KeycloakAdmin(
    server_url="http://localhost:8080",
    realm_name="master",
    auth=BearerAuth(connection.token),
)
```

## 📡 Making calls

Once you have configured how to authenticate to Keycloak, the rest is easy-peasy. mantelo **starts
with the URL `<server-url>/admin/realms/<realm-name>`** and constructs the URL from there, depending
on how you call the client.

The return value is the HTTP response content, parsed from JSON. In case of error, an
`HttpException` with access to the raw response is available (see [💀 Exceptions](#-exceptions)).

Query parameters can be passed as `kwargs` to `.get`, `.post`, etc. `.post`, `.put`, and `.delete`
take the payload as the first argument, or as the named argument `data`.

Here are some examples of URL mapping (`c` is the `KeycloakAdmin` object):

| call                                                    | URL                                                                           |
| ------------------------------------------------------- | ----------------------------------------------------------------------------- |
| `c.users.get()`                                         | `GET /admin/realms/{realm}/users`                                             |
| `c.users.get(search="foo bar")`                         | `GET /admin/realms/{realm}/users?search=foo+bar`                              |
| `c.users.count.get()`                                   | `GET /admin/realms/{realm}/users/count`                                       |
| `c.users("725209cd-9076-417b-a404-149a3fb8e35b").get()` | `GET /admin/realms/{realm}/users/725209cd-9076-417b-a404-149a3fb8e35b`        |
| `c.users.post({"username": ...})`                       | `POST /admin/realms/{realm}/users/725209cd-9076-417b-a404-149a3fb8e35b`       |
| `c.users.post(foo=1, data={"username": ...})`           | `POST /admin/realms/{realm}/users/725209cd-9076-417b-a404-149a3fb8e35b?foo=1` |


> [!NOTE]
> More examples and explanations are available in the docs: https://mantelo.readthedocs.io/en/latest/02-making-calls.html


Here are some examples:

```python
>> client.users.get()
[{'id': '8d83ecda-766d-4382-8f3a-4c5ac1962961',
  'username': 'constant',
  'firstName': 'Jasper',
  'lastName': 'Fforde',
  'email': 'j@f.uk',
  'emailVerified': True,
  'createdTimestamp': 1710273159287,
  'enabled': True,
  'totp': False,
  'disableableCredentialTypes': [],
  'requiredActions': [],
  'notBefore': 0,
  'access': {'manageGroupMembership': True,
   'view': True,
   'mapRoles': True,
   'impersonate': False,
   'manage': True}}]

>> client.users.count.get()
2

>> c.clients.get()
...
HttpException: (403, {'error': 'unknown_error', 'error_description': 'For more on this error consult the server log at the debug level.'}, 'http://localhost:9090/admin/realms/orwell/clients', <Response [403]>)
```

## 💀 Exceptions

If the server returns a *401 Unauthorized* during the _authentication_ process, mantelo will raise
an `AuthenticationException` with the `error` and `errorDescription` from Keycloak. All other HTTP
exceptions are instances of `HttpException`, with some subclasses (`HttpNotFound`,
`HttpClientError`, `HttpServerError`).

Here are some examples:

```python
# Using an inexistant client
AuthenticationException(
    error='invalid_client',
    error_description='Invalid client or Invalid client credentials'
    response='<requests.Response>',
)

# Trying to access an endpoint without the proper permissions
HttpException(
    status_code=403,
    json={'error': 'unknown_error', 'error_description': 'For more on this error consult the server log at the debug level.'},
    url='http://localhost:9090/admin/realms/orwell/clients',
    response='<requests.Response>',
)
```

---

Find more in the docs, https://mantelo.readthedocs.io/en/latest/, and don't forget to leave a ⭐ if you enjoy this library!
