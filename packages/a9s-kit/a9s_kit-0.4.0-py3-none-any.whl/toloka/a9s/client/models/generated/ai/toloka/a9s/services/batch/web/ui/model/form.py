# generated by datamodel-codegen:
#   filename:  a9s.json

from __future__ import annotations

from typing import Annotated, Any, Mapping, Sequence

from pydantic import BaseModel, ConfigDict, Field, SerializeAsAny

from .viewform import (
    BatchActiveTaskLimitViewForm,
    BatchCompletionViewForm,
    BatchExtensionsViewForm,
)


class BatchProgressForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    id: str


class BatchForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    name: Annotated[str | None, Field(max_length=100, min_length=1)] = None
    priority_order: Annotated[int, Field(ge=1, le=5)]
    metadata: Mapping[str, Any] | SerializeAsAny[BaseModel] | None = None
    extensions: BatchExtensionsViewForm | None = None
    tags: Annotated[Sequence[str] | None, Field(max_length=100, min_length=0)] = None
    hidden: bool | None = None
    completion: BatchCompletionViewForm | None = None
    active_task_limit: BatchActiveTaskLimitViewForm | None = None


class BatchListProgressForm(BaseModel):
    model_config = ConfigDict(
        extra='allow',
        populate_by_name=True,
    )
    batches: Annotated[Sequence[BatchProgressForm], Field(max_length=100, min_length=0)]
