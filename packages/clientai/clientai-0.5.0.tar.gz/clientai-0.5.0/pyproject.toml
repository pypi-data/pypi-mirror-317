[tool.poetry]
name = "clientai"
version = "0.5.0"
description = "A unified client for AI providers with built-in agent support."
authors = ["Igor Benav <igor.magalhaes.r@gmail.com>"]
readme = "README.md"

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "Intended Audience :: System Administrators",
    "Topic :: Software Development :: Libraries",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]

keywords = ["ai", "agents", "llm", "nlp", "language-model", "ai-agents"]

[tool.poetry.dependencies]
python = "^3.9"
httpx = ">=0.27.0,<0.28.0"
openai = {version = "^1.50.2", optional = true}
replicate = {version = "^0.34.1", optional = true}
ollama = {version = "^0.3.3", optional = true}
groq = {version = "^0.11.0", optional = true}
pydantic = "^2.10.3"

[tool.poetry.group.dev.dependencies]
ruff = "^0.6.8"
pytest = "^8.3.3"
mypy = "1.9.0"
openai = "^1.50.2"
replicate = "^0.34.1"
ollama = "^0.3.3"
groq = "^0.11.0"
httpx = ">=0.27.0,<0.28.0"
coverage = "^7.4.4"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
python-dotenv = "^1.0.1"
mkdocs-meta-descriptions-plugin = "^3.0.0"
mkdocs-material = "^9.5.48"
mkdocstrings = {extras = ["python"], version = "^0.27.0"}

[tool.poetry.extras]
minimal = []
openai = ["openai", "httpx"]
replicate = ["replicate"]
ollama = ["ollama"]
groq = ["groq", "httpx"]
all = ["openai", "replicate", "ollama", "groq", "httpx"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py312"
line-length = 79
fix = true

[tool.ruff.lint]
select = [
    # https://docs.astral.sh/ruff/rules/#pyflakes-f
    "F", # Pyflakes
    # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "E", # pycodestyle
    "W", # Warning
    # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    # https://docs.astral.sh/ruff/rules/#mccabe-c90
    "C", # Complexity (mccabe+) & comprehensions
    # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "UP", # pyupgrade
    # https://docs.astral.sh/ruff/rules/#isort-i
    "I", # isort
]
ignore = [
    # https://docs.astral.sh/ruff/rules/#pycodestyle-e-w
    "E402", # module level import not at top of file
    # https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "UP006", # use-pep585-annotation
    "UP007", # use-pep604-annotation
    "E741",  # Ambiguous variable name
    "UP035", # deprecated-assertion
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # unused import
    "F403", # star imports
]

[tool.ruff.lint.mccabe]
max-complexity = 24

[tool.ruff.lint.pydocstyle]
convention = "google"