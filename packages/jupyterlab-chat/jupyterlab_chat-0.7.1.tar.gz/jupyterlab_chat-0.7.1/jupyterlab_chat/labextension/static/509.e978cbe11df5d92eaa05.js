"use strict";(self.webpackChunkjupyterlab_chat_extension=self.webpackChunkjupyterlab_chat_extension||[]).push([[509],{8509:(e,t,a)=>{a.r(t),a.d(t,{default:()=>b});var n=a(521),o=a(5749),r=a(9922),i=a(3161),c=a(9594),l=a(8597),s=a(1771),d=a(6228),h=a(3251),m=a(2338),u=a(7458),g=a(6960),p=a(5573);const y="Chat",C="jupyterlab-chat-extension:factory",f={id:"jupyterlab-chat-extension:autocompletionRegistry",description:"The autocompletion registry.",autoStart:!0,provides:o.IAutocompletionRegistry,activate:e=>new o.AutocompletionRegistry},v={id:C,description:"Document factories for chat.",autoStart:!0,requires:[h.IRenderMimeRegistry],optional:[p.IActiveCellManagerToken,o.IAutocompletionRegistry,r.ICollaborativeDrive,i.ILayoutRestorer,p.ISelectionWatcherToken,m.ISettingRegistry,c.IThemeManager,c.IToolbarWidgetRegistry,u.ITranslator],provides:p.IChatFactory,activate:(e,t,a,n,o,r,i,l,s,d,h)=>{const m=null!=h?h:u.nullTranslator;let g;const f=new p.WidgetConfig({});function v(e){const t=f.config.defaultDirectory,a=e.get("defaultDirectory").composite;o&&t&&t!==a&&o.get(t).then((e=>{0===e.content.length&&o.delete(t).catch((e=>{}))})).catch((()=>{}));let n=Promise.resolve(null);o&&a&&t!==a&&(n=o.get(a,{content:!1}).catch((async()=>o.newUntitled({type:"directory"}).then((async e=>o.rename(e.path,a).catch((t=>{throw o.delete(e.path),new Error(t)})))).catch((e=>{throw new Error(e)}))))),n.then((()=>{f.config={sendWithShiftEnter:e.get("sendWithShiftEnter").composite,stackMessages:e.get("stackMessages").composite,unreadNotifications:e.get("unreadNotifications").composite,enableCodeToolbar:e.get("enableCodeToolbar").composite,sendTypingNotification:e.get("sendTypingNotification").composite,defaultDirectory:a}}))}l&&(d&&(g=(0,c.createToolbarFactory)(d,l,y,C,m)),Promise.all([e.restored,l.load(C)]).then((([,e])=>{v(e),e.changed.connect(v)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const I=new c.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(p.chatFileType),o){const e=()=>p.YChat.create();o.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,n=new p.LabChatModelFactory({user:t,widgetConfig:f,commands:e.commands,activeCellManager:a,selectionWatcher:i});e.docRegistry.addModelFactory(n)})).catch((e=>console.error("The jupyterlab chat model factory is not initialized",e)));const w=new p.ChatWidgetFactory({name:y,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:s,rmRegistry:t,toolbarFactory:g,translator:m,autocompletionRegistry:n});return w.widgetCreated.connect(((t,a)=>{a.context.pathChanged.connect((()=>{I.save(a)})),I.add(a),a.model.unreadChanged.connect((()=>e.commands.notifyCommandChanged(p.CommandIDs.markAsRead)))})),e.docRegistry.addWidgetFactory(w),r&&r.restore(I,{command:"docmanager:open",args:e=>({path:e.context.path,factory:y}),name:e=>e.context.path,when:e.serviceManager.ready}),{widgetConfig:f,tracker:I}}},I={id:"jupyterlab-chat-extension:commands",description:"The commands to create or open a chat.",autoStart:!0,requires:[r.ICollaborativeDrive,p.IChatFactory],optional:[p.IActiveCellManagerToken,p.IChatPanel,c.ICommandPalette,s.ILauncher,p.ISelectionWatcherToken],activate:(e,t,a,r,i,s,d,h)=>{const{commands:m}=e,{tracker:u,widgetConfig:g}=a;m.addCommand(p.CommandIDs.createChat,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:o.chatIcon,execute:async e=>{var a,n;const o=null!==(a=e.inSidePanel)&&void 0!==a&&a;let r=null!==(n=e.name)&&void 0!==n?n:null,i="";if(r||(r=(await c.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===r)return;r&&(i=r.endsWith(p.chatFileType.extensions[0])?r:`${r}${p.chatFileType.extensions[0]}`,i=l.PathExt.join(g.config.defaultDirectory||"",i));let s=!0;if(i?await t.get(i,{content:!1}).catch((()=>{s=!1})):s=!1,!s){let e=await t.newUntitled({type:"file",ext:p.chatFileType.extensions[0]});if(i&&(e=await t.rename(e.path,i)),!e)return(0,c.showErrorMessage)("Error creating a chat","An error occurred while creating the chat"),"";i=e.path}if(m.hasCommand(p.CommandIDs.openChat))return m.execute(p.CommandIDs.openChat,{filepath:i,inSidePanel:o});m.execute("docmanager:open",{path:`RTC:${i}`,factory:y})}}),s&&s.addItem({category:"Chat",command:p.CommandIDs.createChat,args:{isPalette:!0}}),d&&d.add({command:p.CommandIDs.createChat,category:"Chat",rank:1}),m.addCommand(p.CommandIDs.markAsRead,{caption:"Mark chat as read",icon:o.readIcon,isEnabled:()=>null!==u.currentWidget&&u.currentWidget===e.shell.currentWidget&&u.currentWidget.model.unreadMessages.length>0,execute:async t=>{const a=e.shell.currentWidget;a&&a instanceof p.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(a)?a.model.unreadMessages=[]:console.error(`The command '${p.CommandIDs.markAsRead}' should be executed from the toolbar button only`)}}),u.currentChanged.connect((()=>{m.notifyCommandChanged(p.CommandIDs.markAsRead)})),e.serviceManager.ready.then((()=>{const a=e.serviceManager.user.identity;m.addCommand(p.CommandIDs.openChat,{label:"Open a chat",execute:async o=>{var l,s,d,u;const C=null!==(l=o.inSidePanel)&&void 0!==l&&l;let f=null!==(s=o.filepath)&&void 0!==s?s:null;if(null===f&&(f=(await c.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!f)return;let v=!0;if(await t.get(f,{content:!1}).catch((()=>{v=!1})),v)if(C&&i){if(e.shell instanceof n.NotebookShell){const t=e.shell;(null===(u=null===(d=t.leftHandler)||void 0===d?void 0:d.currentWidget)||void 0===u?void 0:u.id)===i.id&&t.leftHandler.isVisible||t.activateById(i.id)}else e.shell.activateById(i.id);if(i.openIfExists(f))return;const o=await t.get(f),c=t.sharedModelFactory.createNew({path:o.path,format:o.format,contentType:p.chatFileType.contentType,collaborative:!0}),l=new p.LabChatModel({user:a,sharedModel:c,widgetConfig:g,commands:e.commands,activeCellManager:r,selectionWatcher:h});i.addChat(l,o.path)}else m.execute("docmanager:open",{path:`RTC:${f}`,factory:y});else(0,c.showErrorMessage)("Error opening chat",`'${f}' is not a valid path`)}}),s&&s.addItem({category:"Chat",command:p.CommandIDs.openChat})})).catch((e=>console.error("The command to open a chat is not initialized\n",e))),m.addCommand(p.CommandIDs.focusInput,{caption:"Focus the input of the current chat widget",isEnabled:()=>null!==u.currentWidget,execute:async()=>{const t=u.currentWidget;t&&t instanceof p.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(t)&&(e.shell.activateById(t.id),t.model.focusInput())}})}},w={id:"jupyterlab-chat-extension:chat-panel",description:"The chat panel widget.",autoStart:!0,provides:p.IChatPanel,requires:[p.IChatFactory,r.ICollaborativeDrive,h.IRenderMimeRegistry],optional:[o.IAutocompletionRegistry,i.ILayoutRestorer,c.IThemeManager],activate:(e,t,a,n,r,i,c)=>{const{commands:l}=e,s=t.widgetConfig.config.defaultDirectory||"",d=new p.ChatPanel({commands:l,drive:a,rmRegistry:n,themeManager:c,defaultDirectory:s,autocompletionRegistry:r});d.id="JupyterlabChat:sidepanel",d.title.icon=o.chatIcon,d.title.caption="Jupyter Chat",t.widgetConfig.configChanged.connect(((e,t)=>{void 0!==t.defaultDirectory&&(d.defaultDirectory=t.defaultDirectory)})),e.shell.add(d,"left",{rank:2e3}),i&&i.add(d,"jupyter-chat");const h=["create","delete","rename"];return e.serviceManager.events.stream.connect(((e,t)=>{if("https://events.jupyter.org/jupyter_server/contents_service/v1"===t.schema_id){const e=t.action;h.includes(e)&&t.path.endsWith(p.chatFileType.extensions[0])&&d.updateChatList()}})),l.addCommand(p.CommandIDs.moveToSide,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:g.launchIcon,isEnabled:()=>l.hasCommand(p.CommandIDs.openChat),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof p.LabChatPanel&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${p.CommandIDs.moveToSide}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();l.execute(p.CommandIDs.openChat,{filepath:a,inSidePanel:!0}),t.dispose()}}),d}},b=[{id:"jupyterlab-chat-extension:activeCellManager",description:"The active cell manager plugin.",autoStart:!0,requires:[d.INotebookTracker],provides:p.IActiveCellManagerToken,activate:(e,t)=>new o.ActiveCellManager({tracker:t,shell:e.shell})},f,I,w,v,{id:"jupyterlab-chat-extension:selectionWatcher",description:"The selection watcher plugin.",autoStart:!0,requires:[],provides:p.ISelectionWatcherToken,activate:e=>new o.SelectionWatcher({shell:e.shell})}]}}]);