# coding: utf-8

"""
    NinjaAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.11.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from kitchenai_python_sdk.models.kitchen_ai_metadata import KitchenAIMetadata
from typing import Optional, Set
from typing_extensions import Self

class QueryResponseSchema(BaseModel):
    """
    QueryResponseSchema
    """ # noqa: E501
    input: Optional[StrictStr] = None
    output: Optional[StrictStr] = None
    retrieval_context: Optional[List[StrictStr]] = None
    stream_gen: Optional[Any] = None
    metadata: Optional[Dict[str, StrictStr]] = None
    kitchenai_metadata: Optional[KitchenAIMetadata] = None
    __properties: ClassVar[List[str]] = ["input", "output", "retrieval_context", "stream_gen", "metadata", "kitchenai_metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QueryResponseSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of stream_gen
        if self.stream_gen:
            _dict['stream_gen'] = self.stream_gen.to_dict()
        # override the default output from pydantic by calling `to_dict()` of kitchenai_metadata
        if self.kitchenai_metadata:
            _dict['kitchenai_metadata'] = self.kitchenai_metadata.to_dict()
        # set to None if input (nullable) is None
        # and model_fields_set contains the field
        if self.input is None and "input" in self.model_fields_set:
            _dict['input'] = None

        # set to None if output (nullable) is None
        # and model_fields_set contains the field
        if self.output is None and "output" in self.model_fields_set:
            _dict['output'] = None

        # set to None if retrieval_context (nullable) is None
        # and model_fields_set contains the field
        if self.retrieval_context is None and "retrieval_context" in self.model_fields_set:
            _dict['retrieval_context'] = None

        # set to None if stream_gen (nullable) is None
        # and model_fields_set contains the field
        if self.stream_gen is None and "stream_gen" in self.model_fields_set:
            _dict['stream_gen'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if kitchenai_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.kitchenai_metadata is None and "kitchenai_metadata" in self.model_fields_set:
            _dict['kitchenai_metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QueryResponseSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "input": obj.get("input"),
            "output": obj.get("output"),
            "retrieval_context": obj.get("retrieval_context"),
            "stream_gen": AnyOf.from_dict(obj["stream_gen"]) if obj.get("stream_gen") is not None else None,
            "metadata": obj.get("metadata"),
            "kitchenai_metadata": KitchenAIMetadata.from_dict(obj["kitchenai_metadata"]) if obj.get("kitchenai_metadata") is not None else None
        })
        return _obj


