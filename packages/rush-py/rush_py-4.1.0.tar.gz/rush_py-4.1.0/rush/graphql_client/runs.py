# Generated by ariadne-codegen
# Source: combined.graphql

from datetime import datetime
from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import RunStatus
from .fragments import PageInfoFull


class Runs(BaseModel):
    me: "RunsMe"


class RunsMe(BaseModel):
    account: "RunsMeAccount"


class RunsMeAccount(BaseModel):
    project: "RunsMeAccountProject"


class RunsMeAccountProject(BaseModel):
    runs: "RunsMeAccountProjectRuns"


class RunsMeAccountProjectRuns(BaseModel):
    page_info: "RunsMeAccountProjectRunsPageInfo" = Field(alias="pageInfo")
    edges: List["RunsMeAccountProjectRunsEdges"]
    total_count: int


class RunsMeAccountProjectRunsPageInfo(PageInfoFull):
    pass


class RunsMeAccountProjectRunsEdges(BaseModel):
    cursor: str
    node: "RunsMeAccountProjectRunsEdgesNode"


class RunsMeAccountProjectRunsEdgesNode(BaseModel):
    id: Any
    rex: str
    result: Optional[Any]
    trace: Optional[Any]
    module_lock: Any
    status: RunStatus
    created_at: datetime
    updated_at: datetime
    deleted_at: Optional[datetime]
    name: Optional[str]
    description: Optional[str]
    run_id: Optional[Any]
    tags: Optional[List[str]]


Runs.model_rebuild()
RunsMe.model_rebuild()
RunsMeAccount.model_rebuild()
RunsMeAccountProject.model_rebuild()
RunsMeAccountProjectRuns.model_rebuild()
RunsMeAccountProjectRunsEdges.model_rebuild()
