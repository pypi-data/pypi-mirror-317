# Generated by ariadne-codegen
# Source: combined.graphql

from datetime import datetime
from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import BindingSiteInteractionKind, PiStackKind
from .fragments import PageInfoFull


class BindingPoseConformerInteractions(BaseModel):
    me: "BindingPoseConformerInteractionsMe"


class BindingPoseConformerInteractionsMe(BaseModel):
    account: "BindingPoseConformerInteractionsMeAccount"


class BindingPoseConformerInteractionsMeAccount(BaseModel):
    project: "BindingPoseConformerInteractionsMeAccountProject"


class BindingPoseConformerInteractionsMeAccountProject(BaseModel):
    binding_pose_conformer_interactions: "BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractions"


class BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractions(
    BaseModel
):
    page_info: "BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsPageInfo" = Field(
        alias="pageInfo"
    )
    edges: List[
        "BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdges"
    ]
    total_count: int


class BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsPageInfo(
    PageInfoFull
):
    pass


class BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdges(
    BaseModel
):
    cursor: str
    node: "BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdgesNode"


class BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdgesNode(
    BaseModel
):
    id: Any
    created_at: datetime
    updated_at: datetime
    deleted_at: Optional[datetime]
    name: Optional[str]
    description: Optional[str]
    run_id: Optional[Any]
    tags: Optional[List[str]]
    binding_pose_conformer: "BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdgesNodeBindingPoseConformer"
    binding_site_interactions: "BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdgesNodeBindingSiteInteractions"


class BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdgesNodeBindingPoseConformer(
    BaseModel
):
    id: Any


class BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdgesNodeBindingSiteInteractions(
    BaseModel
):
    id: Any
    residues: List[int]
    interactions: List[
        "BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdgesNodeBindingSiteInteractionsInteractions"
    ]


class BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdgesNodeBindingSiteInteractionsInteractions(
    BaseModel
):
    kind: BindingSiteInteractionKind
    pi_stack_kind: Optional[PiStackKind]
    ligand_atom: Any
    receptor_atom: Any


BindingPoseConformerInteractions.model_rebuild()
BindingPoseConformerInteractionsMe.model_rebuild()
BindingPoseConformerInteractionsMeAccount.model_rebuild()
BindingPoseConformerInteractionsMeAccountProject.model_rebuild()
BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractions.model_rebuild()
BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdges.model_rebuild()
BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdgesNode.model_rebuild()
BindingPoseConformerInteractionsMeAccountProjectBindingPoseConformerInteractionsEdgesNodeBindingSiteInteractions.model_rebuild()
