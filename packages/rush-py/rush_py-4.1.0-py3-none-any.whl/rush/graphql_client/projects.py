# Generated by ariadne-codegen
# Source: combined.graphql

from datetime import datetime
from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .fragments import PageInfoFull


class Projects(BaseModel):
    me: "ProjectsMe"


class ProjectsMe(BaseModel):
    account: "ProjectsMeAccount"


class ProjectsMeAccount(BaseModel):
    projects: "ProjectsMeAccountProjects"


class ProjectsMeAccountProjects(BaseModel):
    page_info: "ProjectsMeAccountProjectsPageInfo" = Field(alias="pageInfo")
    edges: List["ProjectsMeAccountProjectsEdges"]
    total_count: int


class ProjectsMeAccountProjectsPageInfo(PageInfoFull):
    pass


class ProjectsMeAccountProjectsEdges(BaseModel):
    cursor: str
    node: "ProjectsMeAccountProjectsEdgesNode"


class ProjectsMeAccountProjectsEdgesNode(BaseModel):
    id: Any
    created_at: datetime
    updated_at: datetime
    deleted_at: Optional[datetime]
    name: Optional[str]
    description: Optional[str]
    run_id: Optional[Any]
    tags: Optional[List[str]]


Projects.model_rebuild()
ProjectsMe.model_rebuild()
ProjectsMeAccount.model_rebuild()
ProjectsMeAccountProjects.model_rebuild()
ProjectsMeAccountProjectsEdges.model_rebuild()
