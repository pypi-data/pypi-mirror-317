# Generated by ariadne-codegen
# Source: combined.graphql

from datetime import datetime
from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .fragments import PageInfoFull


class Proteins(BaseModel):
    me: "ProteinsMe"


class ProteinsMe(BaseModel):
    account: "ProteinsMeAccount"


class ProteinsMeAccount(BaseModel):
    project: "ProteinsMeAccountProject"


class ProteinsMeAccountProject(BaseModel):
    proteins: "ProteinsMeAccountProjectProteins"


class ProteinsMeAccountProjectProteins(BaseModel):
    page_info: "ProteinsMeAccountProjectProteinsPageInfo" = Field(alias="pageInfo")
    edges: List["ProteinsMeAccountProjectProteinsEdges"]
    total_count: int


class ProteinsMeAccountProjectProteinsPageInfo(PageInfoFull):
    pass


class ProteinsMeAccountProjectProteinsEdges(BaseModel):
    cursor: str
    node: "ProteinsMeAccountProjectProteinsEdgesNode"


class ProteinsMeAccountProjectProteinsEdgesNode(BaseModel):
    id: Any
    sequence: str
    created_at: datetime
    updated_at: datetime
    deleted_at: Optional[datetime]
    name: Optional[str]
    description: Optional[str]
    run_id: Optional[Any]
    tags: Optional[List[str]]


Proteins.model_rebuild()
ProteinsMe.model_rebuild()
ProteinsMeAccount.model_rebuild()
ProteinsMeAccountProject.model_rebuild()
ProteinsMeAccountProjectProteins.model_rebuild()
ProteinsMeAccountProjectProteinsEdges.model_rebuild()
