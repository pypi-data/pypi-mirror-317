# Generated by ariadne-codegen
# Source: combined.graphql

from datetime import datetime
from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .fragments import PageInfoFull


class Structures(BaseModel):
    me: "StructuresMe"


class StructuresMe(BaseModel):
    account: "StructuresMeAccount"


class StructuresMeAccount(BaseModel):
    project: "StructuresMeAccountProject"


class StructuresMeAccountProject(BaseModel):
    structures: "StructuresMeAccountProjectStructures"


class StructuresMeAccountProjectStructures(BaseModel):
    page_info: "StructuresMeAccountProjectStructuresPageInfo" = Field(alias="pageInfo")
    edges: List["StructuresMeAccountProjectStructuresEdges"]
    total_count: int


class StructuresMeAccountProjectStructuresPageInfo(PageInfoFull):
    pass


class StructuresMeAccountProjectStructuresEdges(BaseModel):
    cursor: str
    node: "StructuresMeAccountProjectStructuresEdgesNode"


class StructuresMeAccountProjectStructuresEdgesNode(BaseModel):
    id: Any
    rcsb_id: Optional[str]
    topology: Any
    residues: Any
    chains: Any
    created_at: datetime
    updated_at: datetime
    deleted_at: Optional[datetime]
    name: Optional[str]
    description: Optional[str]
    run_id: Optional[Any]
    tags: Optional[List[str]]


Structures.model_rebuild()
StructuresMe.model_rebuild()
StructuresMeAccount.model_rebuild()
StructuresMeAccountProject.model_rebuild()
StructuresMeAccountProjectStructures.model_rebuild()
StructuresMeAccountProjectStructuresEdges.model_rebuild()
