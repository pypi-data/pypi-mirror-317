# coding: utf-8

"""
    DSP Backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from akridata_dsp.configuration import Configuration


class TaskRegion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'from_name': 'TaskRegionSource',
        'to_name': 'str',
        'type': 'TaskRegionType',
        'value': 'Value',
        'readonly': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'from_name': 'from_name',
        'to_name': 'to_name',
        'type': 'type',
        'value': 'value',
        'readonly': 'readonly'
    }

    def __init__(self, id=None, from_name=None, to_name='image', type=None, value=None, readonly=False, local_vars_configuration=None):  # noqa: E501
        """TaskRegion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._from_name = None
        self._to_name = None
        self._type = None
        self._value = None
        self._readonly = None
        self.discriminator = None

        self.id = id
        self.from_name = from_name
        if to_name is not None:
            self.to_name = to_name
        self.type = type
        self.value = value
        if readonly is not None:
            self.readonly = readonly

    @property
    def id(self):
        """Gets the id of this TaskRegion.  # noqa: E501


        :return: The id of this TaskRegion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskRegion.


        :param id: The id of this TaskRegion.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def from_name(self):
        """Gets the from_name of this TaskRegion.  # noqa: E501


        :return: The from_name of this TaskRegion.  # noqa: E501
        :rtype: TaskRegionSource
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this TaskRegion.


        :param from_name: The from_name of this TaskRegion.  # noqa: E501
        :type from_name: TaskRegionSource
        """
        if self.local_vars_configuration.client_side_validation and from_name is None:  # noqa: E501
            raise ValueError("Invalid value for `from_name`, must not be `None`")  # noqa: E501

        self._from_name = from_name

    @property
    def to_name(self):
        """Gets the to_name of this TaskRegion.  # noqa: E501


        :return: The to_name of this TaskRegion.  # noqa: E501
        :rtype: str
        """
        return self._to_name

    @to_name.setter
    def to_name(self, to_name):
        """Sets the to_name of this TaskRegion.


        :param to_name: The to_name of this TaskRegion.  # noqa: E501
        :type to_name: str
        """

        self._to_name = to_name

    @property
    def type(self):
        """Gets the type of this TaskRegion.  # noqa: E501


        :return: The type of this TaskRegion.  # noqa: E501
        :rtype: TaskRegionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TaskRegion.


        :param type: The type of this TaskRegion.  # noqa: E501
        :type type: TaskRegionType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def value(self):
        """Gets the value of this TaskRegion.  # noqa: E501


        :return: The value of this TaskRegion.  # noqa: E501
        :rtype: Value
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TaskRegion.


        :param value: The value of this TaskRegion.  # noqa: E501
        :type value: Value
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def readonly(self):
        """Gets the readonly of this TaskRegion.  # noqa: E501


        :return: The readonly of this TaskRegion.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this TaskRegion.


        :param readonly: The readonly of this TaskRegion.  # noqa: E501
        :type readonly: bool
        """

        self._readonly = readonly

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskRegion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TaskRegion):
            return True

        return self.to_dict() != other.to_dict()
