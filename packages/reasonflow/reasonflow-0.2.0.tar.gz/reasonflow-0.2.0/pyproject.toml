[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "reasonflow"
version = "0.2.0"
description = "A powerful workflow orchestration framework for AI/ML pipelines with advanced observability"
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "Baljindersingh Bedi", email = "baljinder@reasonchain.ai" }
]
keywords = [
    "workflow",
    "orchestration",
    "llm",
    "rag",
    "observability",
    "ai",
    "ml",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "reasontrack>=0.1.0",
    "reasonchain>=0.1.0",
    "python-dotenv>=1.0.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
observability = [
    "prometheus-client>=0.17.1",
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-exporter-otlp>=1.20.0",
    "influxdb-client>=1.38.0",
    "elasticsearch>=8.10.1",
    "elasticsearch-async>=6.2.0",
    "confluent-kafka>=2.2.0",
    "redis>=5.0.1",
    "aioredis>=2.0.1",
    "aiosmtplib>=2.0.0",
]
ai = [
    "sentence-transformers>=2.2.2",
    "faiss-cpu>=1.7.4",
    "torch>=2.1.0",
    "transformers>=4.36.0",
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "scikit-learn>=1.3.0",
]
docs = [
    "python-docx>=1.0.0",
    "PyPDF2>=3.0.0",
    "pdfplumber>=0.10.0",
    "pytesseract>=0.3.10",
    "pdf2image>=1.16.3",
    "pillow>=10.0.0",
]
vectors = [
    "pinecone-client>=2.2.4",
    "pymilvus>=2.3.1",
    "qdrant-client>=1.7.0",
    "weaviate-client>=3.25.0",
]
llm = [
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "groq>=0.4.0",
]
api = [
    "fastapi>=0.105.0",
    "uvicorn>=0.24.0",
    "httpx>=0.25.0",
    "requests>=2.31.0",
    "aiohttp>=3.9.0",
    "websockets>=12.0",
]
storage = [
    "firebase-admin>=6.2.0",
    "boto3>=1.34.0",
    "minio>=7.2.0",
    "cachetools>=5.3.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=23.12.0",
    "isort>=5.13.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.6.0",
]
docs-build = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
]
all = [
    "reasonflow[observability,ai,docs,vectors,llm,api,storage,dev,docs-build]"
]

[project.urls]
Homepage = "https://github.com/sunnybedi990/reasonflow"
Documentation = "https://reasonflow.readthedocs.io"
Repository = "https://github.com/sunnybedi990/reasonflow.git"
Issues = "https://github.com/sunnybedi990/reasonflow/issues"

[tool.hatch.build.targets.wheel]
packages = ["reasonflow"]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=reasonflow --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["reasonflow"]
omit = ["tests/*", "setup.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
] 