"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .collectionticketcomment_input import (
    CollectionTicketCommentInput,
    CollectionTicketCommentInputTypedDict,
)
from .createcommentresponse import CreateCommentResponse, CreateCommentResponseTypedDict
from .unexpectederrorresponse import (
    UnexpectedErrorResponse,
    UnexpectedErrorResponseTypedDict,
)
from apideck_unify.types import BaseModel
from apideck_unify.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
import pydantic
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class IssueTrackingCollectionTicketCommentsAddGlobalsTypedDict(TypedDict):
    consumer_id: NotRequired[str]
    r"""ID of the consumer which you want to get or push data from"""
    app_id: NotRequired[str]
    r"""The ID of your Unify application"""


class IssueTrackingCollectionTicketCommentsAddGlobals(BaseModel):
    consumer_id: Annotated[
        Optional[str],
        pydantic.Field(alias="x-apideck-consumer-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""ID of the consumer which you want to get or push data from"""

    app_id: Annotated[
        Optional[str],
        pydantic.Field(alias="x-apideck-app-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""The ID of your Unify application"""


class IssueTrackingCollectionTicketCommentsAddRequestTypedDict(TypedDict):
    collection_id: str
    r"""The collection ID"""
    ticket_id: str
    r"""ID of the ticket you are acting upon."""
    collection_ticket_comment: CollectionTicketCommentInputTypedDict
    raw: NotRequired[bool]
    r"""Include raw response. Mostly used for debugging purposes"""
    service_id: NotRequired[str]
    r"""Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API."""


class IssueTrackingCollectionTicketCommentsAddRequest(BaseModel):
    collection_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The collection ID"""

    ticket_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""ID of the ticket you are acting upon."""

    collection_ticket_comment: Annotated[
        CollectionTicketCommentInput,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    raw: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False
    r"""Include raw response. Mostly used for debugging purposes"""

    service_id: Annotated[
        Optional[str],
        pydantic.Field(alias="x-apideck-service-id"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Provide the service id you want to call (e.g., pipedrive). Only needed when a consumer has activated multiple integrations for a Unified API."""


IssueTrackingCollectionTicketCommentsAddResponseTypedDict = TypeAliasType(
    "IssueTrackingCollectionTicketCommentsAddResponseTypedDict",
    Union[CreateCommentResponseTypedDict, UnexpectedErrorResponseTypedDict],
)


IssueTrackingCollectionTicketCommentsAddResponse = TypeAliasType(
    "IssueTrackingCollectionTicketCommentsAddResponse",
    Union[CreateCommentResponse, UnexpectedErrorResponse],
)
