# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
from .payment_status import PaymentStatus
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Payment(UniversalBaseModel):
    id: str = pydantic.Field()
    """
    This is the id of the payment
    """

    org_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="orgId")] = pydantic.Field(
        default=None
    )
    """
    This is the id of the org
    """

    cost: str = pydantic.Field()
    """
    This is the total cost of the payment, which is the sum of all the costs in the costs object.
    
    Note: this is a string to avoid floating point precision issues.
    """

    costs: typing.List[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field()
    """
    This is the itemized breakdown of payment amounts
    """

    status: PaymentStatus = pydantic.Field()
    """
    This is the status of the payment
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    This is the timestamp when the payment was created
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    This is the timestamp when the payment was last updated
    """

    is_auto_reload: typing_extensions.Annotated[bool, FieldMetadata(alias="isAutoReload")] = pydantic.Field()
    """
    This indicates if this payment was automatically generated by the auto-reload feature
    """

    subscription_id: typing_extensions.Annotated[str, FieldMetadata(alias="subscriptionId")] = pydantic.Field()
    """
    This is the id of the subscription the payment belongs to
    """

    call_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="callId")] = pydantic.Field(
        default=None
    )
    """
    This is the id of the call
    """

    phone_number_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="phoneNumberId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the id of the purchased phone number
    """

    stripe_payment_intent_id: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="stripePaymentIntentId")
    ] = pydantic.Field(default=None)
    """
    This is the id of the associated stripe payment intent
    """

    stripe_invoice_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="stripeInvoiceId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the id of the associated stripe invoice
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
