# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .vapi_phone_number_fallback_destination import VapiPhoneNumberFallbackDestination
from ..core.serialization import FieldMetadata
import pydantic
import datetime as dt
from .sip_authentication import SipAuthentication
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class VapiPhoneNumber(UniversalBaseModel):
    fallback_destination: typing_extensions.Annotated[
        typing.Optional[VapiPhoneNumberFallbackDestination], FieldMetadata(alias="fallbackDestination")
    ] = pydantic.Field(default=None)
    """
    This is the fallback destination an inbound call will be transferred to if:
    1. `assistantId` is not set
    2. `squadId` is not set
    3. and, `assistant-request` message to the `serverUrl` fails
    
    If this is not set and above conditions are met, the inbound call is hung up with an error message.
    """

    provider: typing.Literal["vapi"] = "vapi"
    id: str = pydantic.Field()
    """
    This is the unique identifier for the phone number.
    """

    org_id: typing_extensions.Annotated[str, FieldMetadata(alias="orgId")] = pydantic.Field()
    """
    This is the unique identifier for the org that this phone number belongs to.
    """

    created_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="createdAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the phone number was created.
    """

    updated_at: typing_extensions.Annotated[dt.datetime, FieldMetadata(alias="updatedAt")] = pydantic.Field()
    """
    This is the ISO 8601 date-time string of when the phone number was last updated.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    This is the name of the phone number. This is just for your own reference.
    """

    assistant_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="assistantId")] = (
        pydantic.Field(default=None)
    )
    """
    This is the assistant that will be used for incoming calls to this phone number.
    
    If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.
    """

    squad_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="squadId")] = pydantic.Field(
        default=None
    )
    """
    This is the squad that will be used for incoming calls to this phone number.
    
    If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.
    """

    server_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="serverUrl")] = pydantic.Field(
        default=None
    )
    """
    This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.
    
    You can see the shape of the messages sent in `ServerMessage`.
    
    This overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl.
    """

    server_url_secret: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="serverUrlSecret")] = (
        pydantic.Field(default=None)
    )
    """
    This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.
    
    Same precedence logic as serverUrl.
    """

    sip_uri: typing_extensions.Annotated[str, FieldMetadata(alias="sipUri")] = pydantic.Field()
    """
    This is the SIP URI of the phone number. You can SIP INVITE this. The assistant attached to this number will answer.
    
    This is case-insensitive.
    """

    authentication: typing.Optional[SipAuthentication] = pydantic.Field(default=None)
    """
    This enables authentication for incoming SIP INVITE requests to the `sipUri`.
    
    If not set, any username/password to the 401 challenge of the SIP INVITE will be accepted.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
