import os

class log_export:
    def __init__(self):
        self.words = {
            "1_snippet": self.create_file_1111,
            "2_snippet": self.create_file_2222,
        }

    def get_code(self, word):
        func = self.words.get(word, None)
        if func:
            func()






# 1111111111111111

    def create_file_1111(self):
        code = """
Анализ предметной области и технического задания

Цели:

Создать информационную систему для автосервиса, которая позволит пользователям:

Создавать, редактировать, сортировать и удалять заявки.

Отслеживать статус выполнения заявок.

Обеспечить функциональность для сотрудников:

Выполнять заявки, изменять их приоритет и оставлять отчеты после выполнения или удаления.

Реализовать административный функционал:

Управление ролями пользователей (пользователь, сотрудник, администратор).

Обеспечить удобный и интуитивно понятный интерфейс для всех ролей.

Гарантировать безопасность данных и доступность системы.

Основные этапы и мероприятия:

Анализ требований:

Исследование аналогичных решений.

Сбор требований заказчика.

Составление технического задания (ТЗ).

Проектирование системы:

Разработка архитектуры приложения.

Проектирование базы данных.

Разработка пользовательских сценариев (Use Cases).

Разработка:

Реализация пользовательского интерфейса.

Создание backend-части системы.

Интеграция frontend и backend.

Тестирование:

Модульное тестирование.

Интеграционное тестирование.

Пользовательское тестирование.

Внедрение:

Развертывание системы на сервере.

Обучение сотрудников автосервиса.

Сопровождение:

Обеспечение технической поддержки.

Обновление и улучшение системы на основе обратной связи.

Инструменты и методы:

Инструменты разработки:

Visual Studio Code, Node.js, React (Frontend), PostgreSQL (База данных).

Express.js (Backend), Docker (Развертывание).

Методы управления проектом:

Agile (Scrum).

Инструменты для управления проектом:

Microsoft Project, Trello.

Метрики качества:

Производительность:

Время загрузки интерфейса: не более 2 секунд.

Время обработки запросов: не более 1 секунды.

Надежность:

Доступность системы: 99.9%.

Минимальное время восстановления после сбоев: 1 час.

Удобство использования:

Коэффициент успешного выполнения задач пользователями: 90% и выше.

Безопасность:

Шифрование данных в базе данных.

Аудит логов действий пользователей.

Ответственные лица:

Руководитель проекта: Отвечает за общий контроль выполнения задач.

Системный архитектор: Проектирование архитектуры системы.

Разработчики: Реализация функциональности приложения.

Тестировщики: Проверка качества кода и функциональности.

Системный администратор: Настройка серверов и обеспечение работы системы.

Руководство системного программиста

Настроить локальную среду разработки.

Установить необходимые зависимости.

Ознакомиться с архитектурой системы и проектной документацией.

Реализовать модули согласно техническому заданию.

Выполнить модульное тестирование перед сдачей кода.

Руководство сопровождения ПО

Регулярное резервное копирование базы данных.

Мониторинг производительности системы.

Устранение выявленных ошибок.

Выпуск обновлений и внедрение новых функций.

Ведение документации по изменениям.
"""
        with open(os.path.join(os.getcwd(), '1_snippet.txt'), 'w') as f:
            f.write(code)



# 222222222222222222222222222

    def create_file_2222(self):
        code = """
Ресурсный план:

Основные задачи и подзадачи распределяются следующим образом:

Анализ требований начинается 1 января 2025 года и включает следующие этапы:

Сбор требований, который займет 5 дней и потребует участия аналитика и заказчика.

Составление технического задания, которое начнется 6 января 2025 года, займет 3 дня и потребует работы аналитика.

Проектирование системы начнется 9 января 2025 года и включает:

Разработку архитектуры, которая продлится 7 дней и потребует участия системного архитектора.

Проектирование базы данных, начинающееся 16 января 2025 года, которое займет 5 дней и потребует работы разработчика базы данных.

Разработка стартует 21 января 2025 года и включает:

Разработку фронтенда, которая займет 15 дней и будет выполнена фронтенд-разработчиком.

Разработку бэкенда, которая продлится 20 дней и потребует участия бэкенд-разработчика.

Интеграцию, которая начнется 5 февраля 2025 года, займет 7 дней и потребует совместной работы всех разработчиков.

Тестирование начнется 12 февраля 2025 года и включает:

Модульное тестирование, которое продлится 5 дней и будет выполнено тестировщиком.

Интеграционное тестирование, которое начнется 17 февраля 2025 года, продлится 7 дней и потребует работы тестировщика.

Внедрение начнется 24 февраля 2025 года и включает:

Развертывание системы, которое займет 3 дня и будет выполнено системным администратором.

Обучение пользователей, которое начнется 27 февраля 2025 года, займет 2 дня и потребует участия руководителя проекта.

Задачи, выполняемые одновременно:

Проектирование архитектуры и проектирование базы данных.

Разработка фронтенда и бэкенда.

Тестирование и внесение исправлений.

Используемые ресурсы:

Сотрудники: аналитик, разработчики (2 фронтенд, 2 бэкенд), тестировщики (2), системный администратор.

Оборудование: 5 компьютеров, сервер для тестирования и развертывания.

Программное обеспечение: лицензии на Visual Studio Code, PostgreSQL, Docker.

Заключение

Данный план обеспечивает системный подход к разработке информационной системы для автосервиса с учетом всех необходимых этапов, ресурсов и ответственности.
"""
        with open(os.path.join(os.getcwd(), '2_snippet.txt'), 'w') as f:
            f.write(code)

# Пример использования
log = log_export()
log.get_code("1_snippet")  # Создаст файл LogExport.txt с содержимым 1111
log.get_code("2_snippet")    # Создаст файл AnotherExport.txt с содержимым 2222
