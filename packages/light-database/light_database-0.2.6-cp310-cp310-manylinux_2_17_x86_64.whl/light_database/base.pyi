# (generated with --quick)

import light_database.sql
from typing import Any, Dict, Iterable, Optional, Type, Union, Tuple, Callable, ParamSpec, TypeVar
from pandas import DataFrame

T = TypeVar("T")
P = ParamSpec("P")

def retry(func: Callable[P, T]) -> Callable[P, T]: ...

def prioritize_importing(modules: Tuple[str, ...], depth: int = 0) -> Any: ...

class BaseDB:
    _section: Tuple[str]
    _execute: bool
    _print: bool
    _affect: bool
    @classmethod
    def _key_on_thread(cls) -> str: ...
    @staticmethod
    def _local_delattr(key: str) -> None: ...
    @staticmethod
    def _local_getattr(key: str) -> Any: ...
    @staticmethod
    def _local_hasattr(key: str) -> bool: ...
    @staticmethod
    def _local_setattr(key: str, value: Any) -> None: ...
    @classmethod
    def _read_config(cls, section: str) -> Dict[str, Union[int, str]]: ...
    @classmethod
    def new(cls, *section: str, _execute: bool = True, _print: bool = False, _affect: bool = False, **kwargs: Any) -> Type[BaseDB]: ...

class RegularDB(BaseDB):
    _creator: Any
    @classmethod
    def _reset(cls, section: str) -> Optional[Exception]: ...
    @classmethod
    def connection(cls) -> Any: ...
    @classmethod
    def close(cls) -> None: ...
    @classmethod
    def delete(cls, table: str) -> light_database.sql.DeleteSqlModel: ...
    @classmethod
    def description(cls, table: str) -> DataFrame: ...
    @classmethod
    def execute(cls, sql: str, values: Iterable = ()) -> None: ...
    @classmethod
    def filter(cls, table: str) -> light_database.sql.FilterSqlModel: ...
    @classmethod
    def insert(cls, table: str) -> light_database.sql.InsertSqlModel: ...
    @classmethod
    def _database_interaction(cls, sql: str, values: Iterable[Any] = (), _return: bool = True) -> Optional[DataFrame]: ...
    @classmethod
    def query(cls, sql: str, values: Iterable = ()) -> DataFrame: ...
    @classmethod
    def tables(cls, db: Optional[str] = None) -> DataFrame: ...
    @classmethod
    def update(cls, table: str) -> light_database.sql.UpdateSqlModel: ...

class PGDB(RegularDB):
    @classmethod
    def tables(cls, table_schema: str = "public") -> DataFrame: ...
    @classmethod
    def description(cls, table: str, table_schema: str = "public") -> DataFrame: ...