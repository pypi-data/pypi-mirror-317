# (generated with --quick)

import sys
from thrift.transport import TTransport
from typing import Any, Dict, List, Optional, Tuple, Type

TApplicationException: Any
TException: Any
TFrozenDict: Any
TMessageType: Any
TProtocolException: Any
TType: Any
all_structs: Any
fix_spec: Any

class TAppend:
    __doc__: str
    attributes: Any
    cellVisibility: Any
    columns: Any
    durability: Any
    returnResults: Any
    row: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[TColumnValue]]], bool], None], Tuple[int, Any, str, Tuple[Any, str, Any, str, bool], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[TCellVisibility]]], None], Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, row = ..., columns = ..., attributes = ..., durability = ..., cellVisibility = ..., returnResults = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TAuthorization:
    __doc__: str
    labels: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, Tuple[Any, str, bool], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, labels = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TBloomFilterType:
    NONE: int
    ROW: int
    ROWCOL: int
    ROWPREFIX_FIXED_LENGTH: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]
    __doc__: str

class TCellVisibility:
    __doc__: str
    expression: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, expression = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TColumn:
    __doc__: str
    family: Any
    qualifier: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None]]
    timestamp: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, family = ..., qualifier = ..., timestamp = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TColumnFamilyDescriptor:
    __doc__: str
    attributes: Any
    blockCacheEnabled: Any
    blockSize: Any
    bloomnFilterType: Any
    cacheBloomsOnWrite: Any
    cacheDataOnWrite: Any
    cacheIndexesOnWrite: Any
    compressTags: Any
    compressionType: Any
    configuration: Any
    dataBlockEncoding: Any
    dfsReplication: Any
    evictBlocksOnClose: Any
    inMemory: Any
    keepDeletedCells: Any
    maxVersions: Any
    minVersions: Any
    name: Any
    scope: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, str, Any, str, bool], None], Tuple[int, Any, str, Tuple[Any, str, Any, str, bool], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None]]
    timeToLive: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, name = ..., attributes = ..., configuration = ..., blockSize = ..., bloomnFilterType = ..., compressionType = ..., dfsReplication = ..., dataBlockEncoding = ..., keepDeletedCells = ..., maxVersions = ..., minVersions = ..., scope = ..., timeToLive = ..., blockCacheEnabled = ..., cacheBloomsOnWrite = ..., cacheDataOnWrite = ..., cacheIndexesOnWrite = ..., compressTags = ..., evictBlocksOnClose = ..., inMemory = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TColumnIncrement:
    __doc__: str
    amount: Any
    family: Any
    qualifier: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, int]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, family = ..., qualifier = ..., amount = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TColumnValue:
    __doc__: str
    family: Any
    qualifier: Any
    tags: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None]]
    timestamp: Any
    type: Any
    value: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, family = ..., qualifier = ..., value = ..., timestamp = ..., tags = ..., type = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TCompareOperator:
    EQUAL: int
    GREATER: int
    GREATER_OR_EQUAL: int
    LESS: int
    LESS_OR_EQUAL: int
    NOT_EQUAL: int
    NO_OP: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]
    __doc__: str

class TCompressionAlgorithm:
    BZIP2: int
    GZ: int
    LZ4: int
    LZO: int
    NONE: int
    SNAPPY: int
    ZSTD: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]
    __doc__: str

class TConsistency:
    STRONG: int
    TIMELINE: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]
    __doc__: str

class TDataBlockEncoding:
    DIFF: int
    FAST_DIFF: int
    NONE: int
    PREFIX: int
    ROW_INDEX_V1: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]
    __doc__: str

class TDelete:
    __doc__: str
    attributes: Any
    columns: Any
    deleteType: Any
    durability: Any
    row: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[TColumn]]], bool], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, int], None, Tuple[int, Any, str, Tuple[Any, str, Any, str, bool], None], Tuple[int, Any, str, None, None]]
    timestamp: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, row = ..., columns = ..., timestamp = ..., deleteType = ..., attributes = ..., durability = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TDeleteType:
    DELETE_COLUMN: int
    DELETE_COLUMNS: int
    DELETE_FAMILY: int
    DELETE_FAMILY_VERSION: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]
    __doc__: str

class TDurability:
    ASYNC_WAL: int
    FSYNC_WAL: int
    SKIP_WAL: int
    SYNC_WAL: int
    USE_DEFAULT: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]
    __doc__: str

class TFilterByOperator:
    AND: int
    OR: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]

class TGet:
    __doc__: str
    attributes: Any
    authorizations: Any
    cacheBlocks: Any
    columns: Any
    consistency: Any
    existence_only: Any
    filterBytes: Any
    filterString: Any
    maxVersions: Any
    row: Any
    storeLimit: Any
    storeOffset: Any
    targetReplicaId: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[TColumn]]], bool], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[TTimeRange]]], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, str, Any, str, bool], None], Tuple[int, Any, str, List[Optional[Type[TAuthorization]]], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, str, None]]
    timeRange: Any
    timestamp: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, row = ..., columns = ..., timestamp = ..., timeRange = ..., maxVersions = ..., filterString = ..., attributes = ..., authorizations = ..., consistency = ..., targetReplicaId = ..., cacheBlocks = ..., storeLimit = ..., storeOffset = ..., existence_only = ..., filterBytes = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class THRegionInfo:
    __doc__: str
    endKey: Any
    offline: Any
    regionId: Any
    replicaId: Any
    split: Any
    startKey: Any
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, None, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, regionId = ..., tableName = ..., startKey = ..., endKey = ..., offline = ..., split = ..., replicaId = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class THRegionLocation:
    __doc__: str
    regionInfo: Any
    serverName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[TServerName]]], None], Tuple[int, Any, str, List[Optional[Type[THRegionInfo]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, serverName = ..., regionInfo = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TIOError(Any):
    __doc__: str
    message: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> Any: ...
    def __init__(self, message = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TIllegalArgument(Any):
    __doc__: str
    message: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> Any: ...
    def __init__(self, message = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TIncrement:
    __doc__: str
    attributes: Any
    cellVisibility: Any
    columns: Any
    durability: Any
    returnResults: Any
    row: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[TColumnIncrement]]], bool], None], None, Tuple[int, Any, str, Tuple[Any, str, Any, str, bool], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[TCellVisibility]]], None], Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, row = ..., columns = ..., attributes = ..., durability = ..., cellVisibility = ..., returnResults = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TKeepDeletedCells:
    FALSE: int
    TRUE: int
    TTL: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]
    __doc__: str

class TLogQueryFilter:
    __doc__: str
    clientAddress: Any
    filterByOperator: Any
    limit: Any
    logType: Any
    regionName: Any
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, int], Tuple[int, Any, str, None, int], Tuple[int, Any, str, None, int]]
    userName: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, regionName = ..., clientAddress = ..., tableName = ..., userName = ..., limit = ..., logType = ..., filterByOperator = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TLogType:
    LARGE_LOG: int
    SLOW_LOG: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]

class TMutation:
    __doc__: str
    deleteSingle: Any
    put: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[TPut]]], None], Tuple[int, Any, str, List[Optional[Type[TDelete]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, put = ..., deleteSingle = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TNamespaceDescriptor:
    __doc__: str
    configuration: Any
    name: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, str, Any, str, bool], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, name = ..., configuration = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TOnlineLogRecord:
    __doc__: str
    callDetails: Any
    clientAddress: Any
    methodName: Any
    multiGetsCount: Any
    multiMutationsCount: Any
    multiServiceCalls: Any
    param: Any
    processingTime: Any
    queueTime: Any
    regionName: Any
    responseSize: Any
    serverClass: Any
    startTime: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, str, None]]
    userName: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, startTime = ..., processingTime = ..., queueTime = ..., responseSize = ..., clientAddress = ..., serverClass = ..., methodName = ..., callDetails = ..., param = ..., userName = ..., multiGetsCount = ..., multiMutationsCount = ..., multiServiceCalls = ..., regionName = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TPut:
    __doc__: str
    attributes: Any
    cellVisibility: Any
    columnValues: Any
    durability: Any
    row: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[TColumnValue]]], bool], None], Tuple[int, Any, str, None, None], None, Tuple[int, Any, str, Tuple[Any, str, Any, str, bool], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[TCellVisibility]]], None]]
    timestamp: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, row = ..., columnValues = ..., timestamp = ..., attributes = ..., durability = ..., cellVisibility = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TReadType:
    DEFAULT: int
    PREAD: int
    STREAM: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]

class TResult:
    __doc__: str
    columnValues: Any
    partial: Any
    row: Any
    stale: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[TColumnValue]]], bool], None], Tuple[int, Any, str, None, bool], Tuple[int, Any, str, None, bool]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, row = ..., columnValues = ..., stale = ..., partial = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TRowMutations:
    __doc__: str
    mutations: Any
    row: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[TMutation]]], bool], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, row = ..., mutations = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TScan:
    __doc__: str
    attributes: Any
    authorizations: Any
    batchSize: Any
    cacheBlocks: Any
    caching: Any
    colFamTimeRangeMap: Any
    columns: Any
    consistency: Any
    filterBytes: Any
    filterString: Any
    limit: Any
    maxVersions: Any
    readType: Any
    reversed: Any
    startRow: Any
    stopRow: Any
    targetReplicaId: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[TColumn]]], bool], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, int], Tuple[int, Any, str, List[Optional[Type[TTimeRange]]], None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, Tuple[Any, str, Any, str, bool], None], Tuple[int, Any, str, List[Optional[Type[TAuthorization]]], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, Tuple[Any, str, Any, List[Optional[Type[TTimeRange]]], bool], None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, str, None]]
    timeRange: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, startRow = ..., stopRow = ..., columns = ..., caching = ..., maxVersions = ..., timeRange = ..., filterString = ..., batchSize = ..., attributes = ..., authorizations = ..., reversed = ..., cacheBlocks = ..., colFamTimeRangeMap = ..., readType = ..., limit = ..., consistency = ..., targetReplicaId = ..., filterBytes = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TServerName:
    __doc__: str
    hostName: Any
    port: Any
    startCode: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, hostName = ..., port = ..., startCode = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TTableDescriptor:
    __doc__: str
    attributes: Any
    columns: Any
    durability: Any
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[TTableName]]], None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[TColumnFamilyDescriptor]]], bool], None], Tuple[int, Any, str, Tuple[Any, str, Any, str, bool], None], Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ..., columns = ..., attributes = ..., durability = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TTableName:
    __doc__: str
    ns: Any
    qualifier: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, ns = ..., qualifier = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class TThriftServerType:
    ONE: int
    TWO: int
    _NAMES_TO_VALUES: Dict[str, int]
    _VALUES_TO_NAMES: Dict[int, str]
    __doc__: str

class TTimeRange:
    __doc__: str
    maxStamp: Any
    minStamp: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, minStamp = ..., maxStamp = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...
