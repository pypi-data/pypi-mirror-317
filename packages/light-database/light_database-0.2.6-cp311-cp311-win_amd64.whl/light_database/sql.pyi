# (generated with --quick)
from dataclasses import dataclass
from typing import Any, Callable, Dict, List, Never, Optional, Union

from pandas import DataFrame

@dataclass
class T:
    table: str = ""
    def __str__(self) -> str: ...

class Q:
    _operator_mapping: Dict[str, str]
    sql: str
    sql_items: List[str]
    values: List[Any]
    def __init__(self, table: T = T(), /, _sql: Optional[str] = None, _sql_items: Optional[List[str]] = None, _values: Optional[List[Any]] = None, _operator: str = "AND", **kwargs: Any) -> None: ...
    def _condition(self, table: T, key: str, value: Any) -> str: ...
    def _join(self, operator: str, other: Q) -> Q: ...
    def __and__(self, other: Q) -> Q: ...
    def __or__(self, other: Q) -> Q: ...
    def __invert__(self) -> Q: ...
    def __bool__(self) -> bool: ...
    def __str__(self) -> str: ...

class DataFrameModel(SQLModel):
    @property
    def df(self) -> DataFrameModel: ...
    def __getitem__(self, key: Union[slice, int]) -> DataFrame: ...
    def __call__(self) -> DataFrame: ...

class DeleteSqlModel(ExecuteWhereSqlModel): ...

class ExecuteWhereSqlModel(RunModel):
    def where(self, q: Q = Q(), /, **kwargs: Any) -> None: ...

class FilterSqlModel(SelectSqlModel, WhereSqlModel): ...

class OrderBySqlModel(DataFrameModel):
    def order_by(self, *columns: str) -> DataFrameModel: ...

class GroupBySqlModel(OrderBySqlModel):
    def group_by(self, *columns: str) -> OrderBySqlModel: ...

class InsertSqlModel(SQLModel):
    def _columns_v_position(self, **kwargs) -> Dict[str, str]: ...
    def _bulk_columns_v_position(self, *args: Dict[str, Any]) -> Dict[str, str]: ...
    @staticmethod
    def _parentheses(data: List[str]) -> str: ...
    @staticmethod
    def _repeats(string: str, repeat: int = 0, sep: str = '') -> str: ...
    def create(self, **kwargs: Any) -> None: ...
    def bulk_create(self, *args: Dict[str, Any]) -> None: ...

class RunModel(SQLModel):
    def run(self) -> None: ...

class SQLModel:
    _func_chain: Dict[str, List[str]]
    _executor: Callable
    _sql: str
    _values: List[Any]
    @property
    def _kwargs(self) -> Dict[str, Union[str, List[Any], Callable, Dict[str, List[str]]]]: ...
    def __getattr__(self, item: str) -> Never: ...
    def __init__(self, sql: str, executor: Callable, values: Optional[list] = ..., func_chain: Optional[Dict[str, List[str]]] = ...) -> None: ...
    def __str__(self) -> str: ...
    @staticmethod
    def _execute(func: Callable) -> Callable: ...
    @staticmethod
    def _record(func: Callable) -> Callable: ...

class SelectSqlModel(GroupBySqlModel):
    def where(self, q: Q = Q(), /, **kwargs: Any) -> Union[GroupBySqlModel, WhereSqlModel]: ...

class UpdateSqlModel(SQLModel):
    def set(self, **kwargs) -> ExecuteWhereSqlModel: ...

class WhereSqlModel(GroupBySqlModel):
    def select(self, *columns: str) -> Union[GroupBySqlModel, SelectSqlModel]: ...
