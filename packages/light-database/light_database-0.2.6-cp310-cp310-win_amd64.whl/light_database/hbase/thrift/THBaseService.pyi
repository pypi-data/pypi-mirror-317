# (generated with --quick)

import light_database.hbase.thrift.ttypes
import logging
import sys
from thrift.transport import TTransport
from typing import Any, Callable, Dict, List, Never, Optional, Tuple, Type

TAppend: Type[light_database.hbase.thrift.ttypes.TAppend]
TApplicationException: Any
TAuthorization: Type[light_database.hbase.thrift.ttypes.TAuthorization]
TBloomFilterType: Type[light_database.hbase.thrift.ttypes.TBloomFilterType]
TCellVisibility: Type[light_database.hbase.thrift.ttypes.TCellVisibility]
TColumn: Type[light_database.hbase.thrift.ttypes.TColumn]
TColumnFamilyDescriptor: Type[light_database.hbase.thrift.ttypes.TColumnFamilyDescriptor]
TColumnIncrement: Type[light_database.hbase.thrift.ttypes.TColumnIncrement]
TColumnValue: Type[light_database.hbase.thrift.ttypes.TColumnValue]
TCompareOperator: Type[light_database.hbase.thrift.ttypes.TCompareOperator]
TCompressionAlgorithm: Type[light_database.hbase.thrift.ttypes.TCompressionAlgorithm]
TConsistency: Type[light_database.hbase.thrift.ttypes.TConsistency]
TDataBlockEncoding: Type[light_database.hbase.thrift.ttypes.TDataBlockEncoding]
TDelete: Type[light_database.hbase.thrift.ttypes.TDelete]
TDeleteType: Type[light_database.hbase.thrift.ttypes.TDeleteType]
TDurability: Type[light_database.hbase.thrift.ttypes.TDurability]
TException: Any
TFilterByOperator: Type[light_database.hbase.thrift.ttypes.TFilterByOperator]
TFrozenDict: Any
TGet: Type[light_database.hbase.thrift.ttypes.TGet]
THRegionInfo: Type[light_database.hbase.thrift.ttypes.THRegionInfo]
THRegionLocation: Type[light_database.hbase.thrift.ttypes.THRegionLocation]
TIOError: Type[light_database.hbase.thrift.ttypes.TIOError]
TIllegalArgument: Type[light_database.hbase.thrift.ttypes.TIllegalArgument]
TIncrement: Type[light_database.hbase.thrift.ttypes.TIncrement]
TKeepDeletedCells: Type[light_database.hbase.thrift.ttypes.TKeepDeletedCells]
TLogQueryFilter: Type[light_database.hbase.thrift.ttypes.TLogQueryFilter]
TLogType: Type[light_database.hbase.thrift.ttypes.TLogType]
TMessageType: Any
TMutation: Type[light_database.hbase.thrift.ttypes.TMutation]
TNamespaceDescriptor: Type[light_database.hbase.thrift.ttypes.TNamespaceDescriptor]
TOnlineLogRecord: Type[light_database.hbase.thrift.ttypes.TOnlineLogRecord]
TProcessor: Any
TProtocolException: Any
TPut: Type[light_database.hbase.thrift.ttypes.TPut]
TReadType: Type[light_database.hbase.thrift.ttypes.TReadType]
TResult: Type[light_database.hbase.thrift.ttypes.TResult]
TRowMutations: Type[light_database.hbase.thrift.ttypes.TRowMutations]
TScan: Type[light_database.hbase.thrift.ttypes.TScan]
TServerName: Type[light_database.hbase.thrift.ttypes.TServerName]
TTableDescriptor: Type[light_database.hbase.thrift.ttypes.TTableDescriptor]
TTableName: Type[light_database.hbase.thrift.ttypes.TTableName]
TThriftServerType: Type[light_database.hbase.thrift.ttypes.TThriftServerType]
TTimeRange: Type[light_database.hbase.thrift.ttypes.TTimeRange]
TType: Any
all_structs: Any
fix_spec: Any

class Client(Iface):
    _iprot: Any
    _oprot: Any
    _seqid: int
    def __init__(self, iprot, oprot = ...) -> None: ...
    def addColumnFamily(self, tableName, column) -> None: ...
    def append(self, table, tappend) -> Never: ...
    def checkAndDelete(self, table, row, family, qualifier, value, tdelete) -> Never: ...
    def checkAndMutate(self, table, row, family, qualifier, compareOperator, value, rowMutations) -> Never: ...
    def checkAndPut(self, table, row, family, qualifier, value, tput) -> Never: ...
    def clearSlowLogResponses(self, serverNames) -> Never: ...
    def closeScanner(self, scannerId) -> None: ...
    def createNamespace(self, namespaceDesc) -> None: ...
    def createTable(self, desc, splitKeys) -> None: ...
    def deleteColumnFamily(self, tableName, column) -> None: ...
    def deleteMultiple(self, table, tdeletes) -> Never: ...
    def deleteNamespace(self, name) -> None: ...
    def deleteSingle(self, table, tdelete) -> None: ...
    def deleteTable(self, tableName) -> None: ...
    def disableTable(self, tableName) -> None: ...
    def enableTable(self, tableName) -> None: ...
    def exists(self, table, tget) -> Never: ...
    def existsAll(self, table, tgets) -> Never: ...
    def get(self, table, tget) -> Never: ...
    def getAllRegionLocations(self, table) -> Never: ...
    def getClusterId(self) -> Never: ...
    def getMultiple(self, table, tgets) -> Never: ...
    def getNamespaceDescriptor(self, name) -> Never: ...
    def getRegionLocation(self, table, row, reload) -> Never: ...
    def getScannerResults(self, table, tscan, numRows) -> Never: ...
    def getScannerRows(self, scannerId, numRows) -> Never: ...
    def getSlowLogResponses(self, serverNames, logQueryFilter) -> Never: ...
    def getTableDescriptor(self, table) -> Never: ...
    def getTableDescriptors(self, tables) -> Never: ...
    def getTableDescriptorsByNamespace(self, name) -> Never: ...
    def getTableDescriptorsByPattern(self, regex, includeSysTables) -> Never: ...
    def getTableNamesByNamespace(self, name) -> Never: ...
    def getTableNamesByPattern(self, regex, includeSysTables) -> Never: ...
    def getThriftServerType(self) -> Never: ...
    def increment(self, table, tincrement) -> Never: ...
    def isTableAvailable(self, tableName) -> Never: ...
    def isTableAvailableWithSplit(self, tableName, splitKeys) -> Never: ...
    def isTableDisabled(self, tableName) -> Never: ...
    def isTableEnabled(self, tableName) -> Never: ...
    def listNamespaceDescriptors(self) -> Never: ...
    def listNamespaces(self) -> Never: ...
    def modifyColumnFamily(self, tableName, column) -> None: ...
    def modifyNamespace(self, namespaceDesc) -> None: ...
    def modifyTable(self, desc) -> None: ...
    def mutateRow(self, table, trowMutations) -> None: ...
    def openScanner(self, table, tscan) -> Never: ...
    def put(self, table, tput) -> None: ...
    def putMultiple(self, table, tputs) -> None: ...
    def recv_addColumnFamily(self) -> None: ...
    def recv_append(self) -> light_database.hbase.thrift.ttypes.TResult: ...
    def recv_checkAndDelete(self) -> Any: ...
    def recv_checkAndMutate(self) -> Any: ...
    def recv_checkAndPut(self) -> Any: ...
    def recv_clearSlowLogResponses(self) -> list: ...
    def recv_closeScanner(self) -> None: ...
    def recv_createNamespace(self) -> None: ...
    def recv_createTable(self) -> None: ...
    def recv_deleteColumnFamily(self) -> None: ...
    def recv_deleteMultiple(self) -> List[light_database.hbase.thrift.ttypes.TDelete]: ...
    def recv_deleteNamespace(self) -> None: ...
    def recv_deleteSingle(self) -> None: ...
    def recv_deleteTable(self) -> None: ...
    def recv_disableTable(self) -> None: ...
    def recv_enableTable(self) -> None: ...
    def recv_exists(self) -> Any: ...
    def recv_existsAll(self) -> list: ...
    def recv_get(self) -> light_database.hbase.thrift.ttypes.TResult: ...
    def recv_getAllRegionLocations(self) -> List[light_database.hbase.thrift.ttypes.THRegionLocation]: ...
    def recv_getClusterId(self) -> Any: ...
    def recv_getMultiple(self) -> List[light_database.hbase.thrift.ttypes.TResult]: ...
    def recv_getNamespaceDescriptor(self) -> light_database.hbase.thrift.ttypes.TNamespaceDescriptor: ...
    def recv_getRegionLocation(self) -> light_database.hbase.thrift.ttypes.THRegionLocation: ...
    def recv_getScannerResults(self) -> List[light_database.hbase.thrift.ttypes.TResult]: ...
    def recv_getScannerRows(self) -> List[light_database.hbase.thrift.ttypes.TResult]: ...
    def recv_getSlowLogResponses(self) -> List[light_database.hbase.thrift.ttypes.TOnlineLogRecord]: ...
    def recv_getTableDescriptor(self) -> light_database.hbase.thrift.ttypes.TTableDescriptor: ...
    def recv_getTableDescriptors(self) -> List[light_database.hbase.thrift.ttypes.TTableDescriptor]: ...
    def recv_getTableDescriptorsByNamespace(self) -> List[light_database.hbase.thrift.ttypes.TTableDescriptor]: ...
    def recv_getTableDescriptorsByPattern(self) -> List[light_database.hbase.thrift.ttypes.TTableDescriptor]: ...
    def recv_getTableNamesByNamespace(self) -> List[light_database.hbase.thrift.ttypes.TTableName]: ...
    def recv_getTableNamesByPattern(self) -> List[light_database.hbase.thrift.ttypes.TTableName]: ...
    def recv_getThriftServerType(self) -> Any: ...
    def recv_increment(self) -> light_database.hbase.thrift.ttypes.TResult: ...
    def recv_isTableAvailable(self) -> Any: ...
    def recv_isTableAvailableWithSplit(self) -> Any: ...
    def recv_isTableDisabled(self) -> Any: ...
    def recv_isTableEnabled(self) -> Any: ...
    def recv_listNamespaceDescriptors(self) -> List[light_database.hbase.thrift.ttypes.TNamespaceDescriptor]: ...
    def recv_listNamespaces(self) -> list: ...
    def recv_modifyColumnFamily(self) -> None: ...
    def recv_modifyNamespace(self) -> None: ...
    def recv_modifyTable(self) -> None: ...
    def recv_mutateRow(self) -> None: ...
    def recv_openScanner(self) -> Any: ...
    def recv_put(self) -> None: ...
    def recv_putMultiple(self) -> None: ...
    def recv_tableExists(self) -> Any: ...
    def recv_truncateTable(self) -> None: ...
    def send_addColumnFamily(self, tableName, column) -> None: ...
    def send_append(self, table, tappend) -> None: ...
    def send_checkAndDelete(self, table, row, family, qualifier, value, tdelete) -> None: ...
    def send_checkAndMutate(self, table, row, family, qualifier, compareOperator, value, rowMutations) -> None: ...
    def send_checkAndPut(self, table, row, family, qualifier, value, tput) -> None: ...
    def send_clearSlowLogResponses(self, serverNames) -> None: ...
    def send_closeScanner(self, scannerId) -> None: ...
    def send_createNamespace(self, namespaceDesc) -> None: ...
    def send_createTable(self, desc, splitKeys) -> None: ...
    def send_deleteColumnFamily(self, tableName, column) -> None: ...
    def send_deleteMultiple(self, table, tdeletes) -> None: ...
    def send_deleteNamespace(self, name) -> None: ...
    def send_deleteSingle(self, table, tdelete) -> None: ...
    def send_deleteTable(self, tableName) -> None: ...
    def send_disableTable(self, tableName) -> None: ...
    def send_enableTable(self, tableName) -> None: ...
    def send_exists(self, table, tget) -> None: ...
    def send_existsAll(self, table, tgets) -> None: ...
    def send_get(self, table, tget) -> None: ...
    def send_getAllRegionLocations(self, table) -> None: ...
    def send_getClusterId(self) -> None: ...
    def send_getMultiple(self, table, tgets) -> None: ...
    def send_getNamespaceDescriptor(self, name) -> None: ...
    def send_getRegionLocation(self, table, row, reload) -> None: ...
    def send_getScannerResults(self, table, tscan, numRows) -> None: ...
    def send_getScannerRows(self, scannerId, numRows) -> None: ...
    def send_getSlowLogResponses(self, serverNames, logQueryFilter) -> None: ...
    def send_getTableDescriptor(self, table) -> None: ...
    def send_getTableDescriptors(self, tables) -> None: ...
    def send_getTableDescriptorsByNamespace(self, name) -> None: ...
    def send_getTableDescriptorsByPattern(self, regex, includeSysTables) -> None: ...
    def send_getTableNamesByNamespace(self, name) -> None: ...
    def send_getTableNamesByPattern(self, regex, includeSysTables) -> None: ...
    def send_getThriftServerType(self) -> None: ...
    def send_increment(self, table, tincrement) -> None: ...
    def send_isTableAvailable(self, tableName) -> None: ...
    def send_isTableAvailableWithSplit(self, tableName, splitKeys) -> None: ...
    def send_isTableDisabled(self, tableName) -> None: ...
    def send_isTableEnabled(self, tableName) -> None: ...
    def send_listNamespaceDescriptors(self) -> None: ...
    def send_listNamespaces(self) -> None: ...
    def send_modifyColumnFamily(self, tableName, column) -> None: ...
    def send_modifyNamespace(self, namespaceDesc) -> None: ...
    def send_modifyTable(self, desc) -> None: ...
    def send_mutateRow(self, table, trowMutations) -> None: ...
    def send_openScanner(self, table, tscan) -> None: ...
    def send_put(self, table, tput) -> None: ...
    def send_putMultiple(self, table, tputs) -> None: ...
    def send_tableExists(self, tableName) -> None: ...
    def send_truncateTable(self, tableName, preserveSplits) -> None: ...
    def tableExists(self, tableName) -> Never: ...
    def truncateTable(self, tableName, preserveSplits) -> None: ...

class Iface:
    def addColumnFamily(self, tableName, column) -> None: ...
    def append(self, table, tappend) -> None: ...
    def checkAndDelete(self, table, row, family, qualifier, value, tdelete) -> None: ...
    def checkAndMutate(self, table, row, family, qualifier, compareOperator, value, rowMutations) -> None: ...
    def checkAndPut(self, table, row, family, qualifier, value, tput) -> None: ...
    def clearSlowLogResponses(self, serverNames) -> None: ...
    def closeScanner(self, scannerId) -> None: ...
    def createNamespace(self, namespaceDesc) -> None: ...
    def createTable(self, desc, splitKeys) -> None: ...
    def deleteColumnFamily(self, tableName, column) -> None: ...
    def deleteMultiple(self, table, tdeletes) -> None: ...
    def deleteNamespace(self, name) -> None: ...
    def deleteSingle(self, table, tdelete) -> None: ...
    def deleteTable(self, tableName) -> None: ...
    def disableTable(self, tableName) -> None: ...
    def enableTable(self, tableName) -> None: ...
    def exists(self, table, tget) -> None: ...
    def existsAll(self, table, tgets) -> None: ...
    def get(self, table, tget) -> None: ...
    def getAllRegionLocations(self, table) -> None: ...
    def getClusterId(self) -> None: ...
    def getMultiple(self, table, tgets) -> None: ...
    def getNamespaceDescriptor(self, name) -> None: ...
    def getRegionLocation(self, table, row, reload) -> None: ...
    def getScannerResults(self, table, tscan, numRows) -> None: ...
    def getScannerRows(self, scannerId, numRows) -> None: ...
    def getSlowLogResponses(self, serverNames, logQueryFilter) -> None: ...
    def getTableDescriptor(self, table) -> None: ...
    def getTableDescriptors(self, tables) -> None: ...
    def getTableDescriptorsByNamespace(self, name) -> None: ...
    def getTableDescriptorsByPattern(self, regex, includeSysTables) -> None: ...
    def getTableNamesByNamespace(self, name) -> None: ...
    def getTableNamesByPattern(self, regex, includeSysTables) -> None: ...
    def getThriftServerType(self) -> None: ...
    def increment(self, table, tincrement) -> None: ...
    def isTableAvailable(self, tableName) -> None: ...
    def isTableAvailableWithSplit(self, tableName, splitKeys) -> None: ...
    def isTableDisabled(self, tableName) -> None: ...
    def isTableEnabled(self, tableName) -> None: ...
    def listNamespaceDescriptors(self) -> None: ...
    def listNamespaces(self) -> None: ...
    def modifyColumnFamily(self, tableName, column) -> None: ...
    def modifyNamespace(self, namespaceDesc) -> None: ...
    def modifyTable(self, desc) -> None: ...
    def mutateRow(self, table, trowMutations) -> None: ...
    def openScanner(self, table, tscan) -> None: ...
    def put(self, table, tput) -> None: ...
    def putMultiple(self, table, tputs) -> None: ...
    def tableExists(self, tableName) -> None: ...
    def truncateTable(self, tableName, preserveSplits) -> None: ...

class Processor(Iface, Any):
    _handler: Any
    _on_message_begin: Any
    _processMap: Dict[str, Callable[[Any, Any, Any, Any], Any]]
    def __init__(self, handler) -> None: ...
    def on_message_begin(self, func) -> None: ...
    def process(self, iprot, oprot) -> Optional[bool]: ...
    def process_addColumnFamily(self, seqid, iprot, oprot) -> None: ...
    def process_append(self, seqid, iprot, oprot) -> None: ...
    def process_checkAndDelete(self, seqid, iprot, oprot) -> None: ...
    def process_checkAndMutate(self, seqid, iprot, oprot) -> None: ...
    def process_checkAndPut(self, seqid, iprot, oprot) -> None: ...
    def process_clearSlowLogResponses(self, seqid, iprot, oprot) -> None: ...
    def process_closeScanner(self, seqid, iprot, oprot) -> None: ...
    def process_createNamespace(self, seqid, iprot, oprot) -> None: ...
    def process_createTable(self, seqid, iprot, oprot) -> None: ...
    def process_deleteColumnFamily(self, seqid, iprot, oprot) -> None: ...
    def process_deleteMultiple(self, seqid, iprot, oprot) -> None: ...
    def process_deleteNamespace(self, seqid, iprot, oprot) -> None: ...
    def process_deleteSingle(self, seqid, iprot, oprot) -> None: ...
    def process_deleteTable(self, seqid, iprot, oprot) -> None: ...
    def process_disableTable(self, seqid, iprot, oprot) -> None: ...
    def process_enableTable(self, seqid, iprot, oprot) -> None: ...
    def process_exists(self, seqid, iprot, oprot) -> None: ...
    def process_existsAll(self, seqid, iprot, oprot) -> None: ...
    def process_get(self, seqid, iprot, oprot) -> None: ...
    def process_getAllRegionLocations(self, seqid, iprot, oprot) -> None: ...
    def process_getClusterId(self, seqid, iprot, oprot) -> None: ...
    def process_getMultiple(self, seqid, iprot, oprot) -> None: ...
    def process_getNamespaceDescriptor(self, seqid, iprot, oprot) -> None: ...
    def process_getRegionLocation(self, seqid, iprot, oprot) -> None: ...
    def process_getScannerResults(self, seqid, iprot, oprot) -> None: ...
    def process_getScannerRows(self, seqid, iprot, oprot) -> None: ...
    def process_getSlowLogResponses(self, seqid, iprot, oprot) -> None: ...
    def process_getTableDescriptor(self, seqid, iprot, oprot) -> None: ...
    def process_getTableDescriptors(self, seqid, iprot, oprot) -> None: ...
    def process_getTableDescriptorsByNamespace(self, seqid, iprot, oprot) -> None: ...
    def process_getTableDescriptorsByPattern(self, seqid, iprot, oprot) -> None: ...
    def process_getTableNamesByNamespace(self, seqid, iprot, oprot) -> None: ...
    def process_getTableNamesByPattern(self, seqid, iprot, oprot) -> None: ...
    def process_getThriftServerType(self, seqid, iprot, oprot) -> None: ...
    def process_increment(self, seqid, iprot, oprot) -> None: ...
    def process_isTableAvailable(self, seqid, iprot, oprot) -> None: ...
    def process_isTableAvailableWithSplit(self, seqid, iprot, oprot) -> None: ...
    def process_isTableDisabled(self, seqid, iprot, oprot) -> None: ...
    def process_isTableEnabled(self, seqid, iprot, oprot) -> None: ...
    def process_listNamespaceDescriptors(self, seqid, iprot, oprot) -> None: ...
    def process_listNamespaces(self, seqid, iprot, oprot) -> None: ...
    def process_modifyColumnFamily(self, seqid, iprot, oprot) -> None: ...
    def process_modifyNamespace(self, seqid, iprot, oprot) -> None: ...
    def process_modifyTable(self, seqid, iprot, oprot) -> None: ...
    def process_mutateRow(self, seqid, iprot, oprot) -> None: ...
    def process_openScanner(self, seqid, iprot, oprot) -> None: ...
    def process_put(self, seqid, iprot, oprot) -> None: ...
    def process_putMultiple(self, seqid, iprot, oprot) -> None: ...
    def process_tableExists(self, seqid, iprot, oprot) -> None: ...
    def process_truncateTable(self, seqid, iprot, oprot) -> None: ...

class addColumnFamily_args:
    __doc__: str
    column: Any
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TColumnFamilyDescriptor]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ..., column = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class addColumnFamily_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class append_args:
    __doc__: str
    table: Any
    tappend: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TAppend]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tappend = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class append_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TResult]]], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class checkAndDelete_args:
    __doc__: str
    family: Any
    qualifier: Any
    row: Any
    table: Any
    tdelete: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TDelete]]], None]]
    value: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., row = ..., family = ..., qualifier = ..., value = ..., tdelete = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class checkAndDelete_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class checkAndMutate_args:
    __doc__: str
    compareOperator: Any
    family: Any
    qualifier: Any
    row: Any
    rowMutations: Any
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TRowMutations]]], None]]
    value: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., row = ..., family = ..., qualifier = ..., compareOperator = ..., value = ..., rowMutations = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class checkAndMutate_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class checkAndPut_args:
    __doc__: str
    family: Any
    qualifier: Any
    row: Any
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TPut]]], None]]
    tput: Any
    value: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., row = ..., family = ..., qualifier = ..., value = ..., tput = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class checkAndPut_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class clearSlowLogResponses_args:
    __doc__: str
    serverNames: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TServerName]]], bool], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, serverNames = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class clearSlowLogResponses_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, None, bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class closeScanner_args:
    __doc__: str
    scannerId: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, scannerId = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class closeScanner_result:
    __doc__: str
    ia: Any
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIllegalArgument]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ..., ia = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class createNamespace_args:
    __doc__: str
    namespaceDesc: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TNamespaceDescriptor]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, namespaceDesc = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class createNamespace_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class createTable_args:
    __doc__: str
    desc: Any
    splitKeys: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableDescriptor]]], None], Tuple[int, Any, str, Tuple[Any, str, bool], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, desc = ..., splitKeys = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class createTable_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class deleteColumnFamily_args:
    __doc__: str
    column: Any
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None], Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ..., column = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class deleteColumnFamily_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class deleteMultiple_args:
    __doc__: str
    table: Any
    tdeletes: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TDelete]]], bool], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tdeletes = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class deleteMultiple_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TDelete]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class deleteNamespace_args:
    __doc__: str
    name: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, name = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class deleteNamespace_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class deleteSingle_args:
    __doc__: str
    table: Any
    tdelete: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TDelete]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tdelete = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class deleteSingle_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class deleteTable_args:
    __doc__: str
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class deleteTable_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class disableTable_args:
    __doc__: str
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class disableTable_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class enableTable_args:
    __doc__: str
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class enableTable_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class existsAll_args:
    __doc__: str
    table: Any
    tgets: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TGet]]], bool], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tgets = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class existsAll_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, None, bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class exists_args:
    __doc__: str
    table: Any
    tget: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TGet]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tget = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class exists_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getAllRegionLocations_args:
    __doc__: str
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getAllRegionLocations_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.THRegionLocation]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getClusterId_args:
    thrift_spec: Tuple[()]
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getClusterId_result:
    __doc__: str
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getMultiple_args:
    __doc__: str
    table: Any
    tgets: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TGet]]], bool], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tgets = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getMultiple_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TResult]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getNamespaceDescriptor_args:
    __doc__: str
    name: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, name = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getNamespaceDescriptor_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TNamespaceDescriptor]]], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getRegionLocation_args:
    __doc__: str
    reload: Any
    row: Any
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., row = ..., reload = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getRegionLocation_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.THRegionLocation]]], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getScannerResults_args:
    __doc__: str
    numRows: Any
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TScan]]], None], Tuple[int, Any, str, None, int]]
    tscan: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tscan = ..., numRows = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getScannerResults_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TResult]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getScannerRows_args:
    __doc__: str
    numRows: Any
    scannerId: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, None, None], Tuple[int, Any, str, None, int]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, scannerId = ..., numRows = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getScannerRows_result:
    __doc__: str
    ia: Any
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TResult]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIllegalArgument]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ..., ia = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getSlowLogResponses_args:
    __doc__: str
    logQueryFilter: Any
    serverNames: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TServerName]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TLogQueryFilter]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, serverNames = ..., logQueryFilter = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getSlowLogResponses_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TOnlineLogRecord]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableDescriptor_args:
    __doc__: str
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableDescriptor_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableDescriptor]]], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableDescriptorsByNamespace_args:
    __doc__: str
    name: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, name = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableDescriptorsByNamespace_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableDescriptor]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableDescriptorsByPattern_args:
    __doc__: str
    includeSysTables: Any
    regex: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, regex = ..., includeSysTables = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableDescriptorsByPattern_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableDescriptor]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableDescriptors_args:
    __doc__: str
    tables: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], bool], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tables = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableDescriptors_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableDescriptor]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableNamesByNamespace_args:
    __doc__: str
    name: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, name = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableNamesByNamespace_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableNamesByPattern_args:
    __doc__: str
    includeSysTables: Any
    regex: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, regex = ..., includeSysTables = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getTableNamesByPattern_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getThriftServerType_args:
    thrift_spec: Tuple[()]
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class getThriftServerType_result:
    __doc__: str
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class get_args:
    __doc__: str
    table: Any
    tget: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TGet]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tget = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class get_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TResult]]], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class increment_args:
    __doc__: str
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIncrement]]], None]]
    tincrement: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tincrement = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class increment_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TResult]]], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class isTableAvailableWithSplit_args:
    __doc__: str
    splitKeys: Any
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None], Tuple[int, Any, str, Tuple[Any, str, bool], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ..., splitKeys = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class isTableAvailableWithSplit_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class isTableAvailable_args:
    __doc__: str
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class isTableAvailable_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class isTableDisabled_args:
    __doc__: str
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class isTableDisabled_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class isTableEnabled_args:
    __doc__: str
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class isTableEnabled_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class listNamespaceDescriptors_args:
    thrift_spec: Tuple[()]
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class listNamespaceDescriptors_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TNamespaceDescriptor]]], bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class listNamespaces_args:
    thrift_spec: Tuple[()]
    def __eq__(self, other) -> bool: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class listNamespaces_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, Tuple[Any, str, bool], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class modifyColumnFamily_args:
    __doc__: str
    column: Any
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TColumnFamilyDescriptor]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ..., column = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class modifyColumnFamily_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class modifyNamespace_args:
    __doc__: str
    namespaceDesc: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TNamespaceDescriptor]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, namespaceDesc = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class modifyNamespace_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class modifyTable_args:
    __doc__: str
    desc: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableDescriptor]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, desc = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class modifyTable_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class mutateRow_args:
    __doc__: str
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TRowMutations]]], None]]
    trowMutations: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., trowMutations = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class mutateRow_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class openScanner_args:
    __doc__: str
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TScan]]], None]]
    tscan: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tscan = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class openScanner_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class putMultiple_args:
    __doc__: str
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, Tuple[Any, List[Optional[Type[light_database.hbase.thrift.ttypes.TPut]]], bool], None]]
    tputs: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tputs = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class putMultiple_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class put_args:
    __doc__: str
    table: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, str, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TPut]]], None]]
    tput: Any
    def __eq__(self, other) -> bool: ...
    def __init__(self, table = ..., tput = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class put_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class tableExists_args:
    __doc__: str
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class tableExists_result:
    __doc__: str
    io: Any
    success: Any
    thrift_spec: Tuple[Tuple[int, Any, str, None, None], Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, success = ..., io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class truncateTable_args:
    __doc__: str
    preserveSplits: Any
    tableName: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TTableName]]], None], Tuple[int, Any, str, None, None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, tableName = ..., preserveSplits = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...

class truncateTable_result:
    __doc__: str
    io: Any
    thrift_spec: Tuple[None, Tuple[int, Any, str, List[Optional[Type[light_database.hbase.thrift.ttypes.TIOError]]], None]]
    def __eq__(self, other) -> bool: ...
    def __init__(self, io = ...) -> None: ...
    def __ne__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def read(self, iprot) -> None: ...
    def validate(self) -> None: ...
    def write(self, oprot) -> None: ...
