# (generated with --quick)

import datetime
import light_database.base
import light_database.hbase.thrift
from pandas import DataFrame
from typing import Dict, List, Optional, Union, Tuple, Any


class HBaseDB(light_database.base.BaseDB):
    _section: Tuple[str]
    @staticmethod
    def _column2fq(column: str) -> Dict[str, bytes]: ...
    @classmethod
    def _columns4get(cls, columns: List[str]) -> List[light_database.hbase.thrift.ttypes.TColumn]: ...
    @staticmethod
    def _fq2column(family: bytes, qualifier: bytes) -> str: ...
    @classmethod
    def _reset(cls, section: str) -> Optional[Exception]: ...
    @classmethod
    def _result2df(cls, result: light_database.hbase.thrift.ttypes.TResult) -> DataFrame: ...
    @classmethod
    def _results2df(cls, results: List[light_database.hbase.thrift.ttypes.TResult], columns: Optional[List[str]] = None) -> DataFrame: ...
    @classmethod
    def _bytes_value(cls, value: Union[str, int, float, bytes]) -> bytes: ...
    @classmethod
    def client(cls) -> light_database.hbase.thrift.THBaseService.Client: ...
    @classmethod
    def create(cls, table: str, data: DataFrame, **put_kwargs: Any) -> None: ...
    @classmethod
    def delete(cls, table: str, rows: Union[str, List[str]], columns: List[str], **delete_kwargs: Any) -> None: ...
    @classmethod
    def select(cls, table: str, rows: Union[str, List[str]], columns: List[str], **get_kwargs: Any) -> DataFrame: ...
    @classmethod
    def select_range(cls, table: str, columns: Optional[List[str]] = None, row_start: Optional[str] = None, row_stop: Optional[str] = None, batch_size: int = 100, num_rows: Optional[int] = None, **scan_kwargs: Any) -> DataFrame: ...
    @classmethod
    def show(cls, table: str, row: str, columns: List[str], **get_kwargs: Any) -> None: ...
    @classmethod
    def transport_close(cls) -> None: ...
