# Generated from sdoc/antlr/sdoc2Lexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,19,194,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
        2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,
        2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,
        7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,4,0,50,8,0,11,0,12,0,51,1,
        0,1,0,3,0,56,8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
        1,4,1,4,1,4,5,4,89,8,4,10,4,12,4,92,9,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,7,4,7,105,8,7,11,7,12,7,106,1,7,1,7,1,8,1,8,5,
        8,113,8,8,10,8,12,8,116,9,8,1,8,1,8,1,8,1,9,1,9,1,9,4,9,124,8,9,
        11,9,12,9,125,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,13,1,13,1,14,1,14,5,14,144,8,14,10,14,12,14,147,9,14,
        1,15,1,15,3,15,151,8,15,1,16,1,16,5,16,155,8,16,10,16,12,16,158,
        9,16,1,16,1,16,1,16,5,16,163,8,16,10,16,12,16,166,9,16,1,16,3,16,
        169,8,16,1,17,4,17,172,8,17,11,17,12,17,173,1,18,4,18,177,8,18,11,
        18,12,18,178,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,4,
        20,191,8,20,11,20,12,20,192,0,0,21,6,1,8,2,10,3,12,4,14,5,16,6,18,
        7,20,8,22,9,24,10,26,11,28,12,30,13,32,14,34,15,36,16,38,0,40,0,
        42,17,44,18,46,19,6,0,1,2,3,4,5,10,1,0,92,92,2,0,95,95,97,122,3,
        0,48,57,95,95,97,122,3,0,9,10,13,13,32,32,2,0,123,123,125,125,2,
        0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,34,34,1,0,39,39,
        1,0,48,57,202,0,6,1,0,0,0,0,8,1,0,0,0,0,10,1,0,0,0,0,12,1,0,0,0,
        0,14,1,0,0,0,1,16,1,0,0,0,1,18,1,0,0,0,1,20,1,0,0,0,2,22,1,0,0,0,
        2,24,1,0,0,0,3,26,1,0,0,0,3,28,1,0,0,0,4,30,1,0,0,0,4,32,1,0,0,0,
        4,34,1,0,0,0,4,36,1,0,0,0,4,42,1,0,0,0,5,44,1,0,0,0,5,46,1,0,0,0,
        6,55,1,0,0,0,8,57,1,0,0,0,10,66,1,0,0,0,12,73,1,0,0,0,14,85,1,0,
        0,0,16,95,1,0,0,0,18,99,1,0,0,0,20,104,1,0,0,0,22,110,1,0,0,0,24,
        123,1,0,0,0,26,127,1,0,0,0,28,131,1,0,0,0,30,135,1,0,0,0,32,139,
        1,0,0,0,34,141,1,0,0,0,36,150,1,0,0,0,38,168,1,0,0,0,40,171,1,0,
        0,0,42,176,1,0,0,0,44,182,1,0,0,0,46,190,1,0,0,0,48,50,8,0,0,0,49,
        48,1,0,0,0,50,51,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,56,1,0,0,
        0,53,54,5,92,0,0,54,56,5,92,0,0,55,49,1,0,0,0,55,53,1,0,0,0,56,7,
        1,0,0,0,57,58,5,92,0,0,58,59,5,98,0,0,59,60,5,101,0,0,60,61,5,103,
        0,0,61,62,5,105,0,0,62,63,5,110,0,0,63,64,1,0,0,0,64,65,6,1,0,0,
        65,9,1,0,0,0,66,67,5,92,0,0,67,68,5,101,0,0,68,69,5,110,0,0,69,70,
        5,100,0,0,70,71,1,0,0,0,71,72,6,2,0,0,72,11,1,0,0,0,73,74,5,92,0,
        0,74,75,5,112,0,0,75,76,5,111,0,0,76,77,5,115,0,0,77,78,5,105,0,
        0,78,79,5,116,0,0,79,80,5,105,0,0,80,81,5,111,0,0,81,82,5,110,0,
        0,82,83,1,0,0,0,83,84,6,3,1,0,84,13,1,0,0,0,85,86,5,92,0,0,86,90,
        7,1,0,0,87,89,7,2,0,0,88,87,1,0,0,0,89,92,1,0,0,0,90,88,1,0,0,0,
        90,91,1,0,0,0,91,93,1,0,0,0,92,90,1,0,0,0,93,94,6,4,1,0,94,15,1,
        0,0,0,95,96,5,91,0,0,96,97,1,0,0,0,97,98,6,5,2,0,98,17,1,0,0,0,99,
        100,5,123,0,0,100,101,1,0,0,0,101,102,6,6,3,0,102,19,1,0,0,0,103,
        105,7,3,0,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,
        107,1,0,0,0,107,108,1,0,0,0,108,109,6,7,4,0,109,21,1,0,0,0,110,114,
        5,125,0,0,111,113,7,3,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,
        1,0,0,0,114,115,1,0,0,0,115,117,1,0,0,0,116,114,1,0,0,0,117,118,
        6,8,5,0,118,119,6,8,5,0,119,23,1,0,0,0,120,124,8,4,0,0,121,122,5,
        92,0,0,122,124,9,0,0,0,123,120,1,0,0,0,123,121,1,0,0,0,124,125,1,
        0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,25,1,0,0,0,127,128,5,91,
        0,0,128,129,1,0,0,0,129,130,6,10,2,0,130,27,1,0,0,0,131,132,5,123,
        0,0,132,133,1,0,0,0,133,134,6,11,6,0,134,29,1,0,0,0,135,136,5,93,
        0,0,136,137,1,0,0,0,137,138,6,12,5,0,138,31,1,0,0,0,139,140,5,61,
        0,0,140,33,1,0,0,0,141,145,7,5,0,0,142,144,7,6,0,0,143,142,1,0,0,
        0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,35,1,0,0,0,
        147,145,1,0,0,0,148,151,3,38,16,0,149,151,3,40,17,0,150,148,1,0,
        0,0,150,149,1,0,0,0,151,37,1,0,0,0,152,156,5,34,0,0,153,155,8,7,
        0,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,
        0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,169,5,34,0,0,160,164,5,39,
        0,0,161,163,8,8,0,0,162,161,1,0,0,0,163,166,1,0,0,0,164,162,1,0,
        0,0,164,165,1,0,0,0,165,167,1,0,0,0,166,164,1,0,0,0,167,169,5,39,
        0,0,168,152,1,0,0,0,168,160,1,0,0,0,169,39,1,0,0,0,170,172,7,9,0,
        0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,
        0,174,41,1,0,0,0,175,177,7,3,0,0,176,175,1,0,0,0,177,178,1,0,0,0,
        178,176,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,181,6,18,4,0,
        181,43,1,0,0,0,182,183,5,125,0,0,183,184,1,0,0,0,184,185,6,19,5,
        0,185,186,6,19,5,0,186,45,1,0,0,0,187,191,8,4,0,0,188,189,5,92,0,
        0,189,191,9,0,0,0,190,187,1,0,0,0,190,188,1,0,0,0,191,192,1,0,0,
        0,192,190,1,0,0,0,192,193,1,0,0,0,193,47,1,0,0,0,22,0,1,2,3,4,5,
        51,55,90,106,114,123,125,145,150,156,164,168,173,178,190,192,7,5,
        1,0,5,3,0,5,4,0,5,2,0,6,0,0,4,0,0,5,5,0
    ]

class sdoc2Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    MODE_BLOCK_ARG = 1
    BLOCK_MODE_ARG = 2
    MODE_INLINE_ARG = 3
    MODE_OPT_ARG = 4
    INLINE_MODE_ARG = 5

    TEXT = 1
    BEGIN = 2
    END = 3
    POSITION = 4
    SDOC2_COMMAND = 5
    BLOCK_ARG_LEFT_BRACKET = 6
    BLOCK_ARG_LEFT_BRACE = 7
    BLOCK_ARG_WS = 8
    BLOCK_ARG_RIGHT_BRACE = 9
    BLOCK_ARG_ARG = 10
    INLINE_ARG_LEFT_BRACKET = 11
    INLINE_ARG_LEFT_BRACE = 12
    OPT_ARG_RIGHT_BRACKET = 13
    OPT_ARG_EQUALS = 14
    OPT_ARG_NAME = 15
    OPT_ARG_VALUE = 16
    OPT_ARG_WS = 17
    INLINE_ARG_RIGHT_BRACE = 18
    INLINE_ARG_ARG = 19

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "MODE_BLOCK_ARG", "BLOCK_MODE_ARG", "MODE_INLINE_ARG", 
                  "MODE_OPT_ARG", "INLINE_MODE_ARG" ]

    literalNames = [ "<INVALID>",
            "'\\begin'", "'\\end'", "'\\position'", "']'", "'='", "'}'" ]

    symbolicNames = [ "<INVALID>",
            "TEXT", "BEGIN", "END", "POSITION", "SDOC2_COMMAND", "BLOCK_ARG_LEFT_BRACKET", 
            "BLOCK_ARG_LEFT_BRACE", "BLOCK_ARG_WS", "BLOCK_ARG_RIGHT_BRACE", 
            "BLOCK_ARG_ARG", "INLINE_ARG_LEFT_BRACKET", "INLINE_ARG_LEFT_BRACE", 
            "OPT_ARG_RIGHT_BRACKET", "OPT_ARG_EQUALS", "OPT_ARG_NAME", "OPT_ARG_VALUE", 
            "OPT_ARG_WS", "INLINE_ARG_RIGHT_BRACE", "INLINE_ARG_ARG" ]

    ruleNames = [ "TEXT", "BEGIN", "END", "POSITION", "SDOC2_COMMAND", "BLOCK_ARG_LEFT_BRACKET", 
                  "BLOCK_ARG_LEFT_BRACE", "BLOCK_ARG_WS", "BLOCK_ARG_RIGHT_BRACE", 
                  "BLOCK_ARG_ARG", "INLINE_ARG_LEFT_BRACKET", "INLINE_ARG_LEFT_BRACE", 
                  "OPT_ARG_RIGHT_BRACKET", "OPT_ARG_EQUALS", "OPT_ARG_NAME", 
                  "OPT_ARG_VALUE", "OPT_ARG_STRING", "OPT_ARG_INT", "OPT_ARG_WS", 
                  "INLINE_ARG_RIGHT_BRACE", "INLINE_ARG_ARG" ]

    grammarFileName = "sdoc2Lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


