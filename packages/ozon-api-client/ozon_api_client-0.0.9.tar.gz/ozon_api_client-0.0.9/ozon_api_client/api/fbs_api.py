# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ozon_api_client.api_client import ApiClient


class FBSApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def posting_api_act_posting_list(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список отправлений в акте  # noqa: E501

        Возвращает список отправлений в акте по его идентификатору.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_act_posting_list(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSActGetPostingsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSActGetPostingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_act_posting_list_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_act_posting_list_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_act_posting_list_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список отправлений в акте  # noqa: E501

        Возвращает список отправлений в акте по его идентификатору.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_act_posting_list_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSActGetPostingsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSActGetPostingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_act_posting_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_act_posting_list`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_act_posting_list`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_act_posting_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/act/get-postings', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2PostingFBSActGetPostingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_cancel_fbs_posting(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Отменить отправление  # noqa: E501

        Меняет статус отправления на `cancelled`.  Перед началом работы проверьте причины отмены для конкретного отправления методом [/v1/posting/fbs/cancel-reason](#operation/PostingAPI_GetPostingFbsCancelReasonV1).  Условно-доставленные отправления отменить нельзя.  Если значение параметра `cancel_reason_id` — 402, заполните поле `cancel_reason_message`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_cancel_fbs_posting(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingCancelFbsPostingRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingBooleanResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_cancel_fbs_posting_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_cancel_fbs_posting_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_cancel_fbs_posting_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Отменить отправление  # noqa: E501

        Меняет статус отправления на `cancelled`.  Перед началом работы проверьте причины отмены для конкретного отправления методом [/v1/posting/fbs/cancel-reason](#operation/PostingAPI_GetPostingFbsCancelReasonV1).  Условно-доставленные отправления отменить нельзя.  Если значение параметра `cancel_reason_id` — 402, заполните поле `cancel_reason_message`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_cancel_fbs_posting_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingCancelFbsPostingRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingBooleanResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_cancel_fbs_posting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_cancel_fbs_posting`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_cancel_fbs_posting`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_cancel_fbs_posting`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingBooleanResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_cancel_fbs_posting_product(self, client_id, api_key, **kwargs):  # noqa: E501
        """Отменить отправку некоторых товаров в отправлении  # noqa: E501

        Используйте метод, если вы не можете отправить часть продуктов из отправления.  Идентификаторы причин отмены `cancel_reason_id` при работе по схеме rFBS:  - `352` — товара нет в наличии; - `400` — остался только бракованный товар; - `401` — отмена из арбитража; - `402` — другая причина; - `665` — покупатель не забрал заказ; - `666` — нет доставки в этот регион; - `667` — заказ утерян службой доставки.  Для отправлений в статусах «Доставляется» и «Курьер в пути» доступны последние 4 причины.  Условно-доставленные отправления отменить нельзя.  Если значение параметра `cancel_reason_id` — 402, заполните поле `cancel_reason_message`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_cancel_fbs_posting_product(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param PostingPostingProductCancelRequest body:
        :return: PostingPostingProductCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_cancel_fbs_posting_product_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_cancel_fbs_posting_product_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_cancel_fbs_posting_product_with_http_info(self, client_id, api_key, **kwargs):  # noqa: E501
        """Отменить отправку некоторых товаров в отправлении  # noqa: E501

        Используйте метод, если вы не можете отправить часть продуктов из отправления.  Идентификаторы причин отмены `cancel_reason_id` при работе по схеме rFBS:  - `352` — товара нет в наличии; - `400` — остался только бракованный товар; - `401` — отмена из арбитража; - `402` — другая причина; - `665` — покупатель не забрал заказ; - `666` — нет доставки в этот регион; - `667` — заказ утерян службой доставки.  Для отправлений в статусах «Доставляется» и «Курьер в пути» доступны последние 4 причины.  Условно-доставленные отправления отменить нельзя.  Если значение параметра `cancel_reason_id` — 402, заполните поле `cancel_reason_message`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_cancel_fbs_posting_product_with_http_info(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param PostingPostingProductCancelRequest body:
        :return: PostingPostingProductCancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_cancel_fbs_posting_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_cancel_fbs_posting_product`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_cancel_fbs_posting_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/product/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingPostingProductCancelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_change_fbs_posting_product(self, client_id, api_key, **kwargs):  # noqa: E501
        """Добавить вес для весовых товаров в отправлении  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_change_fbs_posting_product(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param PostingPostingProductChangeRequest body:
        :return: PostingPostingProductChangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_change_fbs_posting_product_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_change_fbs_posting_product_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_change_fbs_posting_product_with_http_info(self, client_id, api_key, **kwargs):  # noqa: E501
        """Добавить вес для весовых товаров в отправлении  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_change_fbs_posting_product_with_http_info(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param PostingPostingProductChangeRequest body:
        :return: PostingPostingProductChangeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_change_fbs_posting_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_change_fbs_posting_product`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_change_fbs_posting_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/product/change', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingPostingProductChangeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_create_label_batch(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Создать задание на выгрузку этикеток  # noqa: E501

        Метод для создания задания на асинхронное формирование этикеток.  Для получения этикеток, созданных в результате вызова метода, используйте [/v1/posting/fbs/package-label/get](#operation/PostingAPI_GetLabelBatch).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_create_label_batch(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateLabelBatchRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1CreateLabelBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_create_label_batch_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_create_label_batch_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_create_label_batch_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Создать задание на выгрузку этикеток  # noqa: E501

        Метод для создания задания на асинхронное формирование этикеток.  Для получения этикеток, созданных в результате вызова метода, используйте [/v1/posting/fbs/package-label/get](#operation/PostingAPI_GetLabelBatch).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_create_label_batch_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1CreateLabelBatchRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1CreateLabelBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_create_label_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_create_label_batch`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_create_label_batch`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_create_label_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/fbs/package-label/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1CreateLabelBatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_digital_act_document_sign(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Подписать документы по отгрузке  # noqa: E501

        Подписывает документы по отгрузке в системе электронных документов Ozon логистики.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_digital_act_document_sign(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSDigitalActDocumentSignRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSDigitalActDocumentSignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_digital_act_document_sign_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_digital_act_document_sign_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_digital_act_document_sign_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Подписать документы по отгрузке  # noqa: E501

        Подписывает документы по отгрузке в системе электронных документов Ozon логистики.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_digital_act_document_sign_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSDigitalActDocumentSignRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSDigitalActDocumentSignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_digital_act_document_sign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_digital_act_document_sign`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_digital_act_document_sign`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_digital_act_document_sign`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/digital/act/document-sign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2PostingFBSDigitalActDocumentSignResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_act_list(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список актов по отгрузкам  # noqa: E501

        Возвращает список актов по отгрузкам с возможностью отфильтровать отгрузки по периоду, статусу и типу интеграции.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_act_list(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSActListRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSActListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_act_list_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_act_list_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_act_list_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список актов по отгрузкам  # noqa: E501

        Возвращает список актов по отгрузкам с возможностью отфильтровать отгрузки по периоду, статусу и типу интеграции.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_act_list_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSActListRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSActListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_act_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_act_list`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_act_list`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_act_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/act/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2PostingFBSActListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_delivered(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Доставлено»  # noqa: E501

        Перевести отправление в статус «Доставлено», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_delivered(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingDeliveredRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_delivered_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_delivered_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_delivered_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Доставлено»  # noqa: E501

        Перевести отправление в статус «Доставлено», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_delivered_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingDeliveredRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_delivered" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_delivered`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_delivered`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_delivered`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/fbs/posting/delivered', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingFbsPostingMoveStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_delivering(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Доставляется»  # noqa: E501

        Перевести отправление в статус «Доставляется», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_delivering(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingDeliveringRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_delivering_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_delivering_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_delivering_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Доставляется»  # noqa: E501

        Перевести отправление в статус «Доставляется», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_delivering_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingDeliveringRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_delivering" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_delivering`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_delivering`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_delivering`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/fbs/posting/delivering', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingFbsPostingMoveStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_last_mile(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Последняя миля»  # noqa: E501

        Перевести отправление в статус «Последняя миля», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_last_mile(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingLastMileRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_last_mile_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_last_mile_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_last_mile_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Последняя миля»  # noqa: E501

        Перевести отправление в статус «Последняя миля», если используется сторонняя служба доставки.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_last_mile_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingLastMileRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_last_mile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_last_mile`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_last_mile`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_last_mile`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/fbs/posting/last-mile', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingFbsPostingMoveStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_sentbyseller(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Отправлено продавцом»  # noqa: E501

        Перевести отправление в статус «Отправлено продавцом». Статус доступен только продавцам с первой милей, продающим из-за рубежа.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_sentbyseller(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingSentbysellerRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingSentbysellerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_sentbyseller_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_sentbyseller_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_sentbyseller_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Изменить статус на «Отправлено продавцом»  # noqa: E501

        Перевести отправление в статус «Отправлено продавцом». Статус доступен только продавцам с первой милей, продающим из-за рубежа.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_sentbyseller_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingSentbysellerRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingSentbysellerResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_sentbyseller" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_sentbyseller`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_sentbyseller`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_sentbyseller`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/fbs/posting/sent-by-seller', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingFbsPostingSentbysellerResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_fbs_posting_tracking_number_set(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Добавить трек-номера  # noqa: E501

        Добавить трек-номера к отправлениям. Вы можете передать до 20 трек-номеров за раз.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_tracking_number_set(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingTrackingNumberSetRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_fbs_posting_tracking_number_set_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_fbs_posting_tracking_number_set_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_fbs_posting_tracking_number_set_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Добавить трек-номера  # noqa: E501

        Добавить трек-номера к отправлениям. Вы можете передать до 20 трек-номеров за раз.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_fbs_posting_tracking_number_set_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingFbsPostingTrackingNumberSetRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingFbsPostingMoveStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_fbs_posting_tracking_number_set" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_fbs_posting_tracking_number_set`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_fbs_posting_tracking_number_set`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_fbs_posting_tracking_number_set`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/fbs/posting/tracking-number/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingFbsPostingMoveStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_carriage_available_list(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список доступных перевозок  # noqa: E501

        Метод для получения перевозок, по которым нужно распечатать штрихкод для отгрузки и документы: - для продацов из России — лист отгрузки и транспортную накладную; - для продавцов из СНГ — акт и транспортную накладную.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_carriage_available_list(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv1GetCarriageAvailableListRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Postingv1GetCarriageAvailableListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_carriage_available_list_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_carriage_available_list_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_carriage_available_list_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список доступных перевозок  # noqa: E501

        Метод для получения перевозок, по которым нужно распечатать штрихкод для отгрузки и документы: - для продацов из России — лист отгрузки и транспортную накладную; - для продавцов из СНГ — акт и транспортную накладную.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_carriage_available_list_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv1GetCarriageAvailableListRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Postingv1GetCarriageAvailableListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_carriage_available_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_get_carriage_available_list`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_carriage_available_list`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_carriage_available_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/carriage-available/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Postingv1GetCarriageAvailableListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_etgb(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Таможенные декларации ETGB  # noqa: E501

        Метод для получения таможенных деклараций Elektronik Ticaret Gümrük Beyannamesi (ETGB) для продавцов из Турции.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_etgb(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetEtgbRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1GetEtgbResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_etgb_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_etgb_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_etgb_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Таможенные декларации ETGB  # noqa: E501

        Метод для получения таможенных деклараций Elektronik Ticaret Gümrük Beyannamesi (ETGB) для продавцов из Турции.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_etgb_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetEtgbRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1GetEtgbResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_etgb" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_get_etgb`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_etgb`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_etgb`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/global/etgb', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetEtgbResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_fbs_posting_by_barcode(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить информацию об отправлении по штрихкоду  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_fbs_posting_by_barcode(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingGetFbsPostingByBarcodeRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2FbsPostingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_fbs_posting_by_barcode_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_fbs_posting_by_barcode_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_fbs_posting_by_barcode_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить информацию об отправлении по штрихкоду  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_fbs_posting_by_barcode_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingGetFbsPostingByBarcodeRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2FbsPostingResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_fbs_posting_by_barcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_get_fbs_posting_by_barcode`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_fbs_posting_by_barcode`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_fbs_posting_by_barcode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/get-by-barcode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2FbsPostingResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_fbs_posting_list_v3(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список отправлений (версия 3)  # noqa: E501

        Возвращает список отправлений за указанный период времени — он должен быть не больше одного года.  Дополнительно можно отфильтровать отправления по их статусу — список доступных для выдачи статусов указан в описании параметра `filter.status`.  `has_next = true` в ответе может значить, что вернули не весь массив отправлений. Чтобы получить информацию об остальных отправлениях, сделайте новый запрос с другим значением `offset`.   Чтобы получать актуальную дату отгрузки, регулярно обновляйте информацию об отправлениях или подключите [пуш-уведомления](#tag/push_start).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_fbs_posting_list_v3(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv3GetFbsPostingListRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V3GetFbsPostingListResponseV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_fbs_posting_list_v3_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_fbs_posting_list_v3_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_fbs_posting_list_v3_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список отправлений (версия 3)  # noqa: E501

        Возвращает список отправлений за указанный период времени — он должен быть не больше одного года.  Дополнительно можно отфильтровать отправления по их статусу — список доступных для выдачи статусов указан в описании параметра `filter.status`.  `has_next = true` в ответе может значить, что вернули не весь массив отправлений. Чтобы получить информацию об остальных отправлениях, сделайте новый запрос с другим значением `offset`.   Чтобы получать актуальную дату отгрузки, регулярно обновляйте информацию об отправлениях или подключите [пуш-уведомления](#tag/push_start).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_fbs_posting_list_v3_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv3GetFbsPostingListRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V3GetFbsPostingListResponseV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_fbs_posting_list_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_get_fbs_posting_list_v3`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_fbs_posting_list_v3`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_fbs_posting_list_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/posting/fbs/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3GetFbsPostingListResponseV3',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_fbs_posting_unfulfilled_list(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список необработанных отправлений (версия 3)  # noqa: E501

        Возвращает список необработанных отправлений за указанный период времени — он должен быть не больше одного года.  Возможные статусы отправлений: - `awaiting_registration` — ожидает регистрации, - `acceptance_in_progress` — идёт приёмка, - `awaiting_approve` — ожидает подтверждения, - `awaiting_packaging` — ожидает упаковки, - `awaiting_deliver` — ожидает отгрузки, - `arbitration` — арбитраж, - `client_arbitration` — клиентский арбитраж доставки, - `delivering` — доставляется, - `driver_pickup` — у водителя, - `cancelled` — отменено, - `not_accepted` — не принят на сортировочном центре, - `sent_by_seller` — отправлено продавцом.  Чтобы получать актуальную дату отгрузки, регулярно обновляйте информацию об отправлениях или подключите [пуш-уведомления](#tag/push_start).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_fbs_posting_unfulfilled_list(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv3GetFbsPostingUnfulfilledListRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Postingv3GetFbsPostingUnfulfilledListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_fbs_posting_unfulfilled_list_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_fbs_posting_unfulfilled_list_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_fbs_posting_unfulfilled_list_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Список необработанных отправлений (версия 3)  # noqa: E501

        Возвращает список необработанных отправлений за указанный период времени — он должен быть не больше одного года.  Возможные статусы отправлений: - `awaiting_registration` — ожидает регистрации, - `acceptance_in_progress` — идёт приёмка, - `awaiting_approve` — ожидает подтверждения, - `awaiting_packaging` — ожидает упаковки, - `awaiting_deliver` — ожидает отгрузки, - `arbitration` — арбитраж, - `client_arbitration` — клиентский арбитраж доставки, - `delivering` — доставляется, - `driver_pickup` — у водителя, - `cancelled` — отменено, - `not_accepted` — не принят на сортировочном центре, - `sent_by_seller` — отправлено продавцом.  Чтобы получать актуальную дату отгрузки, регулярно обновляйте информацию об отправлениях или подключите [пуш-уведомления](#tag/push_start).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_fbs_posting_unfulfilled_list_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv3GetFbsPostingUnfulfilledListRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Postingv3GetFbsPostingUnfulfilledListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_fbs_posting_unfulfilled_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_get_fbs_posting_unfulfilled_list`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_fbs_posting_unfulfilled_list`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_fbs_posting_unfulfilled_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/posting/fbs/unfulfilled/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Postingv3GetFbsPostingUnfulfilledListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_fbs_posting_v3(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить информацию об отправлении по идентификатору  # noqa: E501

        Чтобы получать актуальную дату отгрузки, регулярно обновляйте информацию об отправлениях или подключите [пуш-уведомления](#tag/push_start).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_fbs_posting_v3(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv3GetFbsPostingRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V3GetFbsPostingResponseV3
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_fbs_posting_v3_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_fbs_posting_v3_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_fbs_posting_v3_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить информацию об отправлении по идентификатору  # noqa: E501

        Чтобы получать актуальную дату отгрузки, регулярно обновляйте информацию об отправлениях или подключите [пуш-уведомления](#tag/push_start).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_fbs_posting_v3_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv3GetFbsPostingRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V3GetFbsPostingResponseV3
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_fbs_posting_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_get_fbs_posting_v3`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_fbs_posting_v3`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_fbs_posting_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/posting/fbs/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V3GetFbsPostingResponseV3',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_label_batch(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить файл с этикетками  # noqa: E501

        Метод для получения этикеток после вызова [/v1/posting/fbs/package-label/create](#operation/PostingAPI_CreateLabelBatch).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_label_batch(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetLabelBatchRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1GetLabelBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_label_batch_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_label_batch_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_label_batch_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить файл с этикетками  # noqa: E501

        Метод для получения этикеток после вызова [/v1/posting/fbs/package-label/create](#operation/PostingAPI_CreateLabelBatch).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_label_batch_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetLabelBatchRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1GetLabelBatchResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_label_batch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_get_label_batch`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_label_batch`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_label_batch`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/fbs/package-label/get', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetLabelBatchResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_posting_fbs_cancel_reason_list(self, client_id, api_key, **kwargs):  # noqa: E501
        """Причины отмены отправлений  # noqa: E501

        Возвращает список причин отмены для всех отправлений.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_posting_fbs_cancel_reason_list(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingCancelReasonListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_posting_fbs_cancel_reason_list_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_posting_fbs_cancel_reason_list_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_posting_fbs_cancel_reason_list_with_http_info(self, client_id, api_key, **kwargs):  # noqa: E501
        """Причины отмены отправлений  # noqa: E501

        Возвращает список причин отмены для всех отправлений.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_posting_fbs_cancel_reason_list_with_http_info(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingCancelReasonListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_posting_fbs_cancel_reason_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_posting_fbs_cancel_reason_list`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_posting_fbs_cancel_reason_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/cancel-reason/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingCancelReasonListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_posting_fbs_cancel_reason_v1(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Причины отмены отправления  # noqa: E501

        Возвращает список причин отмены для конкретных отправлений.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_posting_fbs_cancel_reason_v1(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingCancelReasonRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingCancelReasonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_posting_fbs_cancel_reason_v1_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_posting_fbs_cancel_reason_v1_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_posting_fbs_cancel_reason_v1_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Причины отмены отправления  # noqa: E501

        Возвращает список причин отмены для конкретных отправлений.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_posting_fbs_cancel_reason_v1_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingCancelReasonRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingCancelReasonResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_posting_fbs_cancel_reason_v1" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_get_posting_fbs_cancel_reason_v1`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_posting_fbs_cancel_reason_v1`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_posting_fbs_cancel_reason_v1`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/fbs/cancel-reason', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingCancelReasonResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_get_restrictions(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить ограничения пункта приёма  # noqa: E501

        Метод для получения габаритных, весовых и прочих ограничений пункта приёма по номеру отправления. Метод применим только для работы по схеме FBS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_restrictions(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetRestrictionsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1GetRestrictionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_get_restrictions_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_get_restrictions_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_get_restrictions_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить ограничения пункта приёма  # noqa: E501

        Метод для получения габаритных, весовых и прочих ограничений пункта приёма по номеру отправления. Метод применим только для работы по схеме FBS.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_get_restrictions_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1GetRestrictionsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1GetRestrictionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_get_restrictions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_get_restrictions`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_get_restrictions`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_get_restrictions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/fbs/restrictions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1GetRestrictionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_list_country_product_fbs_posting_v2(self, body, **kwargs):  # noqa: E501
        """Список доступных стран-изготовителей  # noqa: E501

        Метод для получения списка доступных стран-изготовителей и их ISO кодов.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_list_country_product_fbs_posting_v2(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2FbsPostingProductCountryListRequest body: (required)
        :return: V2FbsPostingProductCountryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_list_country_product_fbs_posting_v2_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_list_country_product_fbs_posting_v2_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def posting_api_list_country_product_fbs_posting_v2_with_http_info(self, body, **kwargs):  # noqa: E501
        """Список доступных стран-изготовителей  # noqa: E501

        Метод для получения списка доступных стран-изготовителей и их ISO кодов.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_list_country_product_fbs_posting_v2_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2FbsPostingProductCountryListRequest body: (required)
        :return: V2FbsPostingProductCountryListResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_list_country_product_fbs_posting_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_list_country_product_fbs_posting_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/product/country/list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2FbsPostingProductCountryListResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_move_fbs_posting_to_arbitration(self, client_id, api_key, **kwargs):  # noqa: E501
        """Открыть спор по отправлению  # noqa: E501

        Если отправление передано в доставку, но не просканировано в сортировочном центре, можно открыть спор. Открытый спор переведёт отправление в статус `arbitration`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_move_fbs_posting_to_arbitration(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param PostingMovePostingRequest body:
        :return: PostingBooleanResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_move_fbs_posting_to_arbitration_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_move_fbs_posting_to_arbitration_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_move_fbs_posting_to_arbitration_with_http_info(self, client_id, api_key, **kwargs):  # noqa: E501
        """Открыть спор по отправлению  # noqa: E501

        Если отправление передано в доставку, но не просканировано в сортировочном центре, можно открыть спор. Открытый спор переведёт отправление в статус `arbitration`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_move_fbs_posting_to_arbitration_with_http_info(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param PostingMovePostingRequest body:
        :return: PostingBooleanResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_move_fbs_posting_to_arbitration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_move_fbs_posting_to_arbitration`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_move_fbs_posting_to_arbitration`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/arbitration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingBooleanResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_move_fbs_posting_to_awaiting_delivery(self, client_id, api_key, **kwargs):  # noqa: E501
        """Передать отправление к отгрузке  # noqa: E501

        Передает спорные заказы к отгрузке. Статус отправления изменится на `awaiting_deliver`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_move_fbs_posting_to_awaiting_delivery(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param PostingMovePostingRequest body:
        :return: PostingBooleanResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_move_fbs_posting_to_awaiting_delivery_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_move_fbs_posting_to_awaiting_delivery_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_move_fbs_posting_to_awaiting_delivery_with_http_info(self, client_id, api_key, **kwargs):  # noqa: E501
        """Передать отправление к отгрузке  # noqa: E501

        Передает спорные заказы к отгрузке. Статус отправления изменится на `awaiting_deliver`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_move_fbs_posting_to_awaiting_delivery_with_http_info(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param PostingMovePostingRequest body:
        :return: PostingBooleanResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_move_fbs_posting_to_awaiting_delivery" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_move_fbs_posting_to_awaiting_delivery`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_move_fbs_posting_to_awaiting_delivery`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/awaiting-delivery', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingBooleanResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_fbs_act_check_status(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Статус отгрузки и документов  # noqa: E501

        Возвращает статус формирования штрихкода для отгрузки и документов: - для продавцов из России — транспортной накладной и листа отгрузки; - для продавцов из СНГ — транспортной накладной и акта приёма-передачи.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_act_check_status(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingPostingFBSActCheckStatusRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingPostingFBSActCheckStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_fbs_act_check_status_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_fbs_act_check_status_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_fbs_act_check_status_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Статус отгрузки и документов  # noqa: E501

        Возвращает статус формирования штрихкода для отгрузки и документов: - для продавцов из России — транспортной накладной и листа отгрузки; - для продавцов из СНГ — транспортной накладной и акта приёма-передачи.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_act_check_status_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingPostingFBSActCheckStatusRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingPostingFBSActCheckStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_fbs_act_check_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_fbs_act_check_status`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_fbs_act_check_status`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_fbs_act_check_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/act/check-status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingPostingFBSActCheckStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_fbs_act_create(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Подтвердить отгрузку и создать документы  # noqa: E501

        Подтверждает отгрузку и запускает формирование транспортной накладной и штрихкода для отгрузки. Для продавцов из России также запускается формирование листа отгрузки, а для продавцов из СНГ — акта приёма-передачи.  Чтобы сформировать и получить документы, переведите отправление в статус `awaiting_deliver`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_act_create(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingPostingFBSActCreateRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingPostingFBSActCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_fbs_act_create_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_fbs_act_create_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_fbs_act_create_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Подтвердить отгрузку и создать документы  # noqa: E501

        Подтверждает отгрузку и запускает формирование транспортной накладной и штрихкода для отгрузки. Для продавцов из России также запускается формирование листа отгрузки, а для продавцов из СНГ — акта приёма-передачи.  Чтобы сформировать и получить документы, переведите отправление в статус `awaiting_deliver`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_act_create_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingPostingFBSActCreateRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingPostingFBSActCreateResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_fbs_act_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_fbs_act_create`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_fbs_act_create`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_fbs_act_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/act/create', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingPostingFBSActCreateResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_fbs_act_get_container_labels(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Этикетки для грузового места  # noqa: E501

        Метод создает этикетки для грузового места.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_act_get_container_labels(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingPostingFBSActGetContainerLabelsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingPostingFBSActGetContainerLabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_fbs_act_get_container_labels_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_fbs_act_get_container_labels_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_fbs_act_get_container_labels_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Этикетки для грузового места  # noqa: E501

        Метод создает этикетки для грузового места.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_act_get_container_labels_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingPostingFBSActGetContainerLabelsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingPostingFBSActGetContainerLabelsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_fbs_act_get_container_labels" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_fbs_act_get_container_labels`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_fbs_act_get_container_labels`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_fbs_act_get_container_labels`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/act/get-container-labels', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingPostingFBSActGetContainerLabelsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_fbs_digital_act_check_status(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Статус формирования накладной  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_digital_act_check_status(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSDigitalActCheckStatusRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSDigitalActCheckStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_fbs_digital_act_check_status_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_fbs_digital_act_check_status_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_fbs_digital_act_check_status_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Статус формирования накладной  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_digital_act_check_status_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSDigitalActCheckStatusRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSDigitalActCheckStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_fbs_digital_act_check_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_fbs_digital_act_check_status`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_fbs_digital_act_check_status`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_fbs_digital_act_check_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/digital/act/check-status', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2PostingFBSDigitalActCheckStatusResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_fbs_get_act(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить PDF c документами  # noqa: E501

        С помощью метода можно получить: - продацам из России — лист отгрузки и транспортную накладную; - продавцам из СНГ — акт и транспортную накладную.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_get_act(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingPostingFBSGetActRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingPostingFBSGetActResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_fbs_get_act_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_fbs_get_act_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_fbs_get_act_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить PDF c документами  # noqa: E501

        С помощью метода можно получить: - продацам из России — лист отгрузки и транспортную накладную; - продавцам из СНГ — акт и транспортную накладную.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_get_act_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingPostingFBSGetActRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingPostingFBSGetActResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_fbs_get_act" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_fbs_get_act`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_fbs_get_act`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_fbs_get_act`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/act/get-pdf', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingPostingFBSGetActResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_fbs_get_barcode(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Штрихкод для отгрузки отправления  # noqa: E501

        Метод для получения штрихкода, который нужно показать в пункте выдачи или сортировочном центре при отгрузке отправления.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_get_barcode(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSGetBarcodeRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSGetBarcodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_fbs_get_barcode_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_fbs_get_barcode_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_fbs_get_barcode_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Штрихкод для отгрузки отправления  # noqa: E501

        Метод для получения штрихкода, который нужно показать в пункте выдачи или сортировочном центре при отгрузке отправления.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_get_barcode_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSGetBarcodeRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSGetBarcodeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_fbs_get_barcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_fbs_get_barcode`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_fbs_get_barcode`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_fbs_get_barcode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['image/png', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/act/get-barcode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2PostingFBSGetBarcodeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_fbs_get_barcode_text(self, client_id, api_key, **kwargs):  # noqa: E501
        """Значение штрихкода для отгрузки отправления  # noqa: E501

        Используйте этот метод, чтобы получить штрихкод из ответа [/v2/posting/fbs/act/get-barcode](#operation/PostingAPI_PostingFBSGetBarcode) в текстовом виде.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_get_barcode_text(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param V2PostingFBSGetBarcodeRequest body:
        :return: V2PostingFBSGetBarcodeTextResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_fbs_get_barcode_text_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_fbs_get_barcode_text_with_http_info(client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_fbs_get_barcode_text_with_http_info(self, client_id, api_key, **kwargs):  # noqa: E501
        """Значение штрихкода для отгрузки отправления  # noqa: E501

        Используйте этот метод, чтобы получить штрихкод из ответа [/v2/posting/fbs/act/get-barcode](#operation/PostingAPI_PostingFBSGetBarcode) в текстовом виде.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_get_barcode_text_with_http_info(client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :param V2PostingFBSGetBarcodeRequest body:
        :return: V2PostingFBSGetBarcodeTextResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_id', 'api_key', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_fbs_get_barcode_text" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_fbs_get_barcode_text`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_fbs_get_barcode_text`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/act/get-barcode/text', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2PostingFBSGetBarcodeTextResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_fbs_get_digital_act(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить лист отгрузки по перевозке  # noqa: E501

        Вы можете получить документы, если в ответе метода [/v2/posting/fbs/digital/act/check-status](#operation/PostingAPI_PostingFBSDigitalActCheckStatus) был один из статусов: - `FORMED` — перевозка сформирована успешно, - `CONFIRMED` — перевозка подтверждена Ozon, - `CONFIRMED_WITH_MISMATCH` — перевозка принята Ozon с расхождениями.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_get_digital_act(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSGetDigitalActRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSGetDigitalActResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_fbs_get_digital_act_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_fbs_get_digital_act_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_fbs_get_digital_act_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Получить лист отгрузки по перевозке  # noqa: E501

        Вы можете получить документы, если в ответе метода [/v2/posting/fbs/digital/act/check-status](#operation/PostingAPI_PostingFBSDigitalActCheckStatus) был один из статусов: - `FORMED` — перевозка сформирована успешно, - `CONFIRMED` — перевозка подтверждена Ozon, - `CONFIRMED_WITH_MISMATCH` — перевозка принята Ozon с расхождениями.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_get_digital_act_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2PostingFBSGetDigitalActRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V2PostingFBSGetDigitalActResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_fbs_get_digital_act" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_fbs_get_digital_act`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_fbs_get_digital_act`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_fbs_get_digital_act`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/digital/act/get-pdf', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2PostingFBSGetDigitalActResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_fbs_package_label(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Напечатать этикетку  # noqa: E501

        <aside class=\"warning\"> Если вы работаете по схеме rFBS или rFBS Express, изучите процесс печати этикетки в <a href=\"https://seller-edu.ozon.ru/rfbs/scheme-of-work\">Базе знаний продавца</a>. </aside>  Генерирует PDF-файл с этикетками для указанных отправлений. В одном запросе можно передать не больше 20 идентификаторов. Если хотя бы для одного отправления возникнет ошибка, этикетки не будут подготовлены для всех отправлений в запросе.  Рекомендуем запрашивать этикетки через 45–60 секунд после сборки заказа.  Ошибка `The next postings aren't ready` означает, что этикетки ещё не готовы, повторите запрос позднее.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_package_label(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingPostingFBSPackageLabelRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingPostingFBSPackageLabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_fbs_package_label_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_fbs_package_label_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_fbs_package_label_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Напечатать этикетку  # noqa: E501

        <aside class=\"warning\"> Если вы работаете по схеме rFBS или rFBS Express, изучите процесс печати этикетки в <a href=\"https://seller-edu.ozon.ru/rfbs/scheme-of-work\">Базе знаний продавца</a>. </aside>  Генерирует PDF-файл с этикетками для указанных отправлений. В одном запросе можно передать не больше 20 идентификаторов. Если хотя бы для одного отправления возникнет ошибка, этикетки не будут подготовлены для всех отправлений в запросе.  Рекомендуем запрашивать этикетки через 45–60 секунд после сборки заказа.  Ошибка `The next postings aren't ready` означает, что этикетки ещё не готовы, повторите запрос позднее.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_fbs_package_label_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostingPostingFBSPackageLabelRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: PostingPostingFBSPackageLabelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_fbs_package_label" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_fbs_package_label`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_fbs_package_label`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_fbs_package_label`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf', 'application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/package-label', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PostingPostingFBSPackageLabelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_multi_box_qty_set_v3(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Указать количество коробок для многокоробочных отправлений  # noqa: E501

        Метод для передачи количества коробок для отправлений, в которых есть многокоробочные товары.  Используйте метод при работе по схеме rFBS Агрегатор — c доставкой партнёрами Ozon.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_multi_box_qty_set_v3(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv3PostingMultiBoxQtySetV3Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Postingv3PostingMultiBoxQtySetV3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_multi_box_qty_set_v3_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_multi_box_qty_set_v3_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_multi_box_qty_set_v3_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Указать количество коробок для многокоробочных отправлений  # noqa: E501

        Метод для передачи количества коробок для отправлений, в которых есть многокоробочные товары.  Используйте метод при работе по схеме rFBS Агрегатор — c доставкой партнёрами Ozon.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_multi_box_qty_set_v3_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Postingv3PostingMultiBoxQtySetV3Request body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: Postingv3PostingMultiBoxQtySetV3Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_multi_box_qty_set_v3" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_multi_box_qty_set_v3`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_multi_box_qty_set_v3`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_multi_box_qty_set_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v3/posting/multiboxqty/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Postingv3PostingMultiBoxQtySetV3Response',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_posting_timeslot_change_restrictions(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Доступные даты для переноса доставки  # noqa: E501

        Метод для получения доступных дат для переноса доставки и количества доступных переносов.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_timeslot_change_restrictions(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PostingFbsTimeslotChangeRestrictionsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1PostingFbsTimeslotChangeRestrictionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_posting_timeslot_change_restrictions_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_posting_timeslot_change_restrictions_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_posting_timeslot_change_restrictions_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Доступные даты для переноса доставки  # noqa: E501

        Метод для получения доступных дат для переноса доставки и количества доступных переносов.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_posting_timeslot_change_restrictions_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PostingFbsTimeslotChangeRestrictionsRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1PostingFbsTimeslotChangeRestrictionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_posting_timeslot_change_restrictions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_posting_timeslot_change_restrictions`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_posting_timeslot_change_restrictions`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_posting_timeslot_change_restrictions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/fbs/timeslot/change-restrictions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PostingFbsTimeslotChangeRestrictionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_set_country_product_fbs_posting_v2(self, body, **kwargs):  # noqa: E501
        """Добавить информацию о стране-изготовителе товара  # noqa: E501

        Метод для добавления на продукт атрибута «Страна-изготовитель», если он не был указан.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_set_country_product_fbs_posting_v2(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2FbsPostingProductCountrySetRequest body: (required)
        :return: V2FbsPostingProductCountrySetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_set_country_product_fbs_posting_v2_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_set_country_product_fbs_posting_v2_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def posting_api_set_country_product_fbs_posting_v2_with_http_info(self, body, **kwargs):  # noqa: E501
        """Добавить информацию о стране-изготовителе товара  # noqa: E501

        Метод для добавления на продукт атрибута «Страна-изготовитель», если он не был указан.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_set_country_product_fbs_posting_v2_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V2FbsPostingProductCountrySetRequest body: (required)
        :return: V2FbsPostingProductCountrySetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_set_country_product_fbs_posting_v2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_set_country_product_fbs_posting_v2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/posting/fbs/product/country/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V2FbsPostingProductCountrySetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def posting_api_set_posting_timeslot(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Перенести дату доставки  # noqa: E501

        Вы можете изменить дату доставки отправления не больше двух раз.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_set_posting_timeslot(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PostingFbsTimeslotSetRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1PostingFbsTimeslotSetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.posting_api_set_posting_timeslot_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.posting_api_set_posting_timeslot_with_http_info(body, client_id, api_key, **kwargs)  # noqa: E501
            return data

    def posting_api_set_posting_timeslot_with_http_info(self, body, client_id, api_key, **kwargs):  # noqa: E501
        """Перенести дату доставки  # noqa: E501

        Вы можете изменить дату доставки отправления не больше двух раз.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.posting_api_set_posting_timeslot_with_http_info(body, client_id, api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param V1PostingFbsTimeslotSetRequest body: (required)
        :param str client_id: Идентификатор клиента. (required)
        :param str api_key: API-ключ. (required)
        :return: V1PostingFbsTimeslotSetResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_id', 'api_key']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method posting_api_set_posting_timeslot" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `posting_api_set_posting_timeslot`")  # noqa: E501
        # verify the required parameter 'client_id' is set
        if ('client_id' not in params or
                params['client_id'] is None):
            raise ValueError("Missing the required parameter `client_id` when calling `posting_api_set_posting_timeslot`")  # noqa: E501
        # verify the required parameter 'api_key' is set
        if ('api_key' not in params or
                params['api_key'] is None):
            raise ValueError("Missing the required parameter `api_key` when calling `posting_api_set_posting_timeslot`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'client_id' in params:
            header_params['Client-Id'] = params['client_id']  # noqa: E501
        if 'api_key' in params:
            header_params['Api-Key'] = params['api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/posting/fbs/timeslot/set', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='V1PostingFbsTimeslotSetResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
