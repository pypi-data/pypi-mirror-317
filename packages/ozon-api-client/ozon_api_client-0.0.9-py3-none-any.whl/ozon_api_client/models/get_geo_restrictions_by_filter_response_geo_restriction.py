# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetGeoRestrictionsByFilterResponseGeoRestriction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_visible': 'bool',
        'name': 'str',
        'order_number': 'int'
    }

    attribute_map = {
        'id': 'id',
        'is_visible': 'is_visible',
        'name': 'name',
        'order_number': 'order_number'
    }

    def __init__(self, id=None, is_visible=None, name=None, order_number=None):  # noqa: E501
        """GetGeoRestrictionsByFilterResponseGeoRestriction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_visible = None
        self._name = None
        self._order_number = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_visible is not None:
            self.is_visible = is_visible
        if name is not None:
            self.name = name
        if order_number is not None:
            self.order_number = order_number

    @property
    def id(self):
        """Gets the id of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501

        Идентификатор геоограничения.  # noqa: E501

        :return: The id of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetGeoRestrictionsByFilterResponseGeoRestriction.

        Идентификатор геоограничения.  # noqa: E501

        :param id: The id of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_visible(self):
        """Gets the is_visible of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501

        Видимость элемента.  # noqa: E501

        :return: The is_visible of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501
        :rtype: bool
        """
        return self._is_visible

    @is_visible.setter
    def is_visible(self, is_visible):
        """Sets the is_visible of this GetGeoRestrictionsByFilterResponseGeoRestriction.

        Видимость элемента.  # noqa: E501

        :param is_visible: The is_visible of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501
        :type: bool
        """

        self._is_visible = is_visible

    @property
    def name(self):
        """Gets the name of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501

        Название города.  # noqa: E501

        :return: The name of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetGeoRestrictionsByFilterResponseGeoRestriction.

        Название города.  # noqa: E501

        :param name: The name of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def order_number(self):
        """Gets the order_number of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501

        Порядковый номер геоограничения.  Если на вход в параметре `last_order_number` указать `23`, то у первого элемента списка `restrictions` будет `order_number = 24`.   # noqa: E501

        :return: The order_number of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this GetGeoRestrictionsByFilterResponseGeoRestriction.

        Порядковый номер геоограничения.  Если на вход в параметре `last_order_number` указать `23`, то у первого элемента списка `restrictions` будет `order_number = 24`.   # noqa: E501

        :param order_number: The order_number of this GetGeoRestrictionsByFilterResponseGeoRestriction.  # noqa: E501
        :type: int
        """

        self._order_number = order_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetGeoRestrictionsByFilterResponseGeoRestriction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetGeoRestrictionsByFilterResponseGeoRestriction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
