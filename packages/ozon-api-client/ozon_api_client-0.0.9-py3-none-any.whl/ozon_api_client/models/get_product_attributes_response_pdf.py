# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetProductAttributesResponsePdf(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'index': 'int',
        'name': 'str'
    }

    attribute_map = {
        'file_name': 'file_name',
        'index': 'index',
        'name': 'name'
    }

    def __init__(self, file_name=None, index=None, name=None):  # noqa: E501
        """GetProductAttributesResponsePdf - a model defined in Swagger"""  # noqa: E501
        self._file_name = None
        self._index = None
        self._name = None
        self.discriminator = None
        if file_name is not None:
            self.file_name = file_name
        if index is not None:
            self.index = index
        if name is not None:
            self.name = name

    @property
    def file_name(self):
        """Gets the file_name of this GetProductAttributesResponsePdf.  # noqa: E501

        Путь к PDF-файлу.  # noqa: E501

        :return: The file_name of this GetProductAttributesResponsePdf.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this GetProductAttributesResponsePdf.

        Путь к PDF-файлу.  # noqa: E501

        :param file_name: The file_name of this GetProductAttributesResponsePdf.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def index(self):
        """Gets the index of this GetProductAttributesResponsePdf.  # noqa: E501

        Индекс документа в хранилище, который задаёт порядок.  # noqa: E501

        :return: The index of this GetProductAttributesResponsePdf.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this GetProductAttributesResponsePdf.

        Индекс документа в хранилище, который задаёт порядок.  # noqa: E501

        :param index: The index of this GetProductAttributesResponsePdf.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def name(self):
        """Gets the name of this GetProductAttributesResponsePdf.  # noqa: E501

        Название файла.  # noqa: E501

        :return: The name of this GetProductAttributesResponsePdf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetProductAttributesResponsePdf.

        Название файла.  # noqa: E501

        :param name: The name of this GetProductAttributesResponsePdf.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetProductAttributesResponsePdf, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetProductAttributesResponsePdf):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
