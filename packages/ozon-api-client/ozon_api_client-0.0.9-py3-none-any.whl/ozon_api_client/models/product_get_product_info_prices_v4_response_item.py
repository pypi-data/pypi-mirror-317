# coding: utf-8

"""
    Документация Ozon Seller API

    По вопросам работы с Seller API, обращайтесь в поддержку через личный кабинет.  > [Инструкции по работе с маркетплейсом](https://seller-edu.ozon.ru)  > [Информационная платформа и сообщество разработчиков Ozon for Dev](https://dev.ozon.ru/)   # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductGetProductInfoPricesV4ResponseItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'acquiring': 'int',
        'commissions': 'ItemCommissions',
        'marketing_actions': 'ItemMarketingActions',
        'offer_id': 'str',
        'price': 'ItemPrice',
        'price_index': 'str',
        'price_indexes': 'CommonPriceIndexes',
        'product_id': 'int',
        'volume_weight': 'float'
    }

    attribute_map = {
        'acquiring': 'acquiring',
        'commissions': 'commissions',
        'marketing_actions': 'marketing_actions',
        'offer_id': 'offer_id',
        'price': 'price',
        'price_index': 'price_index',
        'price_indexes': 'price_indexes',
        'product_id': 'product_id',
        'volume_weight': 'volume_weight'
    }

    def __init__(self, acquiring=None, commissions=None, marketing_actions=None, offer_id=None, price=None, price_index=None, price_indexes=None, product_id=None, volume_weight=None):  # noqa: E501
        """ProductGetProductInfoPricesV4ResponseItem - a model defined in Swagger"""  # noqa: E501
        self._acquiring = None
        self._commissions = None
        self._marketing_actions = None
        self._offer_id = None
        self._price = None
        self._price_index = None
        self._price_indexes = None
        self._product_id = None
        self._volume_weight = None
        self.discriminator = None
        if acquiring is not None:
            self.acquiring = acquiring
        if commissions is not None:
            self.commissions = commissions
        if marketing_actions is not None:
            self.marketing_actions = marketing_actions
        if offer_id is not None:
            self.offer_id = offer_id
        if price is not None:
            self.price = price
        if price_index is not None:
            self.price_index = price_index
        if price_indexes is not None:
            self.price_indexes = price_indexes
        if product_id is not None:
            self.product_id = product_id
        if volume_weight is not None:
            self.volume_weight = volume_weight

    @property
    def acquiring(self):
        """Gets the acquiring of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501

        Максимальная комиссия за эквайринг.  [Подробнее в Базе знаний продавца](https://seller-edu.ozon.ru/commissions-tariffs/commissions-tariffs-ozon/rashody-na-dop-uslugi#экваиринг)   # noqa: E501

        :return: The acquiring of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._acquiring

    @acquiring.setter
    def acquiring(self, acquiring):
        """Sets the acquiring of this ProductGetProductInfoPricesV4ResponseItem.

        Максимальная комиссия за эквайринг.  [Подробнее в Базе знаний продавца](https://seller-edu.ozon.ru/commissions-tariffs/commissions-tariffs-ozon/rashody-na-dop-uslugi#экваиринг)   # noqa: E501

        :param acquiring: The acquiring of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :type: int
        """

        self._acquiring = acquiring

    @property
    def commissions(self):
        """Gets the commissions of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501


        :return: The commissions of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :rtype: ItemCommissions
        """
        return self._commissions

    @commissions.setter
    def commissions(self, commissions):
        """Sets the commissions of this ProductGetProductInfoPricesV4ResponseItem.


        :param commissions: The commissions of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :type: ItemCommissions
        """

        self._commissions = commissions

    @property
    def marketing_actions(self):
        """Gets the marketing_actions of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501


        :return: The marketing_actions of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :rtype: ItemMarketingActions
        """
        return self._marketing_actions

    @marketing_actions.setter
    def marketing_actions(self, marketing_actions):
        """Sets the marketing_actions of this ProductGetProductInfoPricesV4ResponseItem.


        :param marketing_actions: The marketing_actions of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :type: ItemMarketingActions
        """

        self._marketing_actions = marketing_actions

    @property
    def offer_id(self):
        """Gets the offer_id of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501

        Идентификатор товара в системе продавца.  # noqa: E501

        :return: The offer_id of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._offer_id

    @offer_id.setter
    def offer_id(self, offer_id):
        """Sets the offer_id of this ProductGetProductInfoPricesV4ResponseItem.

        Идентификатор товара в системе продавца.  # noqa: E501

        :param offer_id: The offer_id of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :type: str
        """

        self._offer_id = offer_id

    @property
    def price(self):
        """Gets the price of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501


        :return: The price of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :rtype: ItemPrice
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductGetProductInfoPricesV4ResponseItem.


        :param price: The price of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :type: ItemPrice
        """

        self._price = price

    @property
    def price_index(self):
        """Gets the price_index of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501

        Параметр неактуален и будет удалён 1 мая 2023 года.  Ценовой индекс.   # noqa: E501

        :return: The price_index of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :rtype: str
        """
        return self._price_index

    @price_index.setter
    def price_index(self, price_index):
        """Sets the price_index of this ProductGetProductInfoPricesV4ResponseItem.

        Параметр неактуален и будет удалён 1 мая 2023 года.  Ценовой индекс.   # noqa: E501

        :param price_index: The price_index of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :type: str
        """

        self._price_index = price_index

    @property
    def price_indexes(self):
        """Gets the price_indexes of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501


        :return: The price_indexes of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :rtype: CommonPriceIndexes
        """
        return self._price_indexes

    @price_indexes.setter
    def price_indexes(self, price_indexes):
        """Sets the price_indexes of this ProductGetProductInfoPricesV4ResponseItem.


        :param price_indexes: The price_indexes of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :type: CommonPriceIndexes
        """

        self._price_indexes = price_indexes

    @property
    def product_id(self):
        """Gets the product_id of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501

        Идентификатор товара.  # noqa: E501

        :return: The product_id of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this ProductGetProductInfoPricesV4ResponseItem.

        Идентификатор товара.  # noqa: E501

        :param product_id: The product_id of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def volume_weight(self):
        """Gets the volume_weight of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501

        Объёмный вес товара.  # noqa: E501

        :return: The volume_weight of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :rtype: float
        """
        return self._volume_weight

    @volume_weight.setter
    def volume_weight(self, volume_weight):
        """Sets the volume_weight of this ProductGetProductInfoPricesV4ResponseItem.

        Объёмный вес товара.  # noqa: E501

        :param volume_weight: The volume_weight of this ProductGetProductInfoPricesV4ResponseItem.  # noqa: E501
        :type: float
        """

        self._volume_weight = volume_weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductGetProductInfoPricesV4ResponseItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductGetProductInfoPricesV4ResponseItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
