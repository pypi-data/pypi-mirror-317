[project]
name = "sqlite3_parser"
version = "0.0.2"
authors = [{ name = "Jean Oustry" }]
description = "The SQLite SQL parser for python. Uses SQLite's original lexer"
readme = "README.md"
requires-python = ">=3.12"
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 3 - Alpha",
]

dependencies = ["lark", "cache3", "argh", "cffi"]

[project.scripts]
sqlite3-parser = "sqlite3_parser.__main__:run"

[tool.ruff]
lint.extend-select = ["ALL"]
lint.ignore = [
    "RET505",
    "S101",   # assertions
    "RET506",
    "TCH001", # buggy
    "TCH002", # buggy
    "TCH003", # buggy
    "SLF001",
    "PGH003",
]
line-length = 128

[tool.pytest.ini_options]
minversion = "8"

[tool.coverage.run]
branch = true

source = ["./sqlite3_parser/", "./coverage_helper/", "./parser/"]
omit = ["sqlite3_parser/__main__.py"]


[tool.coverage.report]
exclude_also = [
    """if __name__ == "__main__":""",
    "def main\\(\\) -> None:",
    "def main\\(\\):",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "pragma: no cover",
    "if typing\\.TYPE_CHECKING:",
]


[tool.pyright]
reportUnnecessaryComparison = false
# reportUnknownVariableType = false
reportMatchNotExhaustive = false # éventuellement à rétablir
reportPrivateUsage = false
typeCheckingMode = "strict"
diagnosticMode = "workspace"

[build-system]
requires = ["hatchling", "hatch-build-scripts"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["parser", "sqlite3_parser"]
include = ["./parser", "./sqlite3_parser"]


[tool.hatch.build.targets.sdist]
packages = ["parser", "sqlite3_parser", "./cpp"]
include = ["./parser", "./sqlite3_parser", "./cpp"]
exclude = ["sqlite3_parser/libs"]


[[tool.hatch.build.hooks.build-scripts.scripts]]
out_dir = "sqlite3_parser/libs"

commands = [
    "clang++ ./cpp/tokenize.c++ -shared -o tokenize.shared",
    "clang++ ./cpp/complete.c++ -shared -o complete.shared",
]
artifacts = ["tokenize.shared", "complete.shared"]

[tool.pydoclint]
style = "sphinx"
allow-init-docstring = true
arg-type-hints-in-docstring = false
skip-checking-raises = true
check-return-types = false
# skip-checking-short-docstrings = false
