"""
Generated by Sideko (sideko.dev)
"""

import abc
import typing
from pydantic import BaseModel
from .request import RequestConfig


class AuthProvider(abc.ABC):
    """
    Abstract base class defining the interface for authentication providers.

    Each concrete implementation handles a specific authentication method
    and modifies the request configuration accordingly.
    """

    @abc.abstractmethod
    def add_to_request(self, cfg: RequestConfig) -> RequestConfig:
        """
        Adds authentication details to the request configuration.

        Args:
            cfg: The request configuration to modify

        Returns:
            The modified request configuration with authentication details added
        """


class AuthBasic(BaseModel, AuthProvider):
    """
    Implements HTTP Basic Authentication.

    Adds username and password credentials to the request using the standard
    HTTP Basic Authentication scheme.
    """

    username: typing.Optional[str]
    password: typing.Optional[str]

    def add_to_request(self, cfg: RequestConfig) -> RequestConfig:
        """
        Adds Basic Authentication credentials to the request configuration.

        Only modifies the configuration if both username and password are provided.
        """
        if self.username is not None and self.password is not None:
            cfg["auth"] = (self.username, self.password)
        return cfg


class AuthBearer(BaseModel, AuthProvider):
    """
    Implements Bearer token authentication.

    Adds a Bearer token to the request's Authorization header following
    the OAuth 2.0 Bearer Token scheme.
    """

    val: typing.Optional[str]

    def add_to_request(self, cfg: RequestConfig) -> RequestConfig:
        """
        Adds Bearer token to the Authorization header.

        Only modifies the configuration if a token value is provided.
        """
        if self.val is not None:
            headers = cfg.get("headers", dict())
            headers["Authorization"] = f"Bearer {self.val}"
            cfg["headers"] = headers
        return cfg


class AuthKeyQuery(BaseModel, AuthProvider):
    """
    Implements query parameter-based authentication.

    Adds an authentication token or key as a query parameter with a
    configurable parameter name.
    """

    query_name: str
    val: typing.Optional[str]

    def add_to_request(self, cfg: RequestConfig) -> RequestConfig:
        """
        Adds authentication value as a query parameter.

        Only modifies the configuration if a value is provided.
        """
        if self.val is not None:
            params = cfg.get("params", dict())
            params[self.query_name] = self.val
            cfg["params"] = params
        return cfg


class AuthKeyHeader(BaseModel, AuthProvider):
    """
    Implements header-based authentication.

    Adds an authentication token or key as a custom header with a
    configurable header name.
    """

    header_name: str
    val: typing.Optional[str]

    def add_to_request(self, cfg: RequestConfig) -> RequestConfig:
        """
        Adds authentication value as a custom header.

        Only modifies the configuration if a value is provided.
        """
        if self.val is not None:
            headers = cfg.get("headers", {})
            headers[self.header_name] = self.val
            cfg["headers"] = headers
        return cfg


class AuthKeyCookie(BaseModel, AuthProvider):
    """
    Implements cookie-based authentication.

    Adds an authentication token or key as a cookie with a
    configurable cookie name.
    """

    cookie_name: str
    val: typing.Optional[str]

    def add_to_request(self, cfg: RequestConfig) -> RequestConfig:
        """
        Adds authentication value as a cookie.

        Only modifies the configuration if a value is provided.
        """
        if self.val is not None:
            cookies = cfg.get("cookies", dict())
            cookies[self.cookie_name] = self.val
            cfg["cookies"] = cookies
        return cfg
