"""
Generated by Sideko (sideko.dev)
"""

import typing

from magic_hour.core import (
    AsyncBaseClient,
    RequestOptions,
    SyncBaseClient,
    default_request_options,
    to_encodable,
    type_utils,
)
from magic_hour.types import models, params


class FaceSwapPhotoClient:
    def __init__(self, *, base_client: SyncBaseClient):
        self._base_client = base_client

    def create(
        self,
        *,
        assets: params.PostV1FaceSwapPhotoBodyAssets,
        name: typing.Union[
            typing.Optional[str], type_utils.NOT_GIVEN
        ] = type_utils.NOT_GIVEN,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostV1FaceSwapPhotoResponse:
        """
        Create a face swap photo. Each photo costs 5 frames. The height/width of the output image depends on your subscription. Please refer to our [pricing](/pricing) page for more details

        POST /v1/face-swap-photo
        """
        _json = to_encodable(
            item={"name": name, "assets": assets},
            dump_with=params._SerializerPostV1FaceSwapPhotoBody,
        )
        return self._base_client.request(
            method="POST",
            path="/v1/face-swap-photo",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=models.PostV1FaceSwapPhotoResponse,
            request_options=request_options or default_request_options(),
        )


class AsyncFaceSwapPhotoClient:
    def __init__(self, *, base_client: AsyncBaseClient):
        self._base_client = base_client

    async def create(
        self,
        *,
        assets: params.PostV1FaceSwapPhotoBodyAssets,
        name: typing.Union[
            typing.Optional[str], type_utils.NOT_GIVEN
        ] = type_utils.NOT_GIVEN,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> models.PostV1FaceSwapPhotoResponse:
        """
        Create a face swap photo. Each photo costs 5 frames. The height/width of the output image depends on your subscription. Please refer to our [pricing](/pricing) page for more details

        POST /v1/face-swap-photo
        """
        _json = to_encodable(
            item={"name": name, "assets": assets},
            dump_with=params._SerializerPostV1FaceSwapPhotoBody,
        )
        return await self._base_client.request(
            method="POST",
            path="/v1/face-swap-photo",
            auth_names=["bearerAuth"],
            json=_json,
            cast_to=models.PostV1FaceSwapPhotoResponse,
            request_options=request_options or default_request_options(),
        )
