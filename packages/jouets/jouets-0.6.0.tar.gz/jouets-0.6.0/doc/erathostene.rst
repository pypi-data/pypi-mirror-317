..
   Copyright 2014-2020 Louis Paternault
   
   Cette ≈ìuvre de Louis Paternault est mise √† disposition selon les termes de
   la licence Creative Commons Attribution - Partage dans les M√™mes Conditions
   4.0 International (CC-BY-SA). Le texte complet de la licence est disponible
   √† l'adresse : http://creativecommons.org/licenses/by-sa/4.0/deed.fr

*******************************************************
`erathostene` ‚Äî Crible d'√ârathost√®ne optimis√© en espace
*******************************************************

Le `crible d'√ârathost√®ne <http://fr.wikipedia.org/wiki/Crible_d'√ârathost√®ne>`_
est un algorithme permettant d'√©num√©rer tous les nombres premiers inf√©rieurs √†
un certain nombre :math:`N`. Cette version l'am√©liore suivant deux aspects :

#. Le nombre maximal n'a pas a √™tre pr√©cis√© au d√©part : les nombres premiers
   sont √©num√©r√©s tant que l'utilisateur n'arr√™te pas le programme.
#. La m√©moire n√©cessaire est lin√©aire en le nombre de nombres premiers trouv√©s,
   et non pas en le plus grand nombre premier. La m√©moire n√©c√©ssaire `est donc
   <http://fr.wikipedia.org/wiki/Fonction_de_compte_des_nombres_premiers>`_ en
   :math:`O\left(\frac{n}{\ln n}\right)` au lieu de :math:`O(n)` (o√π :math:`n`
   est le plus grand nombre premier trouv√©).

L'algorithme est d√©crit par la suite (:ref:`erathostene_algo`), et impl√©ment√©
dans la fonction :py:func:`premiers`.

.. contents::
   :local:
   :depth: 1

Usage
=====

.. argparse::
    :module: jouets.erathostene.__main__
    :func: analyse
    :prog: erathostene

.. _erathostene_algo:

Algorithme
==========

Code source
-----------

.. literalinclude:: ../jouets/erathostene/__init__.py
    :linenos:
    :pyobject: premiers

Algorithme d'√ârathost√®ne original
---------------------------------

Le principe du crible d'√ârathost√®ne est :

#. On consid√®re une table de tous les nombres entiers naturels sup√©rieurs
   (strictement) √† 1, jusqu'√† un certain :math:`N`.
#. On prend le premier nombre de cette table : il est premier. On le
   supprime, et on supprime √©galement de la table tous ses multiples.
#. On recommence l'√©tape pr√©c√©dente jusqu'√† √©puisement de la liste.

Optimisation en espace
----------------------

L'optimisation consiste en la chose suivante.
On construit un dictionnaire ``prochains`` dont
les clefs sont des nombres pas encore rencontr√©s,
et les valeurs des nombres premiers.
Par exemple, ``prochains[p] == m`` signifie que ``p`` est un nombre premier,
et ``m`` le prochain (nous verrons dans quel sens) de ses multiples.
Ensuite, quand un nombre premier est trouv√©,
plut√¥t que de supprimer tous ses multiples de la table des entiers
(ce qui n'a pas de sens ici, puisqu'une telle table n'existe pas),
on ajoute au dictionnaire ``prochains`` ce nombre,
ainsi que son prochain multiple.

L'algorithme (de base : quelques optimisations seront apport√©es dans la
section suivante) est donc le suivant :

1. Initialisation : ``prochains`` est un dictionnaire vide.

2. On consid√®re ``n`` :

  * Si ``n`` n'est pas une clef du dictionnaire ``prochains``, il est premier.
    On le renvoit (``yield n``), et on affecte ``premiers[n**2] = n``,
    ce qui signifie que la clef ``n**2`` est le prochain multiple du nombre premier ``n`` √† √©tudier.
  * Sinon, ``n`` est une clef du dictionnaire.
    Donc il est multiple du nombre premier ``prochains[n]``.
    On supprime alors ``prochains[n]``,
    et on cr√©e dans le dictionnaire une nouvelle entr√©e ``prochains[m] = p``, o√π
    ``p`` √©tait la valeur de ``prochains[n]``
    (c'est-√†-dire un des diviseurs premiers de ``n``),
    et ``m`` est le prochain multiple de ``p``.

    En d'autres termes, dans notre crible d'√ârathost√®ne,
    on raye le prochain nombre multiple du nombre premier ``p``.

3. On ajoute 1 √† ``n``, et on recommence √† l'√©tape 2.

Optimisations suppl√©mentaires
-----------------------------

Quelques optimisations sont mises en place.

* Plut√¥t que de compter de 1 en 1, on remarque que 2 est premier, et on
  compte de 2 en 2, uniquement les nombres impairs (puisqu'aucuns des
  nombres pairs autre que 2 n'est premier).
* Le ``multiple`` du couple :math:`(premier, multiple)` n'est pas
  n√©c√©ssairement le *prochain* multiple de :math:`premier` si cela n'est
  pas n√©cessaire. Par exemple, si ``prochains`` contient le couple
  :math:`(3, 15)`, il n'est pas n√©cessaire d'ajouter :math:`(5, 15)` √† la
  liste, puisque 15 est d√©j√† marqu√© comme non premier ; on ajoutera donc
  plut√¥t :math:`(5, 25)`.
* Lors du premier ajout d'un nombre premier :math:`p` √† la liste
  ``prochains``, le multiple associ√© est :math:`p^2`. En effet, tous les
  multiples plus petits sont ou seront trait√©s par des nombres premiers
  d√©j√† d√©couverts.

Exemple
-------

Par exemple, au bout de quelques tours de boucles, alors que :math:`n=13`, la varibles ``prochains`` vaut:

.. code-block:: python

   {
     15: 3,
     25: 5,
     49: 7,
     121: 11,
    }

Cela signifie que dans notre crible d'√ârathost√®ne, √† partir du nombre 13 :

- le prochain multiple de 3 est 15 ;
- le prochain multiple de 5 est 25 ;
- le prochain multiple de 7 est 49 ;
- le prochain multiple de 11 est 121.

Au tour suivant, :math:`n=15`. Puisque 15 est une clef du dictionnaire, il n'est pas premier. On le retire, et on ajoute ``prochains[21] = 3`` (ce qui signifie que le prochain multiple de 3 est 21) :

.. code-block:: python

   {
     21: 3,
     25: 5,
     49: 7,
     121: 11,
     169: 13,
   }

Au tour suivant, :math:`n=17`, qui *n'est pas* une clef du dictionnaire : c'est donc un nombre premier, et on ajoute ``prochains[17] = 17**2`` comme le prochain nombre multiple de 17 √† rayer (il y a d'autres nombres multiples de 17 avant :math:`17^2`, mais il est inutile de les rayer ici car ils seront ray√©s comme multiples de nombres plus petits).

Performances
============

Sur mon ordinateur portable, j'ai √©t√© capable de g√©n√©rer les nombres premiers suivants :

- un million de nombres premiers en 7 secondes ;
- dix millions de nombres premiers en 1 minute et demi.

J'ai √©t√© jusqu'√† calculer le 70140686·µâ nombre premier (1403273909), en utilisant 10Go de m√©moire. Apr√®s cela, le programme s'est arr√™t√©, sans que je comprenne pourquoi‚Ä¶

Par peur du ridicule, je n'ose pas comparer cela aux performances des algorithmes qui battent des records, mais je suis quand m√™me content de moi‚Ä¶ ü§ìüôÇ
