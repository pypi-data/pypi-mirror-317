# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.search_response import SearchResponse
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from .types.search_url_request_from import SearchUrlRequestFrom
from .types.search_url_request_to import SearchUrlRequestTo
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SearchLinkClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def search_url_get(
        self,
        *,
        ids: str,
        links: str,
        from_: typing.Optional[str] = None,
        to: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchResponse:
        """
        This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).

        Parameters
        ----------
        ids : str

        links : str

        from_ : typing.Optional[str]

        to : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchResponse
            Successful Response

        Examples
        --------
        from newscatcher import NewscatcherApi

        client = NewscatcherApi(
            api_token="YOUR_API_TOKEN",
        )
        client.search_link.search_url_get(
            ids="ids",
            links="links",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/search_by_link",
            method="GET",
            params={
                "ids": ids,
                "links": links,
                "from_": from_,
                "to_": to,
                "page": page,
                "page_size": page_size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SearchResponse,
                    parse_obj_as(
                        type_=SearchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def search_url_post(
        self,
        *,
        ids: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        links: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        from_: typing.Optional[SearchUrlRequestFrom] = OMIT,
        to: typing.Optional[SearchUrlRequestTo] = OMIT,
        page: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchResponse:
        """
        This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).

        Parameters
        ----------
        ids : typing.Optional[typing.Optional[typing.Any]]

        links : typing.Optional[typing.Optional[typing.Any]]

        from_ : typing.Optional[SearchUrlRequestFrom]

        to : typing.Optional[SearchUrlRequestTo]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchResponse
            Successful Response

        Examples
        --------
        from newscatcher import NewscatcherApi

        client = NewscatcherApi(
            api_token="YOUR_API_TOKEN",
        )
        client.search_link.search_url_post()
        """
        _response = self._client_wrapper.httpx_client.request(
            "api/search_by_link",
            method="POST",
            json={
                "ids": ids,
                "links": links,
                "from_": convert_and_respect_annotation_metadata(
                    object_=from_, annotation=SearchUrlRequestFrom, direction="write"
                ),
                "to_": convert_and_respect_annotation_metadata(
                    object_=to, annotation=SearchUrlRequestTo, direction="write"
                ),
                "page": page,
                "page_size": page_size,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SearchResponse,
                    parse_obj_as(
                        type_=SearchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncSearchLinkClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def search_url_get(
        self,
        *,
        ids: str,
        links: str,
        from_: typing.Optional[str] = None,
        to: typing.Optional[str] = None,
        page: typing.Optional[int] = None,
        page_size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchResponse:
        """
        This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).

        Parameters
        ----------
        ids : str

        links : str

        from_ : typing.Optional[str]

        to : typing.Optional[str]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchResponse
            Successful Response

        Examples
        --------
        import asyncio

        from newscatcher import AsyncNewscatcherApi

        client = AsyncNewscatcherApi(
            api_token="YOUR_API_TOKEN",
        )


        async def main() -> None:
            await client.search_link.search_url_get(
                ids="ids",
                links="links",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/search_by_link",
            method="GET",
            params={
                "ids": ids,
                "links": links,
                "from_": from_,
                "to_": to,
                "page": page,
                "page_size": page_size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SearchResponse,
                    parse_obj_as(
                        type_=SearchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def search_url_post(
        self,
        *,
        ids: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        links: typing.Optional[typing.Optional[typing.Any]] = OMIT,
        from_: typing.Optional[SearchUrlRequestFrom] = OMIT,
        to: typing.Optional[SearchUrlRequestTo] = OMIT,
        page: typing.Optional[int] = OMIT,
        page_size: typing.Optional[int] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SearchResponse:
        """
        This endpoint allows you to search for articles. You can search for articles by id(s) or link(s).

        Parameters
        ----------
        ids : typing.Optional[typing.Optional[typing.Any]]

        links : typing.Optional[typing.Optional[typing.Any]]

        from_ : typing.Optional[SearchUrlRequestFrom]

        to : typing.Optional[SearchUrlRequestTo]

        page : typing.Optional[int]

        page_size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SearchResponse
            Successful Response

        Examples
        --------
        import asyncio

        from newscatcher import AsyncNewscatcherApi

        client = AsyncNewscatcherApi(
            api_token="YOUR_API_TOKEN",
        )


        async def main() -> None:
            await client.search_link.search_url_post()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "api/search_by_link",
            method="POST",
            json={
                "ids": ids,
                "links": links,
                "from_": convert_and_respect_annotation_metadata(
                    object_=from_, annotation=SearchUrlRequestFrom, direction="write"
                ),
                "to_": convert_and_respect_annotation_metadata(
                    object_=to, annotation=SearchUrlRequestTo, direction="write"
                ),
                "page": page,
                "page_size": page_size,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    SearchResponse,
                    parse_obj_as(
                        type_=SearchResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
